
stm32f103x6_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b50  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000c80  08000c80  00010c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ca0  08000ca0  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08000ca0  08000ca0  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ca0  08000ca0  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ca0  08000ca0  00010ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ca4  08000ca4  00010ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08000ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000040  08000ce8  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08000ce8  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016e8  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004b8  00000000  00000000  00021751  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a98  00000000  00000000  00021c09  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  000226a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  00022850  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000007ae  00000000  00000000  000229b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000010ca  00000000  00000000  0002315e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00005013  00000000  00000000  00024228  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002923b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000568  00000000  00000000  000292b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000040 	.word	0x20000040
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c68 	.word	0x08000c68

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000044 	.word	0x20000044
 800016c:	08000c68 	.word	0x08000c68

08000170 <lcd_send_EN>:
	MCAL_GPIO_WritePin(lcd->DataRegister, lcd->DataPins[1].PinNum, ((command >> 1) & 0x01));
	MCAL_GPIO_WritePin(lcd->DataRegister, lcd->DataPins[2].PinNum, ((command >> 2) & 0x01));
	MCAL_GPIO_WritePin(lcd->DataRegister, lcd->DataPins[3].PinNum, ((command >> 3) & 0x01));
}

static void lcd_send_EN(lcd_t *lcd) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	MCAL_GPIO_WritePin(lcd->ControlRegister, lcd->EN.PinNum , GPIO_HIGH); // EN = High
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	6858      	ldr	r0, [r3, #4]
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000182:	2201      	movs	r2, #1
 8000184:	4619      	mov	r1, r3
 8000186:	f000 fcb1 	bl	8000aec <MCAL_GPIO_WritePin>
    _delay_ms(5);                  // Small delay
 800018a:	2005      	movs	r0, #5
 800018c:	f000 f955 	bl	800043a <_delay_ms>
    MCAL_GPIO_WritePin(lcd->ControlRegister, lcd->EN.PinNum , GPIO_LOW); // EN = Low
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	6858      	ldr	r0, [r3, #4]
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800019a:	2200      	movs	r2, #0
 800019c:	4619      	mov	r1, r3
 800019e:	f000 fca5 	bl	8000aec <MCAL_GPIO_WritePin>
    _delay_ms(5); 
 80001a2:	2005      	movs	r0, #5
 80001a4:	f000 f949 	bl	800043a <_delay_ms>
}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}

080001b0 <lcd_initialize>:

void lcd_initialize(lcd_t *lcd) {
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
    // Set LCD control pins as output
	MCAL_GPIO_Init(lcd->ControlRegister, &(lcd->EN));
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	685a      	ldr	r2, [r3, #4]
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	3328      	adds	r3, #40	; 0x28
 80001c0:	4619      	mov	r1, r3
 80001c2:	4610      	mov	r0, r2
 80001c4:	f000 fc28 	bl	8000a18 <MCAL_GPIO_Init>
	MCAL_GPIO_Init(lcd->ControlRegister, &(lcd->RS));
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	685a      	ldr	r2, [r3, #4]
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	332c      	adds	r3, #44	; 0x2c
 80001d0:	4619      	mov	r1, r3
 80001d2:	4610      	mov	r0, r2
 80001d4:	f000 fc20 	bl	8000a18 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(lcd->ControlRegister, lcd->RS.PinNum, lcd->RS.PinState);
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	6858      	ldr	r0, [r3, #4]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80001e8:	461a      	mov	r2, r3
 80001ea:	f000 fc7f 	bl	8000aec <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd->ControlRegister, lcd->EN.PinNum, lcd->EN.PinState);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	6858      	ldr	r0, [r3, #4]
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80001fe:	461a      	mov	r2, r3
 8000200:	f000 fc74 	bl	8000aec <MCAL_GPIO_WritePin>
    #endif

    #if LCD_MODE == LCD_8BIT_MODE
    // Set LCD pins for 8-bit mode
    // Set all pins for data as output
    for(int i = 0; i < 8; i++){
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
 8000208:	e01c      	b.n	8000244 <lcd_initialize+0x94>
    	MCAL_GPIO_Init(lcd->DataRegister, &(lcd->DataPins[i]));
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	6818      	ldr	r0, [r3, #0]
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	3302      	adds	r3, #2
 8000212:	009b      	lsls	r3, r3, #2
 8000214:	687a      	ldr	r2, [r7, #4]
 8000216:	4413      	add	r3, r2
 8000218:	4619      	mov	r1, r3
 800021a:	f000 fbfd 	bl	8000a18 <MCAL_GPIO_Init>
    	MCAL_GPIO_WritePin(lcd->DataRegister, lcd->DataPins[i].PinNum, lcd->DataPins[i].PinState);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	6818      	ldr	r0, [r3, #0]
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	68fa      	ldr	r2, [r7, #12]
 8000226:	3202      	adds	r2, #2
 8000228:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	3302      	adds	r3, #2
 8000232:	009b      	lsls	r3, r3, #2
 8000234:	4413      	add	r3, r2
 8000236:	789b      	ldrb	r3, [r3, #2]
 8000238:	461a      	mov	r2, r3
 800023a:	f000 fc57 	bl	8000aec <MCAL_GPIO_WritePin>
    for(int i = 0; i < 8; i++){
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	3301      	adds	r3, #1
 8000242:	60fb      	str	r3, [r7, #12]
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	2b07      	cmp	r3, #7
 8000248:	dddf      	ble.n	800020a <lcd_initialize+0x5a>
    }

    _delay_ms(20); // Wait for the LCD to power up
 800024a:	2014      	movs	r0, #20
 800024c:	f000 f8f5 	bl	800043a <_delay_ms>

    // 8-bit, 2-line, 5x8 dots
    lcd_send_command(lcd, _LCD_8BIT_MODE_2LINE);
 8000250:	2138      	movs	r1, #56	; 0x38
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f000 f823 	bl	800029e <lcd_send_command>

    #endif

    _delay_ms(5);  // Wait for initialization
 8000258:	2005      	movs	r0, #5
 800025a:	f000 f8ee 	bl	800043a <_delay_ms>
    // Display on, cursor off
    lcd_send_command(lcd, _LCD_CURSOR_OFF_DISPLAY_ON);
 800025e:	210c      	movs	r1, #12
 8000260:	6878      	ldr	r0, [r7, #4]
 8000262:	f000 f81c 	bl	800029e <lcd_send_command>
    _delay_ms(1);
 8000266:	2001      	movs	r0, #1
 8000268:	f000 f8e7 	bl	800043a <_delay_ms>
    // Clear the LCD and return home
    lcd_send_command(lcd, _LCD_CLEAR);
 800026c:	2101      	movs	r1, #1
 800026e:	6878      	ldr	r0, [r7, #4]
 8000270:	f000 f815 	bl	800029e <lcd_send_command>
    _delay_ms(2);
 8000274:	2002      	movs	r0, #2
 8000276:	f000 f8e0 	bl	800043a <_delay_ms>
    // Increment cursor without shifting
    lcd_send_command(lcd, _LCD_INC_SHIFT_OFF);
 800027a:	2106      	movs	r1, #6
 800027c:	6878      	ldr	r0, [r7, #4]
 800027e:	f000 f80e 	bl	800029e <lcd_send_command>
    _delay_ms(1);
 8000282:	2001      	movs	r0, #1
 8000284:	f000 f8d9 	bl	800043a <_delay_ms>
    lcd_send_command(lcd, _LCD_DDRAM_START);
 8000288:	2180      	movs	r1, #128	; 0x80
 800028a:	6878      	ldr	r0, [r7, #4]
 800028c:	f000 f807 	bl	800029e <lcd_send_command>
    _delay_ms(1);
 8000290:	2001      	movs	r0, #1
 8000292:	f000 f8d2 	bl	800043a <_delay_ms>
}
 8000296:	bf00      	nop
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}

0800029e <lcd_send_command>:

void lcd_send_command(lcd_t *lcd, uint8_t command) {
 800029e:	b580      	push	{r7, lr}
 80002a0:	b084      	sub	sp, #16
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	6078      	str	r0, [r7, #4]
 80002a6:	460b      	mov	r3, r1
 80002a8:	70fb      	strb	r3, [r7, #3]
    // Set RS = 0 for command mode
    MCAL_GPIO_WritePin(lcd->ControlRegister, lcd->RS.PinNum , GPIO_LOW);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	6858      	ldr	r0, [r3, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80002b4:	2200      	movs	r2, #0
 80002b6:	4619      	mov	r1, r3
 80002b8:	f000 fc18 	bl	8000aec <MCAL_GPIO_WritePin>
    lcd_send_EN(lcd);  // Enable pulse
    #endif

    #if LCD_MODE == LCD_8BIT_MODE
    // Send full 8-bit command
    for(int i = 0; i < 8; i++){
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	e014      	b.n	80002ec <lcd_send_command+0x4e>
    	MCAL_GPIO_WritePin(lcd->DataRegister, lcd->DataPins[i].PinNum, ((command >> i) & 0x01));
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	6818      	ldr	r0, [r3, #0]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	3202      	adds	r2, #2
 80002cc:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 80002d0:	78fa      	ldrb	r2, [r7, #3]
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	fa42 f303 	asr.w	r3, r2, r3
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	461a      	mov	r2, r3
 80002e2:	f000 fc03 	bl	8000aec <MCAL_GPIO_WritePin>
    for(int i = 0; i < 8; i++){
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	3301      	adds	r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	2b07      	cmp	r3, #7
 80002f0:	dde7      	ble.n	80002c2 <lcd_send_command+0x24>
    }
    lcd_send_EN(lcd);  // Enable pulse
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f7ff ff3c 	bl	8000170 <lcd_send_EN>
    #endif
}
 80002f8:	bf00      	nop
 80002fa:	3710      	adds	r7, #16
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <lcd_send_char_data>:

void lcd_send_char_data(lcd_t *lcd, uint8_t data) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	460b      	mov	r3, r1
 800030a:	70fb      	strb	r3, [r7, #3]
    // Set RS = 1 for data mode
	MCAL_GPIO_WritePin(lcd->ControlRegister, lcd->RS.PinNum , GPIO_HIGH);
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	6858      	ldr	r0, [r3, #4]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000316:	2201      	movs	r2, #1
 8000318:	4619      	mov	r1, r3
 800031a:	f000 fbe7 	bl	8000aec <MCAL_GPIO_WritePin>
    lcd_send_EN(lcd);  // Enable pulse
    #endif

    #if LCD_MODE == LCD_8BIT_MODE
    // Send full 8-bit data
    for(int i = 0; i < 8; i++){
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	e014      	b.n	800034e <lcd_send_char_data+0x4e>
		MCAL_GPIO_WritePin(lcd->DataRegister, lcd->DataPins[i].PinNum, ((data >> i) & 0x01));
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	6818      	ldr	r0, [r3, #0]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	68fa      	ldr	r2, [r7, #12]
 800032c:	3202      	adds	r2, #2
 800032e:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8000332:	78fa      	ldrb	r2, [r7, #3]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	fa42 f303 	asr.w	r3, r2, r3
 800033a:	b2db      	uxtb	r3, r3
 800033c:	f003 0301 	and.w	r3, r3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	f000 fbd2 	bl	8000aec <MCAL_GPIO_WritePin>
    for(int i = 0; i < 8; i++){
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	3301      	adds	r3, #1
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	2b07      	cmp	r3, #7
 8000352:	dde7      	ble.n	8000324 <lcd_send_char_data+0x24>
	}
    lcd_send_EN(lcd);  // Enable pulse
 8000354:	6878      	ldr	r0, [r7, #4]
 8000356:	f7ff ff0b 	bl	8000170 <lcd_send_EN>
    #endif
}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <lcd_set_cursor_pos>:

void lcd_set_cursor_pos(lcd_t *lcd, uint8_t row, uint8_t col){
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	70fb      	strb	r3, [r7, #3]
 8000370:	4613      	mov	r3, r2
 8000372:	70bb      	strb	r3, [r7, #2]
    switch(row){
 8000374:	78fb      	ldrb	r3, [r7, #3]
 8000376:	3b01      	subs	r3, #1
 8000378:	2b03      	cmp	r3, #3
 800037a:	d82b      	bhi.n	80003d4 <lcd_set_cursor_pos+0x70>
 800037c:	a201      	add	r2, pc, #4	; (adr r2, 8000384 <lcd_set_cursor_pos+0x20>)
 800037e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000382:	bf00      	nop
 8000384:	08000395 	.word	0x08000395
 8000388:	080003a5 	.word	0x080003a5
 800038c:	080003b5 	.word	0x080003b5
 8000390:	080003c5 	.word	0x080003c5
        case ROW1 :
            lcd_send_command(lcd, 0x80 + col - 1);
 8000394:	78bb      	ldrb	r3, [r7, #2]
 8000396:	337f      	adds	r3, #127	; 0x7f
 8000398:	b2db      	uxtb	r3, r3
 800039a:	4619      	mov	r1, r3
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f7ff ff7e 	bl	800029e <lcd_send_command>
            break;
 80003a2:	e017      	b.n	80003d4 <lcd_set_cursor_pos+0x70>
        case ROW2 :
            lcd_send_command(lcd, 0xC0 + col - 1);
 80003a4:	78bb      	ldrb	r3, [r7, #2]
 80003a6:	3b41      	subs	r3, #65	; 0x41
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	4619      	mov	r1, r3
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f7ff ff76 	bl	800029e <lcd_send_command>
            break;
 80003b2:	e00f      	b.n	80003d4 <lcd_set_cursor_pos+0x70>
        case ROW3 :
            lcd_send_command(lcd, 0x94 + col - 1);
 80003b4:	78bb      	ldrb	r3, [r7, #2]
 80003b6:	3b6d      	subs	r3, #109	; 0x6d
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	4619      	mov	r1, r3
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff6e 	bl	800029e <lcd_send_command>
            break;
 80003c2:	e007      	b.n	80003d4 <lcd_set_cursor_pos+0x70>
        case ROW4 :
            lcd_send_command(lcd, 0xd4 + col - 1);
 80003c4:	78bb      	ldrb	r3, [r7, #2]
 80003c6:	3b2d      	subs	r3, #45	; 0x2d
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	4619      	mov	r1, r3
 80003cc:	6878      	ldr	r0, [r7, #4]
 80003ce:	f7ff ff66 	bl	800029e <lcd_send_command>
            break;
 80003d2:	bf00      	nop
    }
}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <lcd_send_string>:
void lcd_send_char_data_pos(lcd_t *lcd, uint8_t data, uint8_t row, uint8_t column){
    lcd_set_cursor_pos(lcd, row, column);
    lcd_send_char_data(lcd, data);
}

void lcd_send_string(lcd_t *lcd, uint8_t str[]){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
    while(*str != '\0'){
 80003e6:	e007      	b.n	80003f8 <lcd_send_string+0x1c>
        lcd_send_char_data(lcd, *str++);
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	1c5a      	adds	r2, r3, #1
 80003ec:	603a      	str	r2, [r7, #0]
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	4619      	mov	r1, r3
 80003f2:	6878      	ldr	r0, [r7, #4]
 80003f4:	f7ff ff84 	bl	8000300 <lcd_send_char_data>
    while(*str != '\0'){
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d1f3      	bne.n	80003e8 <lcd_send_string+0xc>
    }
}
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <lcd_send_string_pos>:

void lcd_send_string_pos(lcd_t *lcd, uint8_t str[], uint8_t row, uint8_t column){
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	4611      	mov	r1, r2
 8000414:	461a      	mov	r2, r3
 8000416:	460b      	mov	r3, r1
 8000418:	71fb      	strb	r3, [r7, #7]
 800041a:	4613      	mov	r3, r2
 800041c:	71bb      	strb	r3, [r7, #6]
    lcd_set_cursor_pos(lcd, row, column);
 800041e:	79ba      	ldrb	r2, [r7, #6]
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	4619      	mov	r1, r3
 8000424:	68f8      	ldr	r0, [r7, #12]
 8000426:	f7ff ff9d 	bl	8000364 <lcd_set_cursor_pos>
    lcd_send_string(lcd, str);
 800042a:	68b9      	ldr	r1, [r7, #8]
 800042c:	68f8      	ldr	r0, [r7, #12]
 800042e:	f7ff ffd5 	bl	80003dc <lcd_send_string>
}
 8000432:	bf00      	nop
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <_delay_ms>:

    // Display the custom character at the specified position
    lcd_send_char_data_pos(lcd, memory_pos, row, column);
}

void _delay_ms(uint32 ms) {
 800043a:	b480      	push	{r7}
 800043c:	b085      	sub	sp, #20
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
    volatile uint32 i, j;
    for (i = 0; i < ms; i++) {
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	e00b      	b.n	8000460 <_delay_ms+0x26>
        for (j = 0; j < 255; j++) {
 8000448:	2300      	movs	r3, #0
 800044a:	60bb      	str	r3, [r7, #8]
 800044c:	e002      	b.n	8000454 <_delay_ms+0x1a>
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	3301      	adds	r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	2bfe      	cmp	r3, #254	; 0xfe
 8000458:	d9f9      	bls.n	800044e <_delay_ms+0x14>
    for (i = 0; i < ms; i++) {
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	3301      	adds	r3, #1
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	429a      	cmp	r2, r3
 8000466:	d8ef      	bhi.n	8000448 <_delay_ms+0xe>

        }
    }
}
 8000468:	bf00      	nop
 800046a:	3714      	adds	r7, #20
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr
	...

08000474 <EXTI_SYSCFG>:
 * @Note     This function sets the appropriate bits in the AFIO_EXTICRx register to
 *           route the selected GPIO pin to the EXTI line. Ensure the AFIO clock is enabled
 *           before calling this function. Typically, this function is called internally by
 *           the EXTI initialization routine.
 */
static void EXTI_SYSCFG(GPIO_t *port, GPIO_PinNum_t PinNum){
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	460b      	mov	r3, r1
 800047e:	70fb      	strb	r3, [r7, #3]
	uint8 shift = (PinNum % 4) * 4;
 8000480:	78fb      	ldrb	r3, [r7, #3]
 8000482:	f003 0303 	and.w	r3, r3, #3
 8000486:	b2db      	uxtb	r3, r3
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	73bb      	strb	r3, [r7, #14]
	uint8 EXTI_Line;

	if (port == GPIOA) {
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a22      	ldr	r2, [pc, #136]	; (8000518 <EXTI_SYSCFG+0xa4>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d102      	bne.n	800049a <EXTI_SYSCFG+0x26>
	    EXTI_Line = EXTI_PAx_LINE; // Assign EXTI line for GPIOA
 8000494:	2300      	movs	r3, #0
 8000496:	73fb      	strb	r3, [r7, #15]
 8000498:	e013      	b.n	80004c2 <EXTI_SYSCFG+0x4e>
	}
	else if (port == GPIOB) {
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a1f      	ldr	r2, [pc, #124]	; (800051c <EXTI_SYSCFG+0xa8>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d102      	bne.n	80004a8 <EXTI_SYSCFG+0x34>
	    EXTI_Line = EXTI_PBx_LINE; // Assign EXTI line for GPIOB
 80004a2:	2301      	movs	r3, #1
 80004a4:	73fb      	strb	r3, [r7, #15]
 80004a6:	e00c      	b.n	80004c2 <EXTI_SYSCFG+0x4e>
	}
	else if (port == GPIOC) {
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a1d      	ldr	r2, [pc, #116]	; (8000520 <EXTI_SYSCFG+0xac>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d102      	bne.n	80004b6 <EXTI_SYSCFG+0x42>
	    EXTI_Line = EXTI_PCx_LINE; // Assign EXTI line for GPIOC
 80004b0:	2302      	movs	r3, #2
 80004b2:	73fb      	strb	r3, [r7, #15]
 80004b4:	e005      	b.n	80004c2 <EXTI_SYSCFG+0x4e>
	}
	else if (port == GPIOD) {
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4a1a      	ldr	r2, [pc, #104]	; (8000524 <EXTI_SYSCFG+0xb0>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d127      	bne.n	800050e <EXTI_SYSCFG+0x9a>
	    EXTI_Line = EXTI_PDx_LINE; // Assign EXTI line for GPIOD
 80004be:	2303      	movs	r3, #3
 80004c0:	73fb      	strb	r3, [r7, #15]
	else {
	    return; // Exit the function or handle error
	}

	// Map the GPIO pin to the EXTI line in the AFIO_EXTICR[4]
	AFIO->EXTICR[PinNum / 4] &= ~(0xF << shift);
 80004c2:	4a19      	ldr	r2, [pc, #100]	; (8000528 <EXTI_SYSCFG+0xb4>)
 80004c4:	78fb      	ldrb	r3, [r7, #3]
 80004c6:	089b      	lsrs	r3, r3, #2
 80004c8:	b2d8      	uxtb	r0, r3
 80004ca:	4603      	mov	r3, r0
 80004cc:	3302      	adds	r3, #2
 80004ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d2:	7bba      	ldrb	r2, [r7, #14]
 80004d4:	210f      	movs	r1, #15
 80004d6:	fa01 f202 	lsl.w	r2, r1, r2
 80004da:	43d2      	mvns	r2, r2
 80004dc:	4912      	ldr	r1, [pc, #72]	; (8000528 <EXTI_SYSCFG+0xb4>)
 80004de:	401a      	ands	r2, r3
 80004e0:	1c83      	adds	r3, r0, #2
 80004e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[PinNum / 4] |= ((EXTI_Line & 0xF) << shift);
 80004e6:	4a10      	ldr	r2, [pc, #64]	; (8000528 <EXTI_SYSCFG+0xb4>)
 80004e8:	78fb      	ldrb	r3, [r7, #3]
 80004ea:	089b      	lsrs	r3, r3, #2
 80004ec:	b2d8      	uxtb	r0, r3
 80004ee:	4603      	mov	r3, r0
 80004f0:	3302      	adds	r3, #2
 80004f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f6:	7bfa      	ldrb	r2, [r7, #15]
 80004f8:	f002 010f 	and.w	r1, r2, #15
 80004fc:	7bba      	ldrb	r2, [r7, #14]
 80004fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000502:	4909      	ldr	r1, [pc, #36]	; (8000528 <EXTI_SYSCFG+0xb4>)
 8000504:	431a      	orrs	r2, r3
 8000506:	1c83      	adds	r3, r0, #2
 8000508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800050c:	e000      	b.n	8000510 <EXTI_SYSCFG+0x9c>
	    return; // Exit the function or handle error
 800050e:	bf00      	nop
}
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	40010800 	.word	0x40010800
 800051c:	40010c00 	.word	0x40010c00
 8000520:	40011000 	.word	0x40011000
 8000524:	40011400 	.word	0x40011400
 8000528:	40010000 	.word	0x40010000

0800052c <NVIC_EnableIRQ>:
 * @Retval   None
 *
 * @Note     This function maps the EXTI line to the corresponding NVIC IRQ and enables it.
 *           Ensure that the EXTI line is properly configured before enabling the interrupt.
 */
static void NVIC_EnableIRQ(uint8 EXTI_IRQ){
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	NVIC_IRQ_ENABLE(EXTI_IRQ);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b1f      	cmp	r3, #31
 800053a:	d80a      	bhi.n	8000552 <NVIC_EnableIRQ+0x26>
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <NVIC_EnableIRQ+0x64>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	79fa      	ldrb	r2, [r7, #7]
 8000542:	2101      	movs	r1, #1
 8000544:	fa01 f202 	lsl.w	r2, r1, r2
 8000548:	4611      	mov	r1, r2
 800054a:	4a11      	ldr	r2, [pc, #68]	; (8000590 <NVIC_EnableIRQ+0x64>)
 800054c:	430b      	orrs	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
}
 8000550:	e019      	b.n	8000586 <NVIC_EnableIRQ+0x5a>
	NVIC_IRQ_ENABLE(EXTI_IRQ);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b3f      	cmp	r3, #63	; 0x3f
 8000556:	d80b      	bhi.n	8000570 <NVIC_EnableIRQ+0x44>
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <NVIC_EnableIRQ+0x68>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	79fa      	ldrb	r2, [r7, #7]
 800055e:	3a20      	subs	r2, #32
 8000560:	2101      	movs	r1, #1
 8000562:	fa01 f202 	lsl.w	r2, r1, r2
 8000566:	4611      	mov	r1, r2
 8000568:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <NVIC_EnableIRQ+0x68>)
 800056a:	430b      	orrs	r3, r1
 800056c:	6013      	str	r3, [r2, #0]
}
 800056e:	e00a      	b.n	8000586 <NVIC_EnableIRQ+0x5a>
	NVIC_IRQ_ENABLE(EXTI_IRQ);
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <NVIC_EnableIRQ+0x6c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	79fa      	ldrb	r2, [r7, #7]
 8000576:	3a40      	subs	r2, #64	; 0x40
 8000578:	2101      	movs	r1, #1
 800057a:	fa01 f202 	lsl.w	r2, r1, r2
 800057e:	4611      	mov	r1, r2
 8000580:	4a05      	ldr	r2, [pc, #20]	; (8000598 <NVIC_EnableIRQ+0x6c>)
 8000582:	430b      	orrs	r3, r1
 8000584:	6013      	str	r3, [r2, #0]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	e000e100 	.word	0xe000e100
 8000594:	e000e104 	.word	0xe000e104
 8000598:	e000e108 	.word	0xe000e108

0800059c <EXTI_Init>:
 * @Retval   None
 *
 * @Note     Ensure that the pin configuration is valid and that the corresponding
 *           GPIO pin and clock are properly initialized before calling this function.
 */
void EXTI_Init(EXTI_PinConfig_t *PinConfig){
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	// Enable clock for SYSCFG
	AFIO_CLK_EN();  // AFIO cock enabled
 80005a4:	4b5f      	ldr	r3, [pc, #380]	; (8000724 <EXTI_Init+0x188>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a5e      	ldr	r2, [pc, #376]	; (8000724 <EXTI_Init+0x188>)
 80005aa:	f043 0301 	orr.w	r3, r3, #1
 80005ae:	6193      	str	r3, [r2, #24]

	// Configure GPIO as input with Input floating
	MCAL_GPIO_Init(PinConfig->port, &(PinConfig->pin));
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	3304      	adds	r3, #4
 80005b8:	4619      	mov	r1, r3
 80005ba:	4610      	mov	r0, r2
 80005bc:	f000 fa2c 	bl	8000a18 <MCAL_GPIO_Init>

	// Configure EXTI line, Enable Interrupt Mask, Disable Event Mask
	SET_BIT(EXTI->IMR, PinConfig->pin.PinNum);
 80005c0:	4b59      	ldr	r3, [pc, #356]	; (8000728 <EXTI_Init+0x18c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	7912      	ldrb	r2, [r2, #4]
 80005c8:	4611      	mov	r1, r2
 80005ca:	2201      	movs	r2, #1
 80005cc:	408a      	lsls	r2, r1
 80005ce:	4611      	mov	r1, r2
 80005d0:	4a55      	ldr	r2, [pc, #340]	; (8000728 <EXTI_Init+0x18c>)
 80005d2:	430b      	orrs	r3, r1
 80005d4:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(EXTI->EMR, PinConfig->pin.PinNum);
 80005d6:	4b54      	ldr	r3, [pc, #336]	; (8000728 <EXTI_Init+0x18c>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	7912      	ldrb	r2, [r2, #4]
 80005de:	4611      	mov	r1, r2
 80005e0:	2201      	movs	r2, #1
 80005e2:	408a      	lsls	r2, r1
 80005e4:	43d2      	mvns	r2, r2
 80005e6:	4611      	mov	r1, r2
 80005e8:	4a4f      	ldr	r2, [pc, #316]	; (8000728 <EXTI_Init+0x18c>)
 80005ea:	400b      	ands	r3, r1
 80005ec:	6053      	str	r3, [r2, #4]

	// Configure Interrupt Trigger Edge (Falling, Rising, ...)
	switch(PinConfig->trigger){
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	7a1b      	ldrb	r3, [r3, #8]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d01b      	beq.n	800062e <EXTI_Init+0x92>
 80005f6:	2b02      	cmp	r3, #2
 80005f8:	d031      	beq.n	800065e <EXTI_Init+0xc2>
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d146      	bne.n	800068c <EXTI_Init+0xf0>
		case EXTI_FALLING_EDGE :
			SET_BIT(EXTI->FTSR, PinConfig->pin.PinNum);
 80005fe:	4b4a      	ldr	r3, [pc, #296]	; (8000728 <EXTI_Init+0x18c>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	7912      	ldrb	r2, [r2, #4]
 8000606:	4611      	mov	r1, r2
 8000608:	2201      	movs	r2, #1
 800060a:	408a      	lsls	r2, r1
 800060c:	4611      	mov	r1, r2
 800060e:	4a46      	ldr	r2, [pc, #280]	; (8000728 <EXTI_Init+0x18c>)
 8000610:	430b      	orrs	r3, r1
 8000612:	60d3      	str	r3, [r2, #12]
			CLEAR_BIT(EXTI->RTSR, PinConfig->pin.PinNum);
 8000614:	4b44      	ldr	r3, [pc, #272]	; (8000728 <EXTI_Init+0x18c>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	7912      	ldrb	r2, [r2, #4]
 800061c:	4611      	mov	r1, r2
 800061e:	2201      	movs	r2, #1
 8000620:	408a      	lsls	r2, r1
 8000622:	43d2      	mvns	r2, r2
 8000624:	4611      	mov	r1, r2
 8000626:	4a40      	ldr	r2, [pc, #256]	; (8000728 <EXTI_Init+0x18c>)
 8000628:	400b      	ands	r3, r1
 800062a:	6093      	str	r3, [r2, #8]
			break;
 800062c:	e02e      	b.n	800068c <EXTI_Init+0xf0>

		case EXTI_RISING_EDGE :
			CLEAR_BIT(EXTI->FTSR, PinConfig->pin.PinNum);
 800062e:	4b3e      	ldr	r3, [pc, #248]	; (8000728 <EXTI_Init+0x18c>)
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	7912      	ldrb	r2, [r2, #4]
 8000636:	4611      	mov	r1, r2
 8000638:	2201      	movs	r2, #1
 800063a:	408a      	lsls	r2, r1
 800063c:	43d2      	mvns	r2, r2
 800063e:	4611      	mov	r1, r2
 8000640:	4a39      	ldr	r2, [pc, #228]	; (8000728 <EXTI_Init+0x18c>)
 8000642:	400b      	ands	r3, r1
 8000644:	60d3      	str	r3, [r2, #12]
			SET_BIT(EXTI->RTSR, PinConfig->pin.PinNum);
 8000646:	4b38      	ldr	r3, [pc, #224]	; (8000728 <EXTI_Init+0x18c>)
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	7912      	ldrb	r2, [r2, #4]
 800064e:	4611      	mov	r1, r2
 8000650:	2201      	movs	r2, #1
 8000652:	408a      	lsls	r2, r1
 8000654:	4611      	mov	r1, r2
 8000656:	4a34      	ldr	r2, [pc, #208]	; (8000728 <EXTI_Init+0x18c>)
 8000658:	430b      	orrs	r3, r1
 800065a:	6093      	str	r3, [r2, #8]
			break;
 800065c:	e016      	b.n	800068c <EXTI_Init+0xf0>

		case EXTI_BOTH_EDGES :
			SET_BIT(EXTI->FTSR, PinConfig->pin.PinNum);
 800065e:	4b32      	ldr	r3, [pc, #200]	; (8000728 <EXTI_Init+0x18c>)
 8000660:	68db      	ldr	r3, [r3, #12]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	7912      	ldrb	r2, [r2, #4]
 8000666:	4611      	mov	r1, r2
 8000668:	2201      	movs	r2, #1
 800066a:	408a      	lsls	r2, r1
 800066c:	4611      	mov	r1, r2
 800066e:	4a2e      	ldr	r2, [pc, #184]	; (8000728 <EXTI_Init+0x18c>)
 8000670:	430b      	orrs	r3, r1
 8000672:	60d3      	str	r3, [r2, #12]
			SET_BIT(EXTI->RTSR, PinConfig->pin.PinNum);
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <EXTI_Init+0x18c>)
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	7912      	ldrb	r2, [r2, #4]
 800067c:	4611      	mov	r1, r2
 800067e:	2201      	movs	r2, #1
 8000680:	408a      	lsls	r2, r1
 8000682:	4611      	mov	r1, r2
 8000684:	4a28      	ldr	r2, [pc, #160]	; (8000728 <EXTI_Init+0x18c>)
 8000686:	430b      	orrs	r3, r1
 8000688:	6093      	str	r3, [r2, #8]
			break;
 800068a:	bf00      	nop
	}

	// Configure SYSCFG
	EXTI_SYSCFG(PinConfig->port, PinConfig->pin.PinNum);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	791b      	ldrb	r3, [r3, #4]
 8000694:	4619      	mov	r1, r3
 8000696:	4610      	mov	r0, r2
 8000698:	f7ff feec 	bl	8000474 <EXTI_SYSCFG>

	// Enable NVIC for the corresponding EXTI line
	if((PinConfig->pin.PinNum >= 0) & (PinConfig->pin.PinNum <= 4)){
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	791b      	ldrb	r3, [r3, #4]
 80006a0:	2b04      	cmp	r3, #4
 80006a2:	d807      	bhi.n	80006b4 <EXTI_Init+0x118>
		NVIC_EnableIRQ(EXTI0_IRQ + PinConfig->pin.PinNum);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	3306      	adds	r3, #6
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff3d 	bl	800052c <NVIC_EnableIRQ>
 80006b2:	e02a      	b.n	800070a <EXTI_Init+0x16e>
	}
	else if((PinConfig->pin.PinNum >= 5) & (PinConfig->pin.PinNum <= 9)){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	2b04      	cmp	r3, #4
 80006ba:	bf8c      	ite	hi
 80006bc:	2301      	movhi	r3, #1
 80006be:	2300      	movls	r3, #0
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	791b      	ldrb	r3, [r3, #4]
 80006c6:	2b09      	cmp	r3, #9
 80006c8:	bf94      	ite	ls
 80006ca:	2301      	movls	r3, #1
 80006cc:	2300      	movhi	r3, #0
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4013      	ands	r3, r2
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d003      	beq.n	80006e0 <EXTI_Init+0x144>
		NVIC_EnableIRQ(EXTI9_5_IRQ);
 80006d8:	2017      	movs	r0, #23
 80006da:	f7ff ff27 	bl	800052c <NVIC_EnableIRQ>
 80006de:	e014      	b.n	800070a <EXTI_Init+0x16e>
	}
	else if((PinConfig->pin.PinNum >= 10) & (PinConfig->pin.PinNum <= 15)){
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	2b09      	cmp	r3, #9
 80006e6:	bf8c      	ite	hi
 80006e8:	2301      	movhi	r3, #1
 80006ea:	2300      	movls	r3, #0
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	bf94      	ite	ls
 80006f6:	2301      	movls	r3, #1
 80006f8:	2300      	movhi	r3, #0
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	4013      	ands	r3, r2
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b00      	cmp	r3, #0
 8000702:	d00b      	beq.n	800071c <EXTI_Init+0x180>
		NVIC_EnableIRQ(EXTI15_10_IRQ);
 8000704:	2028      	movs	r0, #40	; 0x28
 8000706:	f7ff ff11 	bl	800052c <NVIC_EnableIRQ>
	else{
		return;
	}

	// Store the callback
	EXTI_SetCallback(PinConfig->pin.PinNum, PinConfig->CallBackFun);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	791a      	ldrb	r2, [r3, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	4619      	mov	r1, r3
 8000714:	4610      	mov	r0, r2
 8000716:	f000 f809 	bl	800072c <EXTI_SetCallback>
 800071a:	e000      	b.n	800071e <EXTI_Init+0x182>
		return;
 800071c:	bf00      	nop
}
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40021000 	.word	0x40021000
 8000728:	40010400 	.word	0x40010400

0800072c <EXTI_SetCallback>:
 * @Retval   None
 *
 * @Note     Ensure the callback function is non-blocking and efficient. This function
 *           should be called after initializing the EXTI line.
 */
void EXTI_SetCallback(GPIO_PinNum_t PinNum, void (*CallBackFun)(void)){
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
	EXTI_CallBacks[PinNum] = CallBackFun;
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	4904      	ldr	r1, [pc, #16]	; (800074c <EXTI_SetCallback+0x20>)
 800073c:	683a      	ldr	r2, [r7, #0]
 800073e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	2000005c 	.word	0x2000005c

08000750 <EXTI0_IRQHandler>:

/* ================================================================ */
/* ========================= ISR Functions ======================== */
/* ================================================================ */

void EXTI0_IRQHandler(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	// This bit is cleared by writing a ‘1’ into the bit
	SET_BIT(EXTI->PR, 0);
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <EXTI0_IRQHandler+0x24>)
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	4a06      	ldr	r2, [pc, #24]	; (8000774 <EXTI0_IRQHandler+0x24>)
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	6153      	str	r3, [r2, #20]
	// Call IRQ Call Back Function
	if (EXTI_CallBacks[0] != NULL) {
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <EXTI0_IRQHandler+0x28>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d002      	beq.n	800076e <EXTI0_IRQHandler+0x1e>
		EXTI_CallBacks[0]();
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <EXTI0_IRQHandler+0x28>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4798      	blx	r3
	}
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40010400 	.word	0x40010400
 8000778:	2000005c 	.word	0x2000005c

0800077c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	// This bit is cleared by writing a ‘1’ into the bit
	SET_BIT(EXTI->PR, 1);
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <EXTI1_IRQHandler+0x24>)
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <EXTI1_IRQHandler+0x24>)
 8000786:	f043 0302 	orr.w	r3, r3, #2
 800078a:	6153      	str	r3, [r2, #20]
	// Call IRQ Call Back Function
	if (EXTI_CallBacks[1] != NULL) {
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <EXTI1_IRQHandler+0x28>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <EXTI1_IRQHandler+0x1e>
		EXTI_CallBacks[1]();
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <EXTI1_IRQHandler+0x28>)
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	4798      	blx	r3
	}
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40010400 	.word	0x40010400
 80007a4:	2000005c 	.word	0x2000005c

080007a8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	// This bit is cleared by writing a ‘1’ into the bit
	SET_BIT(EXTI->PR, 2);
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <EXTI2_IRQHandler+0x24>)
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	4a06      	ldr	r2, [pc, #24]	; (80007cc <EXTI2_IRQHandler+0x24>)
 80007b2:	f043 0304 	orr.w	r3, r3, #4
 80007b6:	6153      	str	r3, [r2, #20]
	// Call IRQ Call Back Function
	if (EXTI_CallBacks[2] != NULL) {
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <EXTI2_IRQHandler+0x28>)
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d002      	beq.n	80007c6 <EXTI2_IRQHandler+0x1e>
		EXTI_CallBacks[2]();
 80007c0:	4b03      	ldr	r3, [pc, #12]	; (80007d0 <EXTI2_IRQHandler+0x28>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	4798      	blx	r3
	}
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40010400 	.word	0x40010400
 80007d0:	2000005c 	.word	0x2000005c

080007d4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	// This bit is cleared by writing a ‘1’ into the bit
	SET_BIT(EXTI->PR, 3);
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <EXTI3_IRQHandler+0x24>)
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <EXTI3_IRQHandler+0x24>)
 80007de:	f043 0308 	orr.w	r3, r3, #8
 80007e2:	6153      	str	r3, [r2, #20]
	// Call IRQ Call Back Function
	if (EXTI_CallBacks[3] != NULL) {
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <EXTI3_IRQHandler+0x28>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <EXTI3_IRQHandler+0x1e>
		EXTI_CallBacks[3]();
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <EXTI3_IRQHandler+0x28>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	4798      	blx	r3
	}
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40010400 	.word	0x40010400
 80007fc:	2000005c 	.word	0x2000005c

08000800 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	// This bit is cleared by writing a ‘1’ into the bit
	SET_BIT(EXTI->PR, 4);
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <EXTI4_IRQHandler+0x24>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <EXTI4_IRQHandler+0x24>)
 800080a:	f043 0310 	orr.w	r3, r3, #16
 800080e:	6153      	str	r3, [r2, #20]
	// Call IRQ Call Back Function
	if (EXTI_CallBacks[4] != NULL) {
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <EXTI4_IRQHandler+0x28>)
 8000812:	691b      	ldr	r3, [r3, #16]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d002      	beq.n	800081e <EXTI4_IRQHandler+0x1e>
		EXTI_CallBacks[4]();
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <EXTI4_IRQHandler+0x28>)
 800081a:	691b      	ldr	r3, [r3, #16]
 800081c:	4798      	blx	r3
	}
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40010400 	.word	0x40010400
 8000828:	2000005c 	.word	0x2000005c

0800082c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 5)){
 8000830:	4b34      	ldr	r3, [pc, #208]	; (8000904 <EXTI9_5_IRQHandler+0xd8>)
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	095b      	lsrs	r3, r3, #5
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	2b01      	cmp	r3, #1
 800083c:	d10d      	bne.n	800085a <EXTI9_5_IRQHandler+0x2e>
		// This bit is cleared by writing a ‘1’ into the bit
		SET_BIT(EXTI->PR, 5);
 800083e:	4b31      	ldr	r3, [pc, #196]	; (8000904 <EXTI9_5_IRQHandler+0xd8>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	4a30      	ldr	r2, [pc, #192]	; (8000904 <EXTI9_5_IRQHandler+0xd8>)
 8000844:	f043 0320 	orr.w	r3, r3, #32
 8000848:	6153      	str	r3, [r2, #20]
		// Call IRQ Call Back Function
		if (EXTI_CallBacks[5] != NULL) {
 800084a:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <EXTI9_5_IRQHandler+0xdc>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d056      	beq.n	8000900 <EXTI9_5_IRQHandler+0xd4>
			EXTI_CallBacks[5]();
 8000852:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <EXTI9_5_IRQHandler+0xdc>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	4798      	blx	r3
		// Call IRQ Call Back Function
		if (EXTI_CallBacks[9] != NULL) {
			EXTI_CallBacks[9]();
		}
	}
}
 8000858:	e052      	b.n	8000900 <EXTI9_5_IRQHandler+0xd4>
	else if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 6)){
 800085a:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <EXTI9_5_IRQHandler+0xd8>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	099b      	lsrs	r3, r3, #6
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	2b01      	cmp	r3, #1
 8000866:	d10d      	bne.n	8000884 <EXTI9_5_IRQHandler+0x58>
		SET_BIT(EXTI->PR, 6);
 8000868:	4b26      	ldr	r3, [pc, #152]	; (8000904 <EXTI9_5_IRQHandler+0xd8>)
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	4a25      	ldr	r2, [pc, #148]	; (8000904 <EXTI9_5_IRQHandler+0xd8>)
 800086e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000872:	6153      	str	r3, [r2, #20]
		if (EXTI_CallBacks[6] != NULL) {
 8000874:	4b24      	ldr	r3, [pc, #144]	; (8000908 <EXTI9_5_IRQHandler+0xdc>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d041      	beq.n	8000900 <EXTI9_5_IRQHandler+0xd4>
			EXTI_CallBacks[6]();
 800087c:	4b22      	ldr	r3, [pc, #136]	; (8000908 <EXTI9_5_IRQHandler+0xdc>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4798      	blx	r3
}
 8000882:	e03d      	b.n	8000900 <EXTI9_5_IRQHandler+0xd4>
	else if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 7)){
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <EXTI9_5_IRQHandler+0xd8>)
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	09db      	lsrs	r3, r3, #7
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	2b01      	cmp	r3, #1
 8000890:	d10d      	bne.n	80008ae <EXTI9_5_IRQHandler+0x82>
		SET_BIT(EXTI->PR, 7);
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <EXTI9_5_IRQHandler+0xd8>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <EXTI9_5_IRQHandler+0xd8>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089c:	6153      	str	r3, [r2, #20]
		if (EXTI_CallBacks[7] != NULL) {
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <EXTI9_5_IRQHandler+0xdc>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d02c      	beq.n	8000900 <EXTI9_5_IRQHandler+0xd4>
			EXTI_CallBacks[7]();
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <EXTI9_5_IRQHandler+0xdc>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	4798      	blx	r3
}
 80008ac:	e028      	b.n	8000900 <EXTI9_5_IRQHandler+0xd4>
	else if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 8)){
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <EXTI9_5_IRQHandler+0xd8>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d10d      	bne.n	80008d8 <EXTI9_5_IRQHandler+0xac>
		SET_BIT(EXTI->PR, 8);
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <EXTI9_5_IRQHandler+0xd8>)
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	4a10      	ldr	r2, [pc, #64]	; (8000904 <EXTI9_5_IRQHandler+0xd8>)
 80008c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c6:	6153      	str	r3, [r2, #20]
		if (EXTI_CallBacks[8] != NULL) {
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <EXTI9_5_IRQHandler+0xdc>)
 80008ca:	6a1b      	ldr	r3, [r3, #32]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d017      	beq.n	8000900 <EXTI9_5_IRQHandler+0xd4>
			EXTI_CallBacks[8]();
 80008d0:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <EXTI9_5_IRQHandler+0xdc>)
 80008d2:	6a1b      	ldr	r3, [r3, #32]
 80008d4:	4798      	blx	r3
}
 80008d6:	e013      	b.n	8000900 <EXTI9_5_IRQHandler+0xd4>
	else if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 9)){
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <EXTI9_5_IRQHandler+0xd8>)
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	0a5b      	lsrs	r3, r3, #9
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d10c      	bne.n	8000900 <EXTI9_5_IRQHandler+0xd4>
		SET_BIT(EXTI->PR, 9);
 80008e6:	4b07      	ldr	r3, [pc, #28]	; (8000904 <EXTI9_5_IRQHandler+0xd8>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	4a06      	ldr	r2, [pc, #24]	; (8000904 <EXTI9_5_IRQHandler+0xd8>)
 80008ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008f0:	6153      	str	r3, [r2, #20]
		if (EXTI_CallBacks[9] != NULL) {
 80008f2:	4b05      	ldr	r3, [pc, #20]	; (8000908 <EXTI9_5_IRQHandler+0xdc>)
 80008f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d002      	beq.n	8000900 <EXTI9_5_IRQHandler+0xd4>
			EXTI_CallBacks[9]();
 80008fa:	4b03      	ldr	r3, [pc, #12]	; (8000908 <EXTI9_5_IRQHandler+0xdc>)
 80008fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008fe:	4798      	blx	r3
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40010400 	.word	0x40010400
 8000908:	2000005c 	.word	0x2000005c

0800090c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 10)){
 8000910:	4b3f      	ldr	r3, [pc, #252]	; (8000a10 <EXTI15_10_IRQHandler+0x104>)
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	0a9b      	lsrs	r3, r3, #10
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	2b01      	cmp	r3, #1
 800091c:	d10d      	bne.n	800093a <EXTI15_10_IRQHandler+0x2e>
		// This bit is cleared by writing a ‘1’ into the bit
		SET_BIT(EXTI->PR, 10);
 800091e:	4b3c      	ldr	r3, [pc, #240]	; (8000a10 <EXTI15_10_IRQHandler+0x104>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	4a3b      	ldr	r2, [pc, #236]	; (8000a10 <EXTI15_10_IRQHandler+0x104>)
 8000924:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000928:	6153      	str	r3, [r2, #20]
		// Call IRQ Call Back Function
		if (EXTI_CallBacks[10] != NULL) {
 800092a:	4b3a      	ldr	r3, [pc, #232]	; (8000a14 <EXTI15_10_IRQHandler+0x108>)
 800092c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092e:	2b00      	cmp	r3, #0
 8000930:	d06b      	beq.n	8000a0a <EXTI15_10_IRQHandler+0xfe>
			EXTI_CallBacks[10]();
 8000932:	4b38      	ldr	r3, [pc, #224]	; (8000a14 <EXTI15_10_IRQHandler+0x108>)
 8000934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000936:	4798      	blx	r3
		// Call IRQ Call Back Function
		if (EXTI_CallBacks[15] != NULL) {
			EXTI_CallBacks[15]();
		}
	}
}
 8000938:	e067      	b.n	8000a0a <EXTI15_10_IRQHandler+0xfe>
	else if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 11)){
 800093a:	4b35      	ldr	r3, [pc, #212]	; (8000a10 <EXTI15_10_IRQHandler+0x104>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	0adb      	lsrs	r3, r3, #11
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	2b01      	cmp	r3, #1
 8000946:	d10d      	bne.n	8000964 <EXTI15_10_IRQHandler+0x58>
		SET_BIT(EXTI->PR, 11);
 8000948:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <EXTI15_10_IRQHandler+0x104>)
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	4a30      	ldr	r2, [pc, #192]	; (8000a10 <EXTI15_10_IRQHandler+0x104>)
 800094e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000952:	6153      	str	r3, [r2, #20]
		if (EXTI_CallBacks[11] != NULL) {
 8000954:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <EXTI15_10_IRQHandler+0x108>)
 8000956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000958:	2b00      	cmp	r3, #0
 800095a:	d056      	beq.n	8000a0a <EXTI15_10_IRQHandler+0xfe>
			EXTI_CallBacks[11]();
 800095c:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <EXTI15_10_IRQHandler+0x108>)
 800095e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000960:	4798      	blx	r3
}
 8000962:	e052      	b.n	8000a0a <EXTI15_10_IRQHandler+0xfe>
	else if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 12)){
 8000964:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <EXTI15_10_IRQHandler+0x104>)
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	0b1b      	lsrs	r3, r3, #12
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	2b01      	cmp	r3, #1
 8000970:	d10d      	bne.n	800098e <EXTI15_10_IRQHandler+0x82>
		SET_BIT(EXTI->PR, 12);
 8000972:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <EXTI15_10_IRQHandler+0x104>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	4a26      	ldr	r2, [pc, #152]	; (8000a10 <EXTI15_10_IRQHandler+0x104>)
 8000978:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800097c:	6153      	str	r3, [r2, #20]
		if (EXTI_CallBacks[12] != NULL) {
 800097e:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <EXTI15_10_IRQHandler+0x108>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	2b00      	cmp	r3, #0
 8000984:	d041      	beq.n	8000a0a <EXTI15_10_IRQHandler+0xfe>
			EXTI_CallBacks[12]();
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <EXTI15_10_IRQHandler+0x108>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4798      	blx	r3
}
 800098c:	e03d      	b.n	8000a0a <EXTI15_10_IRQHandler+0xfe>
	else if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 13)){
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <EXTI15_10_IRQHandler+0x104>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	0b5b      	lsrs	r3, r3, #13
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	2b01      	cmp	r3, #1
 800099a:	d10d      	bne.n	80009b8 <EXTI15_10_IRQHandler+0xac>
		SET_BIT(EXTI->PR, 13);
 800099c:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <EXTI15_10_IRQHandler+0x104>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	4a1b      	ldr	r2, [pc, #108]	; (8000a10 <EXTI15_10_IRQHandler+0x104>)
 80009a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009a6:	6153      	str	r3, [r2, #20]
		if (EXTI_CallBacks[13] != NULL) {
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <EXTI15_10_IRQHandler+0x108>)
 80009aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d02c      	beq.n	8000a0a <EXTI15_10_IRQHandler+0xfe>
			EXTI_CallBacks[13]();
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <EXTI15_10_IRQHandler+0x108>)
 80009b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009b4:	4798      	blx	r3
}
 80009b6:	e028      	b.n	8000a0a <EXTI15_10_IRQHandler+0xfe>
	else if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 14)){
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <EXTI15_10_IRQHandler+0x104>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	0b9b      	lsrs	r3, r3, #14
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d10d      	bne.n	80009e2 <EXTI15_10_IRQHandler+0xd6>
		SET_BIT(EXTI->PR, 14);
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <EXTI15_10_IRQHandler+0x104>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <EXTI15_10_IRQHandler+0x104>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6153      	str	r3, [r2, #20]
		if (EXTI_CallBacks[14] != NULL) {
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <EXTI15_10_IRQHandler+0x108>)
 80009d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d017      	beq.n	8000a0a <EXTI15_10_IRQHandler+0xfe>
			EXTI_CallBacks[14]();
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <EXTI15_10_IRQHandler+0x108>)
 80009dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009de:	4798      	blx	r3
}
 80009e0:	e013      	b.n	8000a0a <EXTI15_10_IRQHandler+0xfe>
	else if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 15)){
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <EXTI15_10_IRQHandler+0x104>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	0bdb      	lsrs	r3, r3, #15
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d10c      	bne.n	8000a0a <EXTI15_10_IRQHandler+0xfe>
		SET_BIT(EXTI->PR, 15);
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <EXTI15_10_IRQHandler+0x104>)
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <EXTI15_10_IRQHandler+0x104>)
 80009f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009fa:	6153      	str	r3, [r2, #20]
		if (EXTI_CallBacks[15] != NULL) {
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <EXTI15_10_IRQHandler+0x108>)
 80009fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d002      	beq.n	8000a0a <EXTI15_10_IRQHandler+0xfe>
			EXTI_CallBacks[15]();
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <EXTI15_10_IRQHandler+0x108>)
 8000a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a08:	4798      	blx	r3
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40010400 	.word	0x40010400
 8000a14:	2000005c 	.word	0x2000005c

08000a18 <MCAL_GPIO_Init>:
 *
 * @Retval    None
 *
 * @Note      This function must be called before performing any operation on the pin.
 */
void MCAL_GPIO_Init(GPIO_t *GPIOx, GPIO_PinConfig_t *PinConfig){
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
	volatile uint32 *configRegister = NULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
	uint8 shift = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	72fb      	strb	r3, [r7, #11]
	uint8 pin = PinConfig->PinNum ;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	72bb      	strb	r3, [r7, #10]

	if(pin >= 0 && pin <= 7){
 8000a30:	7abb      	ldrb	r3, [r7, #10]
 8000a32:	2b07      	cmp	r3, #7
 8000a34:	d805      	bhi.n	8000a42 <MCAL_GPIO_Init+0x2a>
		// Port configuration register low (GPIOx_CRL) 0>>7
		configRegister = &(GPIOx->CRL);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	60fb      	str	r3, [r7, #12]
		shift = (pin * 4);
 8000a3a:	7abb      	ldrb	r3, [r7, #10]
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	72fb      	strb	r3, [r7, #11]
 8000a40:	e00d      	b.n	8000a5e <MCAL_GPIO_Init+0x46>
	}
	else if(pin >= 8 && pin <= 15){
 8000a42:	7abb      	ldrb	r3, [r7, #10]
 8000a44:	2b07      	cmp	r3, #7
 8000a46:	d94c      	bls.n	8000ae2 <MCAL_GPIO_Init+0xca>
 8000a48:	7abb      	ldrb	r3, [r7, #10]
 8000a4a:	2b0f      	cmp	r3, #15
 8000a4c:	d849      	bhi.n	8000ae2 <MCAL_GPIO_Init+0xca>
		// Port configuration register high (GPIOx_CRH) 8>>15
		configRegister = &(GPIOx->CRH);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3304      	adds	r3, #4
 8000a52:	60fb      	str	r3, [r7, #12]
		shift = ((pin - 8) * 4);
 8000a54:	7abb      	ldrb	r3, [r7, #10]
 8000a56:	3338      	adds	r3, #56	; 0x38
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	72fb      	strb	r3, [r7, #11]
	else{
		return;
	}

	// Clear the current configuration for the pin
	*configRegister &= ~(0xF << shift);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	7afa      	ldrb	r2, [r7, #11]
 8000a64:	210f      	movs	r1, #15
 8000a66:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6a:	43d2      	mvns	r2, r2
 8000a6c:	401a      	ands	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	601a      	str	r2, [r3, #0]

	if(PinConfig->PinCNF == GPIO_CNF_PULL_UP_DOWN_INPUT){
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	78db      	ldrb	r3, [r3, #3]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d119      	bne.n	8000aae <MCAL_GPIO_Init+0x96>
		// Configure Pin State : High OR Low
		if(PinConfig->PinState == GPIO_HIGH){
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	789b      	ldrb	r3, [r3, #2]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d10a      	bne.n	8000a98 <MCAL_GPIO_Init+0x80>
			SET_BIT(GPIOx->ODR, PinConfig->PinNum);		 // Enable pull-up
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	7812      	ldrb	r2, [r2, #0]
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	408a      	lsls	r2, r1
 8000a90:	431a      	orrs	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	e00a      	b.n	8000aae <MCAL_GPIO_Init+0x96>
		}
		else{
			CLEAR_BIT(GPIOx->ODR, PinConfig->PinNum);	// Enable pull-down
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	7812      	ldrb	r2, [r2, #0]
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	408a      	lsls	r2, r1
 8000aa6:	43d2      	mvns	r2, r2
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	60da      	str	r2, [r3, #12]
		}
	}

	// Set the mode and configuration
	*configRegister |= ((PinConfig->PinMode & 0x03) << shift);		 // MODE[1:0]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	7852      	ldrb	r2, [r2, #1]
 8000ab6:	f002 0103 	and.w	r1, r2, #3
 8000aba:	7afa      	ldrb	r2, [r7, #11]
 8000abc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	601a      	str	r2, [r3, #0]
	*configRegister |= ((PinConfig->PinCNF & 0x03) << (shift+2));	 // CNF[1:0]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	683a      	ldr	r2, [r7, #0]
 8000acc:	78d2      	ldrb	r2, [r2, #3]
 8000ace:	f002 0103 	and.w	r1, r2, #3
 8000ad2:	7afa      	ldrb	r2, [r7, #11]
 8000ad4:	3202      	adds	r2, #2
 8000ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ada:	431a      	orrs	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	e000      	b.n	8000ae4 <MCAL_GPIO_Init+0xcc>
		return;
 8000ae2:	bf00      	nop


}
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <MCAL_GPIO_WritePin>:
 *
 * @Retval    None
 *
 * @Note      Ensure the pin is configured as an output before calling this function.
 */
void MCAL_GPIO_WritePin(GPIO_t *GPIOx, GPIO_PinNum_t PinNumber, GPIO_PinState_t value){
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	70fb      	strb	r3, [r7, #3]
 8000af8:	4613      	mov	r3, r2
 8000afa:	70bb      	strb	r3, [r7, #2]
	if(value == GPIO_HIGH){
 8000afc:	78bb      	ldrb	r3, [r7, #2]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d109      	bne.n	8000b16 <MCAL_GPIO_WritePin+0x2a>
		SET_BIT(GPIOx->ODR, PinNumber);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	78fa      	ldrb	r2, [r7, #3]
 8000b08:	2101      	movs	r1, #1
 8000b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	e00e      	b.n	8000b34 <MCAL_GPIO_WritePin+0x48>
	}
	else if(value == GPIO_LOW){
 8000b16:	78bb      	ldrb	r3, [r7, #2]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d10a      	bne.n	8000b32 <MCAL_GPIO_WritePin+0x46>
		CLEAR_BIT(GPIOx->ODR, PinNumber);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	78fa      	ldrb	r2, [r7, #3]
 8000b22:	2101      	movs	r1, #1
 8000b24:	fa01 f202 	lsl.w	r2, r1, r2
 8000b28:	43d2      	mvns	r2, r2
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	e000      	b.n	8000b34 <MCAL_GPIO_WritePin+0x48>
	}
	else{
		return;
 8000b32:	bf00      	nop
	}
}
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <main>:
		EXTI_RISING_EDGE,
		MY_EXTI9_ISR
};

int main(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	// Initializing the clock
	clock_Init();
 8000b40:	f000 f80c 	bl	8000b5c <clock_Init>
	// Initializing LCD
	lcd_initialize(&lcd1);
 8000b44:	4803      	ldr	r0, [pc, #12]	; (8000b54 <main+0x18>)
 8000b46:	f7ff fb33 	bl	80001b0 <lcd_initialize>
	// Initializing EXTI9 Pin
	EXTI_Init(&EXTI9_Pin);
 8000b4a:	4803      	ldr	r0, [pc, #12]	; (8000b58 <main+0x1c>)
 8000b4c:	f7ff fd26 	bl	800059c <EXTI_Init>

	while(1)
 8000b50:	e7fe      	b.n	8000b50 <main+0x14>
 8000b52:	bf00      	nop
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000030 	.word	0x20000030

08000b5c <clock_Init>:
	{

	}
}

void clock_Init(){
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
	GPIOA_CLK_EN(); // IO port A clock enabled
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <clock_Init+0x30>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <clock_Init+0x30>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	6193      	str	r3, [r2, #24]
	GPIOB_CLK_EN(); // IO port B clock enabled
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <clock_Init+0x30>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <clock_Init+0x30>)
 8000b72:	f043 0308 	orr.w	r3, r3, #8
 8000b76:	6193      	str	r3, [r2, #24]
	AFIO_CLK_EN();  // AFIO cock enabled
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <clock_Init+0x30>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a03      	ldr	r2, [pc, #12]	; (8000b8c <clock_Init+0x30>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	6193      	str	r3, [r2, #24]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	40021000 	.word	0x40021000

08000b90 <MY_EXTI9_ISR>:

void MY_EXTI9_ISR(void){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	lcd_send_string_pos(&lcd1, "IRQ9 EXTI is", 1, 1);
 8000b94:	2301      	movs	r3, #1
 8000b96:	2201      	movs	r2, #1
 8000b98:	4909      	ldr	r1, [pc, #36]	; (8000bc0 <MY_EXTI9_ISR+0x30>)
 8000b9a:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <MY_EXTI9_ISR+0x34>)
 8000b9c:	f7ff fc34 	bl	8000408 <lcd_send_string_pos>
	lcd_send_string_pos(&lcd1, "happened _|-", 2, 1);
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <MY_EXTI9_ISR+0x38>)
 8000ba6:	4807      	ldr	r0, [pc, #28]	; (8000bc4 <MY_EXTI9_ISR+0x34>)
 8000ba8:	f7ff fc2e 	bl	8000408 <lcd_send_string_pos>
	_delay_ms(1000);
 8000bac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bb0:	f7ff fc43 	bl	800043a <_delay_ms>
	lcd_send_command(&lcd1, _LCD_CLEAR);
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <MY_EXTI9_ISR+0x34>)
 8000bb8:	f7ff fb71 	bl	800029e <lcd_send_command>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	08000c80 	.word	0x08000c80
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	08000c90 	.word	0x08000c90

08000bcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bcc:	480d      	ldr	r0, [pc, #52]	; (8000c04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bd0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	; (8000c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <LoopForever+0xe>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	; (8000c18 <LoopForever+0x16>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bfa:	f000 f811 	bl	8000c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bfe:	f7ff ff9d 	bl	8000b3c <main>

08000c02 <LoopForever>:

LoopForever:
    b LoopForever
 8000c02:	e7fe      	b.n	8000c02 <LoopForever>
  ldr   r0, =_estack
 8000c04:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000c10:	08000ca8 	.word	0x08000ca8
  ldr r2, =_sbss
 8000c14:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000c18:	2000009c 	.word	0x2000009c

08000c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC1_2_IRQHandler>
	...

08000c20 <__libc_init_array>:
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	2500      	movs	r5, #0
 8000c24:	4e0c      	ldr	r6, [pc, #48]	; (8000c58 <__libc_init_array+0x38>)
 8000c26:	4c0d      	ldr	r4, [pc, #52]	; (8000c5c <__libc_init_array+0x3c>)
 8000c28:	1ba4      	subs	r4, r4, r6
 8000c2a:	10a4      	asrs	r4, r4, #2
 8000c2c:	42a5      	cmp	r5, r4
 8000c2e:	d109      	bne.n	8000c44 <__libc_init_array+0x24>
 8000c30:	f000 f81a 	bl	8000c68 <_init>
 8000c34:	2500      	movs	r5, #0
 8000c36:	4e0a      	ldr	r6, [pc, #40]	; (8000c60 <__libc_init_array+0x40>)
 8000c38:	4c0a      	ldr	r4, [pc, #40]	; (8000c64 <__libc_init_array+0x44>)
 8000c3a:	1ba4      	subs	r4, r4, r6
 8000c3c:	10a4      	asrs	r4, r4, #2
 8000c3e:	42a5      	cmp	r5, r4
 8000c40:	d105      	bne.n	8000c4e <__libc_init_array+0x2e>
 8000c42:	bd70      	pop	{r4, r5, r6, pc}
 8000c44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c48:	4798      	blx	r3
 8000c4a:	3501      	adds	r5, #1
 8000c4c:	e7ee      	b.n	8000c2c <__libc_init_array+0xc>
 8000c4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c52:	4798      	blx	r3
 8000c54:	3501      	adds	r5, #1
 8000c56:	e7f2      	b.n	8000c3e <__libc_init_array+0x1e>
 8000c58:	08000ca0 	.word	0x08000ca0
 8000c5c:	08000ca0 	.word	0x08000ca0
 8000c60:	08000ca0 	.word	0x08000ca0
 8000c64:	08000ca4 	.word	0x08000ca4

08000c68 <_init>:
 8000c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6a:	bf00      	nop
 8000c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c6e:	bc08      	pop	{r3}
 8000c70:	469e      	mov	lr, r3
 8000c72:	4770      	bx	lr

08000c74 <_fini>:
 8000c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c76:	bf00      	nop
 8000c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c7a:	bc08      	pop	{r3}
 8000c7c:	469e      	mov	lr, r3
 8000c7e:	4770      	bx	lr
