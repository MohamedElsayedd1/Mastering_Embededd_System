
TriggerExternalInterrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e6  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b4  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000317  00000000  00000000  00000f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001238  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035e  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  0000165e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_1>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_2>
   c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  64:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_Init>:

void GPIO_Init(){
	// Configure PD1, PD2 and PB2 as input pins, pull-down resistors are off
	/* The DDxn bit in the DDRx Register selects the direction of this pin. If DDxn is written logic one, Pxn is configured
			as an output pin. If DDxn is written logic zero, Pxn is configured as an input pin */
	DDRB &= ~(1 << 2);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8b 7f       	andi	r24, 0xFB	; 251
  70:	87 bb       	out	0x17, r24	; 23
	DDRD &= ~(1 << 1);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	8d 7f       	andi	r24, 0xFD	; 253
  76:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << 2);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	8b 7f       	andi	r24, 0xFB	; 251
  7c:	81 bb       	out	0x11, r24	; 17
	
	// Configure PD4, PD5 and PD6 as output pins, off
	DDRD |= (1 << 4);
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	80 61       	ori	r24, 0x10	; 16
  82:	81 bb       	out	0x11, r24	; 17
	DDRD |= (1 << 5);
  84:	81 b3       	in	r24, 0x11	; 17
  86:	80 62       	ori	r24, 0x20	; 32
  88:	81 bb       	out	0x11, r24	; 17
	DDRD |= (1 << 6);
  8a:	81 b3       	in	r24, 0x11	; 17
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~((1 << 4) | (1 << 5) | (1 << 6)); // Ensure all LEDs are off
  90:	82 b3       	in	r24, 0x12	; 18
  92:	8f 78       	andi	r24, 0x8F	; 143
  94:	82 bb       	out	0x12, r24	; 18
  96:	08 95       	ret

00000098 <EXTI_Init>:
}

void EXTI_Init(){
	// Enable Global Interrupt
	sei(); // Set the Global Interrupt Enable bit
  98:	78 94       	sei
	// Enable Global Interrupt Requests For INT0, INT1, INT2
	GICR |= (0b111 << 5);
  9a:	8b b7       	in	r24, 0x3b	; 59
  9c:	80 6e       	ori	r24, 0xE0	; 224
  9e:	8b bf       	out	0x3b, r24	; 59
	// Set Interrupt Sense Control  for INT0
	MCUCR |= (0b11 << 0); // The rising edge of INT0 generates an interrupt request
  a0:	85 b7       	in	r24, 0x35	; 53
  a2:	83 60       	ori	r24, 0x03	; 3
  a4:	85 bf       	out	0x35, r24	; 53
	// Set Interrupt Sense Control  for INT1
	MCUCR |= (0b01 << 2); // Any logical change on INT1 generates an interrupt request
  a6:	85 b7       	in	r24, 0x35	; 53
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	85 bf       	out	0x35, r24	; 53
	// Set Interrupt Sense Control  for INT2
	MCUCSR  &= ~(1 << 6); // If ISC2 is written to zero, a falling edge on INT2 activates the interrupt
  ac:	84 b7       	in	r24, 0x34	; 52
  ae:	8f 7b       	andi	r24, 0xBF	; 191
  b0:	84 bf       	out	0x34, r24	; 52
  b2:	08 95       	ret

000000b4 <main>:
}

int main(void)
{
	GPIO_Init();
  b4:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_Init>
	EXTI_Init();
  b8:	0e 94 4c 00 	call	0x98	; 0x98 <EXTI_Init>
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x8>

000000be <__vector_1>:
    while (1) 
    {
    }
}

ISR(INT0_vect){
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
	// INT0 Interrupt Flag is cleared automatically
	// Toggle PD4 bit
	PORTD |= (1 << 4);
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f e3       	ldi	r18, 0x3F	; 63
  d6:	8d e0       	ldi	r24, 0x0D	; 13
  d8:	93 e0       	ldi	r25, 0x03	; 3
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <__vector_1+0x1c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <__vector_1+0x26>
  e4:	00 00       	nop
	_delay_ms(1000);
	PORTD &= ~(1 << 4);
  e6:	82 b3       	in	r24, 0x12	; 18
  e8:	8f 7e       	andi	r24, 0xEF	; 239
  ea:	82 bb       	out	0x12, r24	; 18
}
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <__vector_2>:

ISR(INT1_vect){
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
	// INT1 Interrupt Flag is cleared automatically
	// Toggle PD5 bit
	PORTD |= (1 << 5);
 10c:	82 b3       	in	r24, 0x12	; 18
 10e:	80 62       	ori	r24, 0x20	; 32
 110:	82 bb       	out	0x12, r24	; 18
 112:	2f e3       	ldi	r18, 0x3F	; 63
 114:	8d e0       	ldi	r24, 0x0D	; 13
 116:	93 e0       	ldi	r25, 0x03	; 3
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <__vector_2+0x1c>
 120:	00 c0       	rjmp	.+0      	; 0x122 <__vector_2+0x26>
 122:	00 00       	nop
	_delay_ms(1000);
	PORTD &= ~(1 << 5);
 124:	82 b3       	in	r24, 0x12	; 18
 126:	8f 7d       	andi	r24, 0xDF	; 223
 128:	82 bb       	out	0x12, r24	; 18
}
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <__vector_3>:

ISR(INT2_vect){
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	2f 93       	push	r18
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
	// INT2 Interrupt Flag is cleared automatically
	// Toggle PD6 bit
	PORTD |= (1 << 6);
 14a:	82 b3       	in	r24, 0x12	; 18
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	82 bb       	out	0x12, r24	; 18
 150:	2f e3       	ldi	r18, 0x3F	; 63
 152:	8d e0       	ldi	r24, 0x0D	; 13
 154:	93 e0       	ldi	r25, 0x03	; 3
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <__vector_3+0x1c>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <__vector_3+0x26>
 160:	00 00       	nop
	_delay_ms(1000);
	PORTD &= ~(1 << 6);
 162:	82 b3       	in	r24, 0x12	; 18
 164:	8f 7b       	andi	r24, 0xBF	; 191
 166:	82 bb       	out	0x12, r24	; 18
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	2f 91       	pop	r18
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
