
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000156  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000185  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000193  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a8  00000000  00000000  000001c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e0  00000000  00000000  00000a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026e  00000000  00000000  0000104b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  00001496  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000d4  000000d4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.SPI_MasterInit 0000001a  0000009a  0000009a  0000010e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.SPI_MasterTransmitRecieve 0000000a  000000ca  000000ca  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    0000002e  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  000000dc  000000dc  00000150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  000000de  000000de  00000152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  000000e0  000000e0  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  000000b4  000000b4  00000128  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  000000d8  000000d8  0000014c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  30:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  44:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  48:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000d4 <__bad_interrupt>:
  d4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.SPI_MasterInit:

0000009a <SPI_MasterInit>:
#define SPI_SS				PB4


void SPI_MasterInit(){
	// Set MOSI, SS, CLK as output
	DDRB |= (1 << SPI_MOSI) | (1 << SPI_SS) | (1 << SPI_CLK);
  9a:	87 b3       	in	r24, 0x17	; 23
  9c:	80 6b       	ori	r24, 0xB0	; 176
  9e:	87 bb       	out	0x17, r24	; 23
	// Set the MCU as SPI Master mode
	SPCR |= (1 << MSTR);
  a0:	8d b1       	in	r24, 0x0d	; 13
  a2:	80 61       	ori	r24, 0x10	; 16
  a4:	8d b9       	out	0x0d, r24	; 13
	// Set the clock rate
	SPCR |= (1 << SPR0); // Fosc/16
  a6:	8d b1       	in	r24, 0x0d	; 13
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	8d b9       	out	0x0d, r24	; 13
	// Enable SPI Peripheral
	SPCR |= (1 << SPE);
  ac:	8d b1       	in	r24, 0x0d	; 13
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	8d b9       	out	0x0d, r24	; 13
  b2:	08 95       	ret

Disassembly of section .text.SPI_MasterTransmitRecieve:

000000ca <SPI_MasterTransmitRecieve>:
}

uint8_t SPI_MasterTransmitRecieve(uint8_t data){
	// Write on SPDR
	SPDR = (uint8_t)data;
  ca:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission to complete (SPIF flag is set)
	while(!((SPSR >> SPIF) & 0x1));
  cc:	77 9b       	sbis	0x0e, 7	; 14
  ce:	fe cf       	rjmp	.-4      	; 0xcc <SPI_MasterTransmitRecieve+0x2>
	return SPDR;
  d0:	8f b1       	in	r24, 0x0f	; 15
}
  d2:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:

int main(void)
{
	// Initialize GPIOA as output for 7-segment display
	DDRA = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	// Initialize SPI Master Device
	SPI_MasterInit();
  70:	0e 94 4d 00 	call	0x9a	; 0x9a <SPI_MasterInit>
    while(1)
    {
		for(int i = 0; i <= 0xFF; i++){
  74:	c0 e0       	ldi	r28, 0x00	; 0
  76:	d0 e0       	ldi	r29, 0x00	; 0
  78:	0b c0       	rjmp	.+22     	; 0x90 <main+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	83 e2       	ldi	r24, 0x23	; 35
  7c:	94 ef       	ldi	r25, 0xF4	; 244
  7e:	01 97       	sbiw	r24, 0x01	; 1
  80:	f1 f7       	brne	.-4      	; 0x7e <main+0x12>
  82:	00 c0       	rjmp	.+0      	; 0x84 <main+0x18>
  84:	00 00       	nop
			_delay_ms(250);
			uint8_t RecievedData = SPI_MasterTransmitRecieve(i); // Transmit & Recieve
  86:	8c 2f       	mov	r24, r28
  88:	0e 94 65 00 	call	0xca	; 0xca <SPI_MasterTransmitRecieve>
			PORTA = RecievedData; // Display Recieved data on 7segment 
  8c:	8b bb       	out	0x1b, r24	; 27
	DDRA = 0xFF;
	// Initialize SPI Master Device
	SPI_MasterInit();
    while(1)
    {
		for(int i = 0; i <= 0xFF; i++){
  8e:	21 96       	adiw	r28, 0x01	; 1
  90:	cf 3f       	cpi	r28, 0xFF	; 255
  92:	d1 05       	cpc	r29, r1
  94:	91 f3       	breq	.-28     	; 0x7a <main+0xe>
  96:	8c f3       	brlt	.-30     	; 0x7a <main+0xe>
  98:	ed cf       	rjmp	.-38     	; 0x74 <main+0x8>

Disassembly of section .text.__dummy_fini:

000000dc <_fini>:
  dc:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000de <__funcs_on_exit>:
  de:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000e0 <__simulator_exit>:
  e0:	08 95       	ret

Disassembly of section .text.exit:

000000b4 <exit>:
  b4:	ec 01       	movw	r28, r24
  b6:	0e 94 6f 00 	call	0xde	; 0xde <__funcs_on_exit>
  ba:	0e 94 6e 00 	call	0xdc	; 0xdc <_fini>
  be:	ce 01       	movw	r24, r28
  c0:	0e 94 70 00 	call	0xe0	; 0xe0 <__simulator_exit>
  c4:	ce 01       	movw	r24, r28
  c6:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Exit>

Disassembly of section .text._Exit:

000000d8 <_Exit>:
  d8:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
