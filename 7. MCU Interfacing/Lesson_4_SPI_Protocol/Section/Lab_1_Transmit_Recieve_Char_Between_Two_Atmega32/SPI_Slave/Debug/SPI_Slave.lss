
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014c  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000017b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000189  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a4  00000000  00000000  000001b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e0  00000000  00000000  00000a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000268  00000000  00000000  0000103d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000012a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009f  00000000  00000000  00001482  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001521  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000ca  000000ca  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001544  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.SPI_SlaveInit 00000014  000000ac  000000ac  00000120  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.SPI_SlaveTransmitRecieve 0000000a  000000c0  000000c0  00000134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    0000002a  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  000000d2  000000d2  00000146  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  000000d4  000000d4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  000000d6  000000d6  0000014a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000096  00000096  0000010a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  000000ce  000000ce  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.SPI_SlaveInit:

000000ac <SPI_SlaveInit>:
#define SPI_SS				PB4


void SPI_SlaveInit(){
	// Set MISO as output; MOSI, SCK, SS as input
	DDRB |= (1 << SPI_MISO);
  ac:	87 b3       	in	r24, 0x17	; 23
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~((1 << SPI_MOSI) | (1 << SPI_CLK) | (1 << SPI_SS));
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	8f 74       	andi	r24, 0x4F	; 79
  b6:	87 bb       	out	0x17, r24	; 23
	// Enable SPI Peripheral
	SPCR |= (1 << SPE);
  b8:	8d b1       	in	r24, 0x0d	; 13
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	8d b9       	out	0x0d, r24	; 13
  be:	08 95       	ret

Disassembly of section .text.SPI_SlaveTransmitRecieve:

000000c0 <SPI_SlaveTransmitRecieve>:
}

uint8_t SPI_SlaveTransmitRecieve(uint8_t data){
	// Write on SPDR
	SPDR = (uint8_t)data;
  c0:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission to complete (SPIF flag is set)
	while(!((SPSR >> SPIF) & 0x1));
  c2:	77 9b       	sbis	0x0e, 7	; 14
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <SPI_SlaveTransmitRecieve+0x2>
	return SPDR;
  c6:	8f b1       	in	r24, 0x0f	; 15
}
  c8:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:

int main(void)
{
	// Initialize GPIOA as output for 7-segment display
	DDRA = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	// Initialize SPI Master Device
	SPI_SlaveInit();
  70:	0e 94 56 00 	call	0xac	; 0xac <SPI_SlaveInit>
    while(1)
    {
		for(int i = 0xFF; i >= 0; i--){
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e0       	ldi	r29, 0x00	; 0
  78:	0b c0       	rjmp	.+22     	; 0x90 <main+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	83 e2       	ldi	r24, 0x23	; 35
  7c:	94 ef       	ldi	r25, 0xF4	; 244
  7e:	01 97       	sbiw	r24, 0x01	; 1
  80:	f1 f7       	brne	.-4      	; 0x7e <main+0x12>
  82:	00 c0       	rjmp	.+0      	; 0x84 <main+0x18>
  84:	00 00       	nop
			_delay_ms(250);
			uint8_t RecievedData = SPI_SlaveTransmitRecieve(i); // Transmit & Recieve
  86:	8c 2f       	mov	r24, r28
  88:	0e 94 60 00 	call	0xc0	; 0xc0 <SPI_SlaveTransmitRecieve>
			PORTA = RecievedData; // Display Recieved data on 7segment 
  8c:	8b bb       	out	0x1b, r24	; 27
	DDRA = 0xFF;
	// Initialize SPI Master Device
	SPI_SlaveInit();
    while(1)
    {
		for(int i = 0xFF; i >= 0; i--){
  8e:	21 97       	sbiw	r28, 0x01	; 1
  90:	dd 23       	and	r29, r29
  92:	9c f7       	brge	.-26     	; 0x7a <main+0xe>
  94:	ef cf       	rjmp	.-34     	; 0x74 <main+0x8>

Disassembly of section .text.__dummy_fini:

000000d2 <_fini>:
  d2:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000d4 <__funcs_on_exit>:
  d4:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000d6 <__simulator_exit>:
  d6:	08 95       	ret

Disassembly of section .text.exit:

00000096 <exit>:
  96:	ec 01       	movw	r28, r24
  98:	0e 94 6a 00 	call	0xd4	; 0xd4 <__funcs_on_exit>
  9c:	0e 94 69 00 	call	0xd2	; 0xd2 <_fini>
  a0:	ce 01       	movw	r24, r28
  a2:	0e 94 6b 00 	call	0xd6	; 0xd6 <__simulator_exit>
  a6:	ce 01       	movw	r24, r28
  a8:	0e 94 67 00 	call	0xce	; 0xce <_Exit>

Disassembly of section .text._Exit:

000000ce <_Exit>:
  ce:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
