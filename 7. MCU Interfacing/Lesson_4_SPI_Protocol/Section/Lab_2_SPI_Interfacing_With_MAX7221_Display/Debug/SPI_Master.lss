
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000202  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000231  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000023f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b4b  00000000  00000000  0000028f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000639  00000000  00000000  00000dda  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035d  00000000  00000000  00001413  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001770  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e2  00000000  00000000  0000199a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000180  00000180  000001f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.SPI_MasterInit 0000000c  00000166  00000166  000001da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.SPI_MasterTransmit 00000008  00000172  00000172  000001e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.MAX7219_Write 0000001e  00000132  00000132  000001a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.MAX7219_Init 00000022  00000110  00000110  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.TestAllSegments 00000044  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.DisplayDigit 00000006  0000017a  0000017a  000001ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.main    00000060  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_fini 00000002  00000188  00000188  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_funcs_on_exit 00000002  0000018a  0000018a  000001fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_simulator_exit 00000002  0000018c  0000018c  00000200  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.exit    00000016  00000150  00000150  000001c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text._Exit   00000004  00000184  00000184  000001f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
   8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
   c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  10:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  14:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  18:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  1c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  20:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  24:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  28:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  2c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  30:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  34:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  38:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  3c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  40:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  44:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  48:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  4c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  50:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 a8 00 	jmp	0x150	; 0x150 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000180 <__bad_interrupt>:
 180:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.SPI_MasterInit:

00000166 <SPI_MasterInit>:
#define SPI_SS   PB4
#define SPI_MOSI PB5
#define SPI_SCK  PB7

void SPI_MasterInit() {
	DDRB |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);  // Set MOSI, SCK, SS as output
 166:	87 b3       	in	r24, 0x17	; 23
 168:	80 6b       	ori	r24, 0xB0	; 176
 16a:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE) | (1 << MSTR) | (0 << CPOL) | (0 << CPHA) | (1 << SPR0);  // SPI mode 0, Fosc/16
 16c:	81 e5       	ldi	r24, 0x51	; 81
 16e:	8d b9       	out	0x0d, r24	; 13
 170:	08 95       	ret

Disassembly of section .text.SPI_MasterTransmit:

00000172 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(uint8_t data) {
	SPDR = data;
 172:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)));  // Wait for transmission to complete
 174:	77 9b       	sbis	0x0e, 7	; 14
 176:	fe cf       	rjmp	.-4      	; 0x174 <SPI_MasterTransmit+0x2>
}
 178:	08 95       	ret

Disassembly of section .text.MAX7219_Write:

00000132 <MAX7219_Write>:

void MAX7219_Write(uint8_t address, uint8_t data) {
 132:	cf 93       	push	r28
 134:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << SPI_SS);  // Pull CS low
 136:	98 b3       	in	r25, 0x18	; 24
 138:	9f 7e       	andi	r25, 0xEF	; 239
 13a:	98 bb       	out	0x18, r25	; 24
	SPI_MasterTransmit(address);  // Send address (digit register)
 13c:	0e 94 b9 00 	call	0x172	; 0x172 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);  // Send data (digit value)
 140:	8c 2f       	mov	r24, r28
 142:	0e 94 b9 00 	call	0x172	; 0x172 <SPI_MasterTransmit>
	PORTB |= (1 << SPI_SS);  // Pull CS high
 146:	88 b3       	in	r24, 0x18	; 24
 148:	80 61       	ori	r24, 0x10	; 16
 14a:	88 bb       	out	0x18, r24	; 24
}
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

Disassembly of section .text.MAX7219_Init:

00000110 <MAX7219_Init>:

void MAX7219_Init() {
	MAX7219_Write(0x09, 0xFF);  // Exit shutdown mode
 110:	6f ef       	ldi	r22, 0xFF	; 255
 112:	89 e0       	ldi	r24, 0x09	; 9
 114:	0e 94 99 00 	call	0x132	; 0x132 <MAX7219_Write>
	MAX7219_Write(0x0A, 0xFF);  // Mid brightness
 118:	6f ef       	ldi	r22, 0xFF	; 255
 11a:	8a e0       	ldi	r24, 0x0A	; 10
 11c:	0e 94 99 00 	call	0x132	; 0x132 <MAX7219_Write>
	MAX7219_Write(0x0B, 0xF7);  // Scan all 8 digits
 120:	67 ef       	ldi	r22, 0xF7	; 247
 122:	8b e0       	ldi	r24, 0x0B	; 11
 124:	0e 94 99 00 	call	0x132	; 0x132 <MAX7219_Write>
	MAX7219_Write(0x0C, 0x01);  // Disable test mode
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	8c e0       	ldi	r24, 0x0C	; 12
 12c:	0e 94 99 00 	call	0x132	; 0x132 <MAX7219_Write>
 130:	08 95       	ret

Disassembly of section .text.TestAllSegments:

000000cc <TestAllSegments>:
}

void TestAllSegments() {
  cc:	cf 93       	push	r28
	for (uint8_t i = 0; i < 8; i++) {
  ce:	c0 e0       	ldi	r28, 0x00	; 0
  d0:	1b c0       	rjmp	.+54     	; 0x108 <TestAllSegments+0x3c>
		MAX7219_Write(i + 1, 0x7F);  // All segments ON for each digit (0x7F is 1111111, all segments ON)
  d2:	cf 5f       	subi	r28, 0xFF	; 255
  d4:	6f e7       	ldi	r22, 0x7F	; 127
  d6:	8c 2f       	mov	r24, r28
  d8:	0e 94 99 00 	call	0x132	; 0x132 <MAX7219_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f e9       	ldi	r18, 0x9F	; 159
  de:	86 e8       	ldi	r24, 0x86	; 134
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <TestAllSegments+0x16>
  ea:	00 c0       	rjmp	.+0      	; 0xec <TestAllSegments+0x20>
  ec:	00 00       	nop
		_delay_ms(500);  // Wait for 500ms
		MAX7219_Write(i + 1, 0x00);  // All segments OFF for each digit
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	8c 2f       	mov	r24, r28
  f2:	0e 94 99 00 	call	0x132	; 0x132 <MAX7219_Write>
  f6:	2f e9       	ldi	r18, 0x9F	; 159
  f8:	86 e8       	ldi	r24, 0x86	; 134
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <TestAllSegments+0x30>
 104:	00 c0       	rjmp	.+0      	; 0x106 <TestAllSegments+0x3a>
 106:	00 00       	nop
	MAX7219_Write(0x0B, 0xF7);  // Scan all 8 digits
	MAX7219_Write(0x0C, 0x01);  // Disable test mode
}

void TestAllSegments() {
	for (uint8_t i = 0; i < 8; i++) {
 108:	c8 30       	cpi	r28, 0x08	; 8
 10a:	18 f3       	brcs	.-58     	; 0xd2 <TestAllSegments+0x6>
		MAX7219_Write(i + 1, 0x7F);  // All segments ON for each digit (0x7F is 1111111, all segments ON)
		_delay_ms(500);  // Wait for 500ms
		MAX7219_Write(i + 1, 0x00);  // All segments OFF for each digit
		_delay_ms(500);  // Wait for 500ms
	}
}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

Disassembly of section .text.DisplayDigit:

0000017a <DisplayDigit>:

void DisplayDigit(uint8_t digit, uint8_t value) {
	MAX7219_Write(digit, value);  // Write the value to the specified digit
 17a:	0e 94 99 00 	call	0x132	; 0x132 <MAX7219_Write>
 17e:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:
}

int main(void) {
	SPI_MasterInit();  // Initialize SPI
  6c:	0e 94 b3 00 	call	0x166	; 0x166 <SPI_MasterInit>
	MAX7219_Init();    // Initialize MAX7219
  70:	0e 94 88 00 	call	0x110	; 0x110 <MAX7219_Init>

	while (1) {
		// Display digits 1 to 8 on each of the 8 digits of the MAX7219
		DisplayDigit(1, 0x01); 
  74:	61 e0       	ldi	r22, 0x01	; 1
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	0e 94 bd 00 	call	0x17a	; 0x17a <DisplayDigit>
		DisplayDigit(2, 0x02); 
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	0e 94 bd 00 	call	0x17a	; 0x17a <DisplayDigit>
		DisplayDigit(3, 0x03);  
  84:	63 e0       	ldi	r22, 0x03	; 3
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	0e 94 bd 00 	call	0x17a	; 0x17a <DisplayDigit>
		DisplayDigit(4, 0x04);  
  8c:	64 e0       	ldi	r22, 0x04	; 4
  8e:	84 e0       	ldi	r24, 0x04	; 4
  90:	0e 94 bd 00 	call	0x17a	; 0x17a <DisplayDigit>
		DisplayDigit(5, 0x05);  
  94:	65 e0       	ldi	r22, 0x05	; 5
  96:	85 e0       	ldi	r24, 0x05	; 5
  98:	0e 94 bd 00 	call	0x17a	; 0x17a <DisplayDigit>
		DisplayDigit(6, 0x06);  
  9c:	66 e0       	ldi	r22, 0x06	; 6
  9e:	86 e0       	ldi	r24, 0x06	; 6
  a0:	0e 94 bd 00 	call	0x17a	; 0x17a <DisplayDigit>
		DisplayDigit(7, 0x07);  
  a4:	67 e0       	ldi	r22, 0x07	; 7
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	0e 94 bd 00 	call	0x17a	; 0x17a <DisplayDigit>
		DisplayDigit(8, 0x08); 
  ac:	68 e0       	ldi	r22, 0x08	; 8
  ae:	88 e0       	ldi	r24, 0x08	; 8
  b0:	0e 94 bd 00 	call	0x17a	; 0x17a <DisplayDigit>
  b4:	2f e3       	ldi	r18, 0x3F	; 63
  b6:	8d e0       	ldi	r24, 0x0D	; 13
  b8:	93 e0       	ldi	r25, 0x03	; 3
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x4e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x58>
  c4:	00 00       	nop
		_delay_ms(1000);  // Wait for 1 second

		TestAllSegments();
  c6:	0e 94 66 00 	call	0xcc	; 0xcc <TestAllSegments>
  ca:	d4 cf       	rjmp	.-88     	; 0x74 <main+0x8>

Disassembly of section .text.__dummy_fini:

00000188 <_fini>:
 188:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000018a <__funcs_on_exit>:
 18a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000018c <__simulator_exit>:
 18c:	08 95       	ret

Disassembly of section .text.exit:

00000150 <exit>:
 150:	ec 01       	movw	r28, r24
 152:	0e 94 c5 00 	call	0x18a	; 0x18a <__funcs_on_exit>
 156:	0e 94 c4 00 	call	0x188	; 0x188 <_fini>
 15a:	ce 01       	movw	r24, r28
 15c:	0e 94 c6 00 	call	0x18c	; 0x18c <__simulator_exit>
 160:	ce 01       	movw	r24, r28
 162:	0e 94 c2 00 	call	0x184	; 0x184 <_Exit>

Disassembly of section .text._Exit:

00000184 <_Exit>:
 184:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
