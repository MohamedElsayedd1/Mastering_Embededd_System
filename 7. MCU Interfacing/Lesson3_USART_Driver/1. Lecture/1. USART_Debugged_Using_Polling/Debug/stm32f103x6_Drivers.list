
stm32f103x6_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b00  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08000c30  08000c30  00010c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ca8  08000ca8  00010cb0  2**0
                  CONTENTS
  4 .ARM          00000000  08000ca8  08000ca8  00010cb0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ca8  08000cb0  00010cb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ca8  08000ca8  00010ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cac  08000cac  00010cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010cb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000cb0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000cb0  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010cb0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ae0  00000000  00000000  00010cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005fa  00000000  00000000  000127b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b08  00000000  00000000  00012db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d0  00000000  00000000  000138c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  00013a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000229  00000000  00000000  00013c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000d24  00000000  00000000  00013e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000046c2  00000000  00000000  00014b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00019217  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005bc  00000000  00000000  00019294  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c18 	.word	0x08000c18

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000c18 	.word	0x08000c18

08000170 <EXTI0_IRQHandler>:

/* ================================================================ */
/* ========================= ISR Functions ======================== */
/* ================================================================ */

void EXTI0_IRQHandler(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	// This bit is cleared by writing a ‘1’ into the bit
	SET_BIT(EXTI->PR, 0);
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <EXTI0_IRQHandler+0x24>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <EXTI0_IRQHandler+0x24>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	// Call IRQ Call Back Function
	if (EXTI_CallBacks[0] != NULL) {
 8000180:	4b05      	ldr	r3, [pc, #20]	; (8000198 <EXTI0_IRQHandler+0x28>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d002      	beq.n	800018e <EXTI0_IRQHandler+0x1e>
		EXTI_CallBacks[0]();
 8000188:	4b03      	ldr	r3, [pc, #12]	; (8000198 <EXTI0_IRQHandler+0x28>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4798      	blx	r3
	}
}
 800018e:	bf00      	nop
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40010400 	.word	0x40010400
 8000198:	2000001c 	.word	0x2000001c

0800019c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	// This bit is cleared by writing a ‘1’ into the bit
	SET_BIT(EXTI->PR, 1);
 80001a0:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <EXTI1_IRQHandler+0x24>)
 80001a2:	695b      	ldr	r3, [r3, #20]
 80001a4:	4a06      	ldr	r2, [pc, #24]	; (80001c0 <EXTI1_IRQHandler+0x24>)
 80001a6:	f043 0302 	orr.w	r3, r3, #2
 80001aa:	6153      	str	r3, [r2, #20]
	// Call IRQ Call Back Function
	if (EXTI_CallBacks[1] != NULL) {
 80001ac:	4b05      	ldr	r3, [pc, #20]	; (80001c4 <EXTI1_IRQHandler+0x28>)
 80001ae:	685b      	ldr	r3, [r3, #4]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d002      	beq.n	80001ba <EXTI1_IRQHandler+0x1e>
		EXTI_CallBacks[1]();
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <EXTI1_IRQHandler+0x28>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	4798      	blx	r3
	}
}
 80001ba:	bf00      	nop
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	40010400 	.word	0x40010400
 80001c4:	2000001c 	.word	0x2000001c

080001c8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	// This bit is cleared by writing a ‘1’ into the bit
	SET_BIT(EXTI->PR, 2);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <EXTI2_IRQHandler+0x24>)
 80001ce:	695b      	ldr	r3, [r3, #20]
 80001d0:	4a06      	ldr	r2, [pc, #24]	; (80001ec <EXTI2_IRQHandler+0x24>)
 80001d2:	f043 0304 	orr.w	r3, r3, #4
 80001d6:	6153      	str	r3, [r2, #20]
	// Call IRQ Call Back Function
	if (EXTI_CallBacks[2] != NULL) {
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <EXTI2_IRQHandler+0x28>)
 80001da:	689b      	ldr	r3, [r3, #8]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d002      	beq.n	80001e6 <EXTI2_IRQHandler+0x1e>
		EXTI_CallBacks[2]();
 80001e0:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <EXTI2_IRQHandler+0x28>)
 80001e2:	689b      	ldr	r3, [r3, #8]
 80001e4:	4798      	blx	r3
	}
}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40010400 	.word	0x40010400
 80001f0:	2000001c 	.word	0x2000001c

080001f4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	// This bit is cleared by writing a ‘1’ into the bit
	SET_BIT(EXTI->PR, 3);
 80001f8:	4b07      	ldr	r3, [pc, #28]	; (8000218 <EXTI3_IRQHandler+0x24>)
 80001fa:	695b      	ldr	r3, [r3, #20]
 80001fc:	4a06      	ldr	r2, [pc, #24]	; (8000218 <EXTI3_IRQHandler+0x24>)
 80001fe:	f043 0308 	orr.w	r3, r3, #8
 8000202:	6153      	str	r3, [r2, #20]
	// Call IRQ Call Back Function
	if (EXTI_CallBacks[3] != NULL) {
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI3_IRQHandler+0x28>)
 8000206:	68db      	ldr	r3, [r3, #12]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d002      	beq.n	8000212 <EXTI3_IRQHandler+0x1e>
		EXTI_CallBacks[3]();
 800020c:	4b03      	ldr	r3, [pc, #12]	; (800021c <EXTI3_IRQHandler+0x28>)
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	4798      	blx	r3
	}
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40010400 	.word	0x40010400
 800021c:	2000001c 	.word	0x2000001c

08000220 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	// This bit is cleared by writing a ‘1’ into the bit
	SET_BIT(EXTI->PR, 4);
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <EXTI4_IRQHandler+0x24>)
 8000226:	695b      	ldr	r3, [r3, #20]
 8000228:	4a06      	ldr	r2, [pc, #24]	; (8000244 <EXTI4_IRQHandler+0x24>)
 800022a:	f043 0310 	orr.w	r3, r3, #16
 800022e:	6153      	str	r3, [r2, #20]
	// Call IRQ Call Back Function
	if (EXTI_CallBacks[4] != NULL) {
 8000230:	4b05      	ldr	r3, [pc, #20]	; (8000248 <EXTI4_IRQHandler+0x28>)
 8000232:	691b      	ldr	r3, [r3, #16]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d002      	beq.n	800023e <EXTI4_IRQHandler+0x1e>
		EXTI_CallBacks[4]();
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <EXTI4_IRQHandler+0x28>)
 800023a:	691b      	ldr	r3, [r3, #16]
 800023c:	4798      	blx	r3
	}
}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40010400 	.word	0x40010400
 8000248:	2000001c 	.word	0x2000001c

0800024c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 5)){
 8000250:	4b34      	ldr	r3, [pc, #208]	; (8000324 <EXTI9_5_IRQHandler+0xd8>)
 8000252:	695b      	ldr	r3, [r3, #20]
 8000254:	095b      	lsrs	r3, r3, #5
 8000256:	f003 0301 	and.w	r3, r3, #1
 800025a:	2b01      	cmp	r3, #1
 800025c:	d10d      	bne.n	800027a <EXTI9_5_IRQHandler+0x2e>
		// This bit is cleared by writing a ‘1’ into the bit
		SET_BIT(EXTI->PR, 5);
 800025e:	4b31      	ldr	r3, [pc, #196]	; (8000324 <EXTI9_5_IRQHandler+0xd8>)
 8000260:	695b      	ldr	r3, [r3, #20]
 8000262:	4a30      	ldr	r2, [pc, #192]	; (8000324 <EXTI9_5_IRQHandler+0xd8>)
 8000264:	f043 0320 	orr.w	r3, r3, #32
 8000268:	6153      	str	r3, [r2, #20]
		// Call IRQ Call Back Function
		if (EXTI_CallBacks[5] != NULL) {
 800026a:	4b2f      	ldr	r3, [pc, #188]	; (8000328 <EXTI9_5_IRQHandler+0xdc>)
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d056      	beq.n	8000320 <EXTI9_5_IRQHandler+0xd4>
			EXTI_CallBacks[5]();
 8000272:	4b2d      	ldr	r3, [pc, #180]	; (8000328 <EXTI9_5_IRQHandler+0xdc>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	4798      	blx	r3
		// Call IRQ Call Back Function
		if (EXTI_CallBacks[9] != NULL) {
			EXTI_CallBacks[9]();
		}
	}
}
 8000278:	e052      	b.n	8000320 <EXTI9_5_IRQHandler+0xd4>
	else if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 6)){
 800027a:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <EXTI9_5_IRQHandler+0xd8>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	099b      	lsrs	r3, r3, #6
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b01      	cmp	r3, #1
 8000286:	d10d      	bne.n	80002a4 <EXTI9_5_IRQHandler+0x58>
		SET_BIT(EXTI->PR, 6);
 8000288:	4b26      	ldr	r3, [pc, #152]	; (8000324 <EXTI9_5_IRQHandler+0xd8>)
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	4a25      	ldr	r2, [pc, #148]	; (8000324 <EXTI9_5_IRQHandler+0xd8>)
 800028e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000292:	6153      	str	r3, [r2, #20]
		if (EXTI_CallBacks[6] != NULL) {
 8000294:	4b24      	ldr	r3, [pc, #144]	; (8000328 <EXTI9_5_IRQHandler+0xdc>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d041      	beq.n	8000320 <EXTI9_5_IRQHandler+0xd4>
			EXTI_CallBacks[6]();
 800029c:	4b22      	ldr	r3, [pc, #136]	; (8000328 <EXTI9_5_IRQHandler+0xdc>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4798      	blx	r3
}
 80002a2:	e03d      	b.n	8000320 <EXTI9_5_IRQHandler+0xd4>
	else if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 7)){
 80002a4:	4b1f      	ldr	r3, [pc, #124]	; (8000324 <EXTI9_5_IRQHandler+0xd8>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	09db      	lsrs	r3, r3, #7
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d10d      	bne.n	80002ce <EXTI9_5_IRQHandler+0x82>
		SET_BIT(EXTI->PR, 7);
 80002b2:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <EXTI9_5_IRQHandler+0xd8>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	4a1b      	ldr	r2, [pc, #108]	; (8000324 <EXTI9_5_IRQHandler+0xd8>)
 80002b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002bc:	6153      	str	r3, [r2, #20]
		if (EXTI_CallBacks[7] != NULL) {
 80002be:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <EXTI9_5_IRQHandler+0xdc>)
 80002c0:	69db      	ldr	r3, [r3, #28]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d02c      	beq.n	8000320 <EXTI9_5_IRQHandler+0xd4>
			EXTI_CallBacks[7]();
 80002c6:	4b18      	ldr	r3, [pc, #96]	; (8000328 <EXTI9_5_IRQHandler+0xdc>)
 80002c8:	69db      	ldr	r3, [r3, #28]
 80002ca:	4798      	blx	r3
}
 80002cc:	e028      	b.n	8000320 <EXTI9_5_IRQHandler+0xd4>
	else if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 8)){
 80002ce:	4b15      	ldr	r3, [pc, #84]	; (8000324 <EXTI9_5_IRQHandler+0xd8>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	0a1b      	lsrs	r3, r3, #8
 80002d4:	f003 0301 	and.w	r3, r3, #1
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d10d      	bne.n	80002f8 <EXTI9_5_IRQHandler+0xac>
		SET_BIT(EXTI->PR, 8);
 80002dc:	4b11      	ldr	r3, [pc, #68]	; (8000324 <EXTI9_5_IRQHandler+0xd8>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a10      	ldr	r2, [pc, #64]	; (8000324 <EXTI9_5_IRQHandler+0xd8>)
 80002e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e6:	6153      	str	r3, [r2, #20]
		if (EXTI_CallBacks[8] != NULL) {
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <EXTI9_5_IRQHandler+0xdc>)
 80002ea:	6a1b      	ldr	r3, [r3, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d017      	beq.n	8000320 <EXTI9_5_IRQHandler+0xd4>
			EXTI_CallBacks[8]();
 80002f0:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <EXTI9_5_IRQHandler+0xdc>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4798      	blx	r3
}
 80002f6:	e013      	b.n	8000320 <EXTI9_5_IRQHandler+0xd4>
	else if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 9)){
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <EXTI9_5_IRQHandler+0xd8>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	0a5b      	lsrs	r3, r3, #9
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	2b01      	cmp	r3, #1
 8000304:	d10c      	bne.n	8000320 <EXTI9_5_IRQHandler+0xd4>
		SET_BIT(EXTI->PR, 9);
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <EXTI9_5_IRQHandler+0xd8>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a06      	ldr	r2, [pc, #24]	; (8000324 <EXTI9_5_IRQHandler+0xd8>)
 800030c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000310:	6153      	str	r3, [r2, #20]
		if (EXTI_CallBacks[9] != NULL) {
 8000312:	4b05      	ldr	r3, [pc, #20]	; (8000328 <EXTI9_5_IRQHandler+0xdc>)
 8000314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000316:	2b00      	cmp	r3, #0
 8000318:	d002      	beq.n	8000320 <EXTI9_5_IRQHandler+0xd4>
			EXTI_CallBacks[9]();
 800031a:	4b03      	ldr	r3, [pc, #12]	; (8000328 <EXTI9_5_IRQHandler+0xdc>)
 800031c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800031e:	4798      	blx	r3
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	40010400 	.word	0x40010400
 8000328:	2000001c 	.word	0x2000001c

0800032c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 10)){
 8000330:	4b3f      	ldr	r3, [pc, #252]	; (8000430 <EXTI15_10_IRQHandler+0x104>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	0a9b      	lsrs	r3, r3, #10
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	2b01      	cmp	r3, #1
 800033c:	d10d      	bne.n	800035a <EXTI15_10_IRQHandler+0x2e>
		// This bit is cleared by writing a ‘1’ into the bit
		SET_BIT(EXTI->PR, 10);
 800033e:	4b3c      	ldr	r3, [pc, #240]	; (8000430 <EXTI15_10_IRQHandler+0x104>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	4a3b      	ldr	r2, [pc, #236]	; (8000430 <EXTI15_10_IRQHandler+0x104>)
 8000344:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000348:	6153      	str	r3, [r2, #20]
		// Call IRQ Call Back Function
		if (EXTI_CallBacks[10] != NULL) {
 800034a:	4b3a      	ldr	r3, [pc, #232]	; (8000434 <EXTI15_10_IRQHandler+0x108>)
 800034c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800034e:	2b00      	cmp	r3, #0
 8000350:	d06b      	beq.n	800042a <EXTI15_10_IRQHandler+0xfe>
			EXTI_CallBacks[10]();
 8000352:	4b38      	ldr	r3, [pc, #224]	; (8000434 <EXTI15_10_IRQHandler+0x108>)
 8000354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000356:	4798      	blx	r3
		// Call IRQ Call Back Function
		if (EXTI_CallBacks[15] != NULL) {
			EXTI_CallBacks[15]();
		}
	}
}
 8000358:	e067      	b.n	800042a <EXTI15_10_IRQHandler+0xfe>
	else if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 11)){
 800035a:	4b35      	ldr	r3, [pc, #212]	; (8000430 <EXTI15_10_IRQHandler+0x104>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	0adb      	lsrs	r3, r3, #11
 8000360:	f003 0301 	and.w	r3, r3, #1
 8000364:	2b01      	cmp	r3, #1
 8000366:	d10d      	bne.n	8000384 <EXTI15_10_IRQHandler+0x58>
		SET_BIT(EXTI->PR, 11);
 8000368:	4b31      	ldr	r3, [pc, #196]	; (8000430 <EXTI15_10_IRQHandler+0x104>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a30      	ldr	r2, [pc, #192]	; (8000430 <EXTI15_10_IRQHandler+0x104>)
 800036e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000372:	6153      	str	r3, [r2, #20]
		if (EXTI_CallBacks[11] != NULL) {
 8000374:	4b2f      	ldr	r3, [pc, #188]	; (8000434 <EXTI15_10_IRQHandler+0x108>)
 8000376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000378:	2b00      	cmp	r3, #0
 800037a:	d056      	beq.n	800042a <EXTI15_10_IRQHandler+0xfe>
			EXTI_CallBacks[11]();
 800037c:	4b2d      	ldr	r3, [pc, #180]	; (8000434 <EXTI15_10_IRQHandler+0x108>)
 800037e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000380:	4798      	blx	r3
}
 8000382:	e052      	b.n	800042a <EXTI15_10_IRQHandler+0xfe>
	else if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 12)){
 8000384:	4b2a      	ldr	r3, [pc, #168]	; (8000430 <EXTI15_10_IRQHandler+0x104>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	0b1b      	lsrs	r3, r3, #12
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	2b01      	cmp	r3, #1
 8000390:	d10d      	bne.n	80003ae <EXTI15_10_IRQHandler+0x82>
		SET_BIT(EXTI->PR, 12);
 8000392:	4b27      	ldr	r3, [pc, #156]	; (8000430 <EXTI15_10_IRQHandler+0x104>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a26      	ldr	r2, [pc, #152]	; (8000430 <EXTI15_10_IRQHandler+0x104>)
 8000398:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800039c:	6153      	str	r3, [r2, #20]
		if (EXTI_CallBacks[12] != NULL) {
 800039e:	4b25      	ldr	r3, [pc, #148]	; (8000434 <EXTI15_10_IRQHandler+0x108>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d041      	beq.n	800042a <EXTI15_10_IRQHandler+0xfe>
			EXTI_CallBacks[12]();
 80003a6:	4b23      	ldr	r3, [pc, #140]	; (8000434 <EXTI15_10_IRQHandler+0x108>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003aa:	4798      	blx	r3
}
 80003ac:	e03d      	b.n	800042a <EXTI15_10_IRQHandler+0xfe>
	else if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 13)){
 80003ae:	4b20      	ldr	r3, [pc, #128]	; (8000430 <EXTI15_10_IRQHandler+0x104>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	0b5b      	lsrs	r3, r3, #13
 80003b4:	f003 0301 	and.w	r3, r3, #1
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d10d      	bne.n	80003d8 <EXTI15_10_IRQHandler+0xac>
		SET_BIT(EXTI->PR, 13);
 80003bc:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <EXTI15_10_IRQHandler+0x104>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	4a1b      	ldr	r2, [pc, #108]	; (8000430 <EXTI15_10_IRQHandler+0x104>)
 80003c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003c6:	6153      	str	r3, [r2, #20]
		if (EXTI_CallBacks[13] != NULL) {
 80003c8:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <EXTI15_10_IRQHandler+0x108>)
 80003ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d02c      	beq.n	800042a <EXTI15_10_IRQHandler+0xfe>
			EXTI_CallBacks[13]();
 80003d0:	4b18      	ldr	r3, [pc, #96]	; (8000434 <EXTI15_10_IRQHandler+0x108>)
 80003d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003d4:	4798      	blx	r3
}
 80003d6:	e028      	b.n	800042a <EXTI15_10_IRQHandler+0xfe>
	else if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 14)){
 80003d8:	4b15      	ldr	r3, [pc, #84]	; (8000430 <EXTI15_10_IRQHandler+0x104>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	0b9b      	lsrs	r3, r3, #14
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d10d      	bne.n	8000402 <EXTI15_10_IRQHandler+0xd6>
		SET_BIT(EXTI->PR, 14);
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <EXTI15_10_IRQHandler+0x104>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a11      	ldr	r2, [pc, #68]	; (8000430 <EXTI15_10_IRQHandler+0x104>)
 80003ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003f0:	6153      	str	r3, [r2, #20]
		if (EXTI_CallBacks[14] != NULL) {
 80003f2:	4b10      	ldr	r3, [pc, #64]	; (8000434 <EXTI15_10_IRQHandler+0x108>)
 80003f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d017      	beq.n	800042a <EXTI15_10_IRQHandler+0xfe>
			EXTI_CallBacks[14]();
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <EXTI15_10_IRQHandler+0x108>)
 80003fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003fe:	4798      	blx	r3
}
 8000400:	e013      	b.n	800042a <EXTI15_10_IRQHandler+0xfe>
	else if(EXTI_INTERRUPET_TRIGGERED == READ_BIT(EXTI->PR, 15)){
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <EXTI15_10_IRQHandler+0x104>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	0bdb      	lsrs	r3, r3, #15
 8000408:	f003 0301 	and.w	r3, r3, #1
 800040c:	2b01      	cmp	r3, #1
 800040e:	d10c      	bne.n	800042a <EXTI15_10_IRQHandler+0xfe>
		SET_BIT(EXTI->PR, 15);
 8000410:	4b07      	ldr	r3, [pc, #28]	; (8000430 <EXTI15_10_IRQHandler+0x104>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	4a06      	ldr	r2, [pc, #24]	; (8000430 <EXTI15_10_IRQHandler+0x104>)
 8000416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800041a:	6153      	str	r3, [r2, #20]
		if (EXTI_CallBacks[15] != NULL) {
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <EXTI15_10_IRQHandler+0x108>)
 800041e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000420:	2b00      	cmp	r3, #0
 8000422:	d002      	beq.n	800042a <EXTI15_10_IRQHandler+0xfe>
			EXTI_CallBacks[15]();
 8000424:	4b03      	ldr	r3, [pc, #12]	; (8000434 <EXTI15_10_IRQHandler+0x108>)
 8000426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000428:	4798      	blx	r3
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010400 	.word	0x40010400
 8000434:	2000001c 	.word	0x2000001c

08000438 <MCAL_GPIO_Init>:
 *
 * @Retval    None
 *
 * @Note      This function must be called before performing any operation on the pin.
 */
void MCAL_GPIO_Init(GPIO_t *GPIOx, GPIO_PinConfig_t *PinConfig){
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]
	volatile uint32 *configRegister = NULL;
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
	uint8 shift = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	72fb      	strb	r3, [r7, #11]
	uint8 pin = PinConfig->PinNum ;
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	72bb      	strb	r3, [r7, #10]

	if(pin >= 0 && pin <= 7){
 8000450:	7abb      	ldrb	r3, [r7, #10]
 8000452:	2b07      	cmp	r3, #7
 8000454:	d805      	bhi.n	8000462 <MCAL_GPIO_Init+0x2a>
		// Port configuration register low (GPIOx_CRL) 0>>7
		configRegister = &(GPIOx->CRL);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	60fb      	str	r3, [r7, #12]
		shift = (pin * 4);
 800045a:	7abb      	ldrb	r3, [r7, #10]
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	72fb      	strb	r3, [r7, #11]
 8000460:	e00d      	b.n	800047e <MCAL_GPIO_Init+0x46>
	}
	else if(pin >= 8 && pin <= 15){
 8000462:	7abb      	ldrb	r3, [r7, #10]
 8000464:	2b07      	cmp	r3, #7
 8000466:	d94c      	bls.n	8000502 <MCAL_GPIO_Init+0xca>
 8000468:	7abb      	ldrb	r3, [r7, #10]
 800046a:	2b0f      	cmp	r3, #15
 800046c:	d849      	bhi.n	8000502 <MCAL_GPIO_Init+0xca>
		// Port configuration register high (GPIOx_CRH) 8>>15
		configRegister = &(GPIOx->CRH);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	3304      	adds	r3, #4
 8000472:	60fb      	str	r3, [r7, #12]
		shift = ((pin - 8) * 4);
 8000474:	7abb      	ldrb	r3, [r7, #10]
 8000476:	3338      	adds	r3, #56	; 0x38
 8000478:	b2db      	uxtb	r3, r3
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	72fb      	strb	r3, [r7, #11]
	else{
		return;
	}

	// Clear the current configuration for the pin
	*configRegister &= ~(0xF << shift);
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	7afa      	ldrb	r2, [r7, #11]
 8000484:	210f      	movs	r1, #15
 8000486:	fa01 f202 	lsl.w	r2, r1, r2
 800048a:	43d2      	mvns	r2, r2
 800048c:	401a      	ands	r2, r3
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	601a      	str	r2, [r3, #0]

	if(PinConfig->PinCNF == GPIO_CNF_PULL_UP_DOWN_INPUT){
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	78db      	ldrb	r3, [r3, #3]
 8000496:	2b02      	cmp	r3, #2
 8000498:	d119      	bne.n	80004ce <MCAL_GPIO_Init+0x96>
		// Configure Pin State : High OR Low
		if(PinConfig->PinState == GPIO_HIGH){
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	789b      	ldrb	r3, [r3, #2]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d10a      	bne.n	80004b8 <MCAL_GPIO_Init+0x80>
			SET_BIT(GPIOx->ODR, PinConfig->PinNum);		 // Enable pull-up
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	683a      	ldr	r2, [r7, #0]
 80004a8:	7812      	ldrb	r2, [r2, #0]
 80004aa:	4611      	mov	r1, r2
 80004ac:	2201      	movs	r2, #1
 80004ae:	408a      	lsls	r2, r1
 80004b0:	431a      	orrs	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	60da      	str	r2, [r3, #12]
 80004b6:	e00a      	b.n	80004ce <MCAL_GPIO_Init+0x96>
		}
		else{
			CLEAR_BIT(GPIOx->ODR, PinConfig->PinNum);	// Enable pull-down
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	683a      	ldr	r2, [r7, #0]
 80004be:	7812      	ldrb	r2, [r2, #0]
 80004c0:	4611      	mov	r1, r2
 80004c2:	2201      	movs	r2, #1
 80004c4:	408a      	lsls	r2, r1
 80004c6:	43d2      	mvns	r2, r2
 80004c8:	401a      	ands	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	60da      	str	r2, [r3, #12]
		}
	}

	// Set the mode and configuration
	*configRegister |= ((PinConfig->PinMode & 0x03) << shift);		 // MODE[1:0]
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	683a      	ldr	r2, [r7, #0]
 80004d4:	7852      	ldrb	r2, [r2, #1]
 80004d6:	f002 0103 	and.w	r1, r2, #3
 80004da:	7afa      	ldrb	r2, [r7, #11]
 80004dc:	fa01 f202 	lsl.w	r2, r1, r2
 80004e0:	431a      	orrs	r2, r3
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	601a      	str	r2, [r3, #0]
	*configRegister |= ((PinConfig->PinCNF & 0x03) << (shift+2));	 // CNF[1:0]
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	683a      	ldr	r2, [r7, #0]
 80004ec:	78d2      	ldrb	r2, [r2, #3]
 80004ee:	f002 0103 	and.w	r1, r2, #3
 80004f2:	7afa      	ldrb	r2, [r7, #11]
 80004f4:	3202      	adds	r2, #2
 80004f6:	fa01 f202 	lsl.w	r2, r1, r2
 80004fa:	431a      	orrs	r2, r3
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	e000      	b.n	8000504 <MCAL_GPIO_Init+0xcc>
		return;
 8000502:	bf00      	nop


}
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <MCAL_RCC_GetSYSCLK_Freq>:
#include "stm32f103x6_RCC_driver.h"

static const uint32 AHP_Prescaler_Table[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
static const uint32 ABP_Prescaler_Table[8] = {0, 0, 0, 0, 1, 2, 3, 4};

uint32 MCAL_RCC_GetSYSCLK_Freq(){
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >> 2) & 0x3){
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MCAL_RCC_GetSYSCLK_Freq+0x2c>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	089b      	lsrs	r3, r3, #2
 8000516:	f003 0303 	and.w	r3, r3, #3
 800051a:	2b01      	cmp	r3, #1
 800051c:	d007      	beq.n	800052e <MCAL_RCC_GetSYSCLK_Freq+0x22>
 800051e:	2b01      	cmp	r3, #1
 8000520:	d303      	bcc.n	800052a <MCAL_RCC_GetSYSCLK_Freq+0x1e>
 8000522:	2b02      	cmp	r3, #2
		case RCC_HSE_CLOCK :
			return HSE_RC_FREQ;
			break;
		case RCC_PLL_CLOCK :
			// Select PLLSRC, Choose PLLMUL, Return PLLCLK
			break;
 8000524:	bf00      	nop
	}
	return RCC_HSI_CLOCK; // by default
 8000526:	2300      	movs	r3, #0
 8000528:	e002      	b.n	8000530 <MCAL_RCC_GetSYSCLK_Freq+0x24>
			return HSI_RC_FREQ;
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <MCAL_RCC_GetSYSCLK_Freq+0x30>)
 800052c:	e000      	b.n	8000530 <MCAL_RCC_GetSYSCLK_Freq+0x24>
			return HSE_RC_FREQ;
 800052e:	4b04      	ldr	r3, [pc, #16]	; (8000540 <MCAL_RCC_GetSYSCLK_Freq+0x34>)
}
 8000530:	4618      	mov	r0, r3
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	40021000 	.word	0x40021000
 800053c:	007a1200 	.word	0x007a1200
 8000540:	00f42400 	.word	0x00f42400

08000544 <MCAL_RCC_GetHCLK_Freq>:

uint32 MCAL_RCC_GetHCLK_Freq(){
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
	uint32 SYSCLK = MCAL_RCC_GetSYSCLK_Freq();
 800054a:	f7ff ffdf 	bl	800050c <MCAL_RCC_GetSYSCLK_Freq>
 800054e:	60f8      	str	r0, [r7, #12]
			1100: SYSCLK divided by 64
			1101: SYSCLK divided by 128
			1110: SYSCLK divided by 256
			1111: SYSCLK divided by 512
	 */
	uint32 AHB_Prescale = ((RCC->CFGR >> 4) & 0xF);
 8000550:	4b09      	ldr	r3, [pc, #36]	; (8000578 <MCAL_RCC_GetHCLK_Freq+0x34>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	091b      	lsrs	r3, r3, #4
 8000556:	f003 030f 	and.w	r3, r3, #15
 800055a:	60bb      	str	r3, [r7, #8]
	uint32 HCLK = ((uint32)SYSCLK >> AHP_Prescaler_Table[AHB_Prescale]);
 800055c:	4a07      	ldr	r2, [pc, #28]	; (800057c <MCAL_RCC_GetHCLK_Freq+0x38>)
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000564:	68fa      	ldr	r2, [r7, #12]
 8000566:	fa22 f303 	lsr.w	r3, r2, r3
 800056a:	607b      	str	r3, [r7, #4]
	return HCLK;
 800056c:	687b      	ldr	r3, [r7, #4]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000
 800057c:	08000c48 	.word	0x08000c48

08000580 <MCAL_RCC_GetPCLK1_Freq>:

uint32 MCAL_RCC_GetPCLK1_Freq(){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
	uint32 HCLK = MCAL_RCC_GetHCLK_Freq();
 8000586:	f7ff ffdd 	bl	8000544 <MCAL_RCC_GetHCLK_Freq>
 800058a:	60f8      	str	r0, [r7, #12]
		100: HCLK divided by 2
		101: HCLK divided by 4
		110: HCLK divided by 8
		111: HCLK divided by 16
	*/
	uint32 ABP1_Prescale = ((RCC->CFGR >> 8) & 0x3);
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <MCAL_RCC_GetPCLK1_Freq+0x34>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	0a1b      	lsrs	r3, r3, #8
 8000592:	f003 0303 	and.w	r3, r3, #3
 8000596:	60bb      	str	r3, [r7, #8]
	uint32 PCLK1 = ((uint32)HCLK >> ABP_Prescaler_Table[ABP1_Prescale]);
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <MCAL_RCC_GetPCLK1_Freq+0x38>)
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	fa22 f303 	lsr.w	r3, r2, r3
 80005a6:	607b      	str	r3, [r7, #4]
	return PCLK1;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000
 80005b8:	08000c88 	.word	0x08000c88

080005bc <MCAL_RCC_GetPCLK2_Freq>:

uint32 MCAL_RCC_GetPCLK2_Freq(){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
	uint32 HCLK = MCAL_RCC_GetHCLK_Freq();
 80005c2:	f7ff ffbf 	bl	8000544 <MCAL_RCC_GetHCLK_Freq>
 80005c6:	60f8      	str	r0, [r7, #12]
		100: HCLK divided by 2
		101: HCLK divided by 4
		110: HCLK divided by 8
		111: HCLK divided by 16
	 */
	uint32 ABP2_Prescale = ((RCC->CFGR >> 11) & 0x3);
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MCAL_RCC_GetPCLK2_Freq+0x34>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	0adb      	lsrs	r3, r3, #11
 80005ce:	f003 0303 	and.w	r3, r3, #3
 80005d2:	60bb      	str	r3, [r7, #8]
	uint32 PCLK2 = ((uint32)HCLK >> ABP_Prescaler_Table[ABP2_Prescale]);
 80005d4:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <MCAL_RCC_GetPCLK2_Freq+0x38>)
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	fa22 f303 	lsr.w	r3, r2, r3
 80005e2:	607b      	str	r3, [r7, #4]
	return PCLK2;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000
 80005f4:	08000c88 	.word	0x08000c88

080005f8 <MCAL_USART_WaitForTc>:
 * @Retval      None
 *
 * @Note        This function is static and intended for internal use only.
 *              It ensures that all data is transmitted before proceeding.
 */
static void MCAL_USART_WaitForTc(USART_Config_t *USART_Config){
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	while (!(READ_BIT(USART_Config->USARTx->SR, 6)));
 8000600:	bf00      	nop
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	099b      	lsrs	r3, r3, #6
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f7      	beq.n	8000602 <MCAL_USART_WaitForTc+0xa>
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <MCAL_USART_SetBaudRate>:
 * @Retval      None
 *
 * @Note        This function is static and intended for internal use only.
 *              The calculation for the baud rate register depends on the clock frequency.
 */
static void MCAL_USART_SetBaudRate(USART_Config_t *USART_Config, uint32 F_CLK){
 800061c:	b480      	push	{r7}
 800061e:	b087      	sub	sp, #28
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	/*
	     * USARTDIV = fCK / (16 * baud_rate)
	     * BRR[15:4] = Mantissa
	     * BRR[3:0] = Fraction
	 */
	uint32 USARTDIV = (F_CLK / (16UL * (USART_Config->baud_rate)));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	691b      	ldr	r3, [r3, #16]
 800062a:	011b      	lsls	r3, r3, #4
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000632:	617b      	str	r3, [r7, #20]
	uint32 USARTDIV_MUL100 = ((F_CLK / (16UL * (USART_Config->baud_rate))) * 100);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	691b      	ldr	r3, [r3, #16]
 8000638:	011b      	lsls	r3, r3, #4
 800063a:	683a      	ldr	r2, [r7, #0]
 800063c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000640:	2264      	movs	r2, #100	; 0x64
 8000642:	fb02 f303 	mul.w	r3, r2, r3
 8000646:	613b      	str	r3, [r7, #16]
	uint16 DIV_Mantissa = USARTDIV;                       // Mantissa part
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	81fb      	strh	r3, [r7, #14]
	uint16 DIV_Mantissa_MUL100 = DIV_Mantissa * 100;
 800064c:	89fb      	ldrh	r3, [r7, #14]
 800064e:	461a      	mov	r2, r3
 8000650:	0092      	lsls	r2, r2, #2
 8000652:	4413      	add	r3, r2
 8000654:	461a      	mov	r2, r3
 8000656:	0091      	lsls	r1, r2, #2
 8000658:	461a      	mov	r2, r3
 800065a:	460b      	mov	r3, r1
 800065c:	4413      	add	r3, r2
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	81bb      	strh	r3, [r7, #12]
	uint8 DIV_Fraction = ((USARTDIV_MUL100 - DIV_Mantissa_MUL100 ) * 16) / 100;       // Function part
 8000662:	89bb      	ldrh	r3, [r7, #12]
 8000664:	693a      	ldr	r2, [r7, #16]
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	4a09      	ldr	r2, [pc, #36]	; (8000690 <MCAL_USART_SetBaudRate+0x74>)
 800066c:	fba2 2303 	umull	r2, r3, r2, r3
 8000670:	095b      	lsrs	r3, r3, #5
 8000672:	72fb      	strb	r3, [r7, #11]

	USART_Config->USARTx->BRR = ((DIV_Mantissa << 4) | (DIV_Fraction & 0xF));
 8000674:	89fb      	ldrh	r3, [r7, #14]
 8000676:	011a      	lsls	r2, r3, #4
 8000678:	7afb      	ldrb	r3, [r7, #11]
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	431a      	orrs	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	609a      	str	r2, [r3, #8]
}
 8000686:	bf00      	nop
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	51eb851f 	.word	0x51eb851f

08000694 <MCAL_USART_GPIO_Set_Pins>:
 * @Retval      None
 *
 * @Note        This function is static and intended for internal use only.
 *              Ensure that the GPIO peripheral is properly initialized before calling this function.
 */
static void MCAL_USART_GPIO_Set_Pins(USART_Config_t *USART_Config) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
    GPIO_PinConfig_t pinConfig;

    if (USART_Config->USARTx == USART1) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a5d      	ldr	r2, [pc, #372]	; (8000818 <MCAL_USART_GPIO_Set_Pins+0x184>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d139      	bne.n	800071a <MCAL_USART_GPIO_Set_Pins+0x86>
        // Configure Tx (PA9 or PB6)
        pinConfig.PinNum = GPIO_PIN9;  // Default: PA9
 80006a6:	2309      	movs	r3, #9
 80006a8:	733b      	strb	r3, [r7, #12]
        pinConfig.PinMode = GPIO_OUTPUT_10MHZ;
 80006aa:	2301      	movs	r3, #1
 80006ac:	737b      	strb	r3, [r7, #13]
        pinConfig.PinCNF = GPIO_CNF_AF_PUSH_PULL_OUTPUT;
 80006ae:	2302      	movs	r3, #2
 80006b0:	73fb      	strb	r3, [r7, #15]
        MCAL_GPIO_Init(GPIOA, &pinConfig);
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	4619      	mov	r1, r3
 80006b8:	4858      	ldr	r0, [pc, #352]	; (800081c <MCAL_USART_GPIO_Set_Pins+0x188>)
 80006ba:	f7ff febd 	bl	8000438 <MCAL_GPIO_Init>

        // Configure Rx (PA10 or PB7)
        pinConfig.PinNum = GPIO_PIN10;  // Default: PA10
 80006be:	230a      	movs	r3, #10
 80006c0:	733b      	strb	r3, [r7, #12]
        pinConfig.PinMode = GPIO_INPUT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	737b      	strb	r3, [r7, #13]
        pinConfig.PinCNF = GPIO_CNF_FLOATING_INPUT;
 80006c6:	2301      	movs	r3, #1
 80006c8:	73fb      	strb	r3, [r7, #15]
        MCAL_GPIO_Init(GPIOA, &pinConfig);
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	4619      	mov	r1, r3
 80006d0:	4852      	ldr	r0, [pc, #328]	; (800081c <MCAL_USART_GPIO_Set_Pins+0x188>)
 80006d2:	f7ff feb1 	bl	8000438 <MCAL_GPIO_Init>

        // Configure CTS (PA11) if enabled
        if (USART_Config->CTS_CTRL == USART_CTS_ENABLED) {
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7b1b      	ldrb	r3, [r3, #12]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d10b      	bne.n	80006f6 <MCAL_USART_GPIO_Set_Pins+0x62>
            pinConfig.PinNum = GPIO_PIN11;  // CTS: PA11
 80006de:	230b      	movs	r3, #11
 80006e0:	733b      	strb	r3, [r7, #12]
            pinConfig.PinMode = GPIO_INPUT;
 80006e2:	2300      	movs	r3, #0
 80006e4:	737b      	strb	r3, [r7, #13]
            pinConfig.PinCNF = GPIO_CNF_FLOATING_INPUT;
 80006e6:	2301      	movs	r3, #1
 80006e8:	73fb      	strb	r3, [r7, #15]
            MCAL_GPIO_Init(GPIOA, &pinConfig);
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	4619      	mov	r1, r3
 80006f0:	484a      	ldr	r0, [pc, #296]	; (800081c <MCAL_USART_GPIO_Set_Pins+0x188>)
 80006f2:	f7ff fea1 	bl	8000438 <MCAL_GPIO_Init>
        }

        // Configure RTS (PA12) if enabled
        if (USART_Config->RTS_CTRL == USART_RTS_ENABLED) {
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	7b5b      	ldrb	r3, [r3, #13]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	f040 8088 	bne.w	8000810 <MCAL_USART_GPIO_Set_Pins+0x17c>
            pinConfig.PinNum = GPIO_PIN12;  // RTS: PA12
 8000700:	230c      	movs	r3, #12
 8000702:	733b      	strb	r3, [r7, #12]
            pinConfig.PinMode = GPIO_OUTPUT_10MHZ;
 8000704:	2301      	movs	r3, #1
 8000706:	737b      	strb	r3, [r7, #13]
            pinConfig.PinCNF = GPIO_CNF_AF_PUSH_PULL_OUTPUT;
 8000708:	2302      	movs	r3, #2
 800070a:	73fb      	strb	r3, [r7, #15]
            MCAL_GPIO_Init(GPIOA, &pinConfig);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4619      	mov	r1, r3
 8000712:	4842      	ldr	r0, [pc, #264]	; (800081c <MCAL_USART_GPIO_Set_Pins+0x188>)
 8000714:	f7ff fe90 	bl	8000438 <MCAL_GPIO_Init>
            pinConfig.PinMode = GPIO_OUTPUT_10MHZ;
            pinConfig.PinCNF = GPIO_CNF_AF_PUSH_PULL_OUTPUT;
            MCAL_GPIO_Init(GPIOB, &pinConfig);
        }
    }
}
 8000718:	e07a      	b.n	8000810 <MCAL_USART_GPIO_Set_Pins+0x17c>
    else if (USART_Config->USARTx == USART2) {
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a40      	ldr	r2, [pc, #256]	; (8000820 <MCAL_USART_GPIO_Set_Pins+0x18c>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d138      	bne.n	8000796 <MCAL_USART_GPIO_Set_Pins+0x102>
        pinConfig.PinNum = GPIO_PIN2;  // Tx: PA2
 8000724:	2302      	movs	r3, #2
 8000726:	733b      	strb	r3, [r7, #12]
        pinConfig.PinMode = GPIO_OUTPUT_10MHZ;
 8000728:	2301      	movs	r3, #1
 800072a:	737b      	strb	r3, [r7, #13]
        pinConfig.PinCNF = GPIO_CNF_AF_PUSH_PULL_OUTPUT;
 800072c:	2302      	movs	r3, #2
 800072e:	73fb      	strb	r3, [r7, #15]
        MCAL_GPIO_Init(GPIOA, &pinConfig);
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	4619      	mov	r1, r3
 8000736:	4839      	ldr	r0, [pc, #228]	; (800081c <MCAL_USART_GPIO_Set_Pins+0x188>)
 8000738:	f7ff fe7e 	bl	8000438 <MCAL_GPIO_Init>
        pinConfig.PinNum = GPIO_PIN3;  // Rx: PA3
 800073c:	2303      	movs	r3, #3
 800073e:	733b      	strb	r3, [r7, #12]
        pinConfig.PinMode = GPIO_INPUT;
 8000740:	2300      	movs	r3, #0
 8000742:	737b      	strb	r3, [r7, #13]
        pinConfig.PinCNF = GPIO_CNF_FLOATING_INPUT;
 8000744:	2301      	movs	r3, #1
 8000746:	73fb      	strb	r3, [r7, #15]
        MCAL_GPIO_Init(GPIOA, &pinConfig);
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	4619      	mov	r1, r3
 800074e:	4833      	ldr	r0, [pc, #204]	; (800081c <MCAL_USART_GPIO_Set_Pins+0x188>)
 8000750:	f7ff fe72 	bl	8000438 <MCAL_GPIO_Init>
        if (USART_Config->CTS_CTRL == USART_CTS_ENABLED) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	7b1b      	ldrb	r3, [r3, #12]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d10b      	bne.n	8000774 <MCAL_USART_GPIO_Set_Pins+0xe0>
            pinConfig.PinNum = GPIO_PIN0;  // CTS: PA0
 800075c:	2300      	movs	r3, #0
 800075e:	733b      	strb	r3, [r7, #12]
            pinConfig.PinMode = GPIO_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	737b      	strb	r3, [r7, #13]
            pinConfig.PinCNF = GPIO_CNF_FLOATING_INPUT;
 8000764:	2301      	movs	r3, #1
 8000766:	73fb      	strb	r3, [r7, #15]
            MCAL_GPIO_Init(GPIOA, &pinConfig);
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	4619      	mov	r1, r3
 800076e:	482b      	ldr	r0, [pc, #172]	; (800081c <MCAL_USART_GPIO_Set_Pins+0x188>)
 8000770:	f7ff fe62 	bl	8000438 <MCAL_GPIO_Init>
        if (USART_Config->RTS_CTRL == USART_RTS_ENABLED) {
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	7b5b      	ldrb	r3, [r3, #13]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d149      	bne.n	8000810 <MCAL_USART_GPIO_Set_Pins+0x17c>
            pinConfig.PinNum = GPIO_PIN1;  // RTS: PA1
 800077c:	2301      	movs	r3, #1
 800077e:	733b      	strb	r3, [r7, #12]
            pinConfig.PinMode = GPIO_OUTPUT_10MHZ;
 8000780:	2301      	movs	r3, #1
 8000782:	737b      	strb	r3, [r7, #13]
            pinConfig.PinCNF = GPIO_CNF_AF_PUSH_PULL_OUTPUT;
 8000784:	2302      	movs	r3, #2
 8000786:	73fb      	strb	r3, [r7, #15]
            MCAL_GPIO_Init(GPIOA, &pinConfig);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4619      	mov	r1, r3
 800078e:	4823      	ldr	r0, [pc, #140]	; (800081c <MCAL_USART_GPIO_Set_Pins+0x188>)
 8000790:	f7ff fe52 	bl	8000438 <MCAL_GPIO_Init>
}
 8000794:	e03c      	b.n	8000810 <MCAL_USART_GPIO_Set_Pins+0x17c>
    else if (USART_Config->USARTx == USART3) {
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a22      	ldr	r2, [pc, #136]	; (8000824 <MCAL_USART_GPIO_Set_Pins+0x190>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d137      	bne.n	8000810 <MCAL_USART_GPIO_Set_Pins+0x17c>
        pinConfig.PinNum = GPIO_PIN10;  // Tx: PB10
 80007a0:	230a      	movs	r3, #10
 80007a2:	733b      	strb	r3, [r7, #12]
        pinConfig.PinMode = GPIO_OUTPUT_10MHZ;
 80007a4:	2301      	movs	r3, #1
 80007a6:	737b      	strb	r3, [r7, #13]
        pinConfig.PinCNF = GPIO_CNF_AF_PUSH_PULL_OUTPUT;
 80007a8:	2302      	movs	r3, #2
 80007aa:	73fb      	strb	r3, [r7, #15]
        MCAL_GPIO_Init(GPIOB, &pinConfig);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4619      	mov	r1, r3
 80007b2:	481d      	ldr	r0, [pc, #116]	; (8000828 <MCAL_USART_GPIO_Set_Pins+0x194>)
 80007b4:	f7ff fe40 	bl	8000438 <MCAL_GPIO_Init>
        pinConfig.PinNum = GPIO_PIN11;  // Rx: PB11
 80007b8:	230b      	movs	r3, #11
 80007ba:	733b      	strb	r3, [r7, #12]
        pinConfig.PinMode = GPIO_INPUT;
 80007bc:	2300      	movs	r3, #0
 80007be:	737b      	strb	r3, [r7, #13]
        pinConfig.PinCNF = GPIO_CNF_FLOATING_INPUT;
 80007c0:	2301      	movs	r3, #1
 80007c2:	73fb      	strb	r3, [r7, #15]
        MCAL_GPIO_Init(GPIOB, &pinConfig);
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4619      	mov	r1, r3
 80007ca:	4817      	ldr	r0, [pc, #92]	; (8000828 <MCAL_USART_GPIO_Set_Pins+0x194>)
 80007cc:	f7ff fe34 	bl	8000438 <MCAL_GPIO_Init>
        if (USART_Config->CTS_CTRL == USART_CTS_ENABLED) {
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	7b1b      	ldrb	r3, [r3, #12]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d10b      	bne.n	80007f0 <MCAL_USART_GPIO_Set_Pins+0x15c>
            pinConfig.PinNum = GPIO_PIN13;  // CTS: PB13
 80007d8:	230d      	movs	r3, #13
 80007da:	733b      	strb	r3, [r7, #12]
            pinConfig.PinMode = GPIO_INPUT;
 80007dc:	2300      	movs	r3, #0
 80007de:	737b      	strb	r3, [r7, #13]
            pinConfig.PinCNF = GPIO_CNF_FLOATING_INPUT;
 80007e0:	2301      	movs	r3, #1
 80007e2:	73fb      	strb	r3, [r7, #15]
            MCAL_GPIO_Init(GPIOB, &pinConfig);
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	4619      	mov	r1, r3
 80007ea:	480f      	ldr	r0, [pc, #60]	; (8000828 <MCAL_USART_GPIO_Set_Pins+0x194>)
 80007ec:	f7ff fe24 	bl	8000438 <MCAL_GPIO_Init>
        if (USART_Config->RTS_CTRL == USART_RTS_ENABLED) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	7b5b      	ldrb	r3, [r3, #13]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d10b      	bne.n	8000810 <MCAL_USART_GPIO_Set_Pins+0x17c>
            pinConfig.PinNum = GPIO_PIN14;  // RTS: PB14
 80007f8:	230e      	movs	r3, #14
 80007fa:	733b      	strb	r3, [r7, #12]
            pinConfig.PinMode = GPIO_OUTPUT_10MHZ;
 80007fc:	2301      	movs	r3, #1
 80007fe:	737b      	strb	r3, [r7, #13]
            pinConfig.PinCNF = GPIO_CNF_AF_PUSH_PULL_OUTPUT;
 8000800:	2302      	movs	r3, #2
 8000802:	73fb      	strb	r3, [r7, #15]
            MCAL_GPIO_Init(GPIOB, &pinConfig);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4619      	mov	r1, r3
 800080a:	4807      	ldr	r0, [pc, #28]	; (8000828 <MCAL_USART_GPIO_Set_Pins+0x194>)
 800080c:	f7ff fe14 	bl	8000438 <MCAL_GPIO_Init>
}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40013800 	.word	0x40013800
 800081c:	40010800 	.word	0x40010800
 8000820:	40004400 	.word	0x40004400
 8000824:	40004800 	.word	0x40004800
 8000828:	40010c00 	.word	0x40010c00

0800082c <MCAL_USART_Init>:
 *
 * @Retval      None
 *
 * @Note        This function must be called before using any USART transmit or receive APIs.
 */
void MCAL_USART_Init(USART_Config_t *USART_Config){
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	uint32 F_CLK;

	// Enable the clock for configured USART (1, 2, 3)
	if(USART_Config->USARTx == USART1){
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a73      	ldr	r2, [pc, #460]	; (8000a08 <MCAL_USART_Init+0x1dc>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d10c      	bne.n	8000858 <MCAL_USART_Init+0x2c>
		USART1_CLK_EN();
 800083e:	4b73      	ldr	r3, [pc, #460]	; (8000a0c <MCAL_USART_Init+0x1e0>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a72      	ldr	r2, [pc, #456]	; (8000a0c <MCAL_USART_Init+0x1e0>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6193      	str	r3, [r2, #24]
		// PCLK2 for USART1
		Global_USART_Config[0] = USART_Config;
 800084a:	4a71      	ldr	r2, [pc, #452]	; (8000a10 <MCAL_USART_Init+0x1e4>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6013      	str	r3, [r2, #0]
		F_CLK = MCAL_RCC_GetPCLK2_Freq();
 8000850:	f7ff feb4 	bl	80005bc <MCAL_RCC_GetPCLK2_Freq>
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	e022      	b.n	800089e <MCAL_USART_Init+0x72>
	}
	else if(USART_Config->USARTx == USART2){
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a6d      	ldr	r2, [pc, #436]	; (8000a14 <MCAL_USART_Init+0x1e8>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d10c      	bne.n	800087c <MCAL_USART_Init+0x50>
		USART2_CLK_EN();
 8000862:	4b6a      	ldr	r3, [pc, #424]	; (8000a0c <MCAL_USART_Init+0x1e0>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a69      	ldr	r2, [pc, #420]	; (8000a0c <MCAL_USART_Init+0x1e0>)
 8000868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800086c:	6193      	str	r3, [r2, #24]
		// PCLK1 for USART2
		F_CLK = MCAL_RCC_GetPCLK1_Freq();
 800086e:	f7ff fe87 	bl	8000580 <MCAL_RCC_GetPCLK1_Freq>
 8000872:	60f8      	str	r0, [r7, #12]
		Global_USART_Config[1] = USART_Config;
 8000874:	4a66      	ldr	r2, [pc, #408]	; (8000a10 <MCAL_USART_Init+0x1e4>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6053      	str	r3, [r2, #4]
 800087a:	e010      	b.n	800089e <MCAL_USART_Init+0x72>
	}
	else if(USART_Config->USARTx == USART3){
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a65      	ldr	r2, [pc, #404]	; (8000a18 <MCAL_USART_Init+0x1ec>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d10b      	bne.n	800089e <MCAL_USART_Init+0x72>
		USART3_CLK_EN();
 8000886:	4b61      	ldr	r3, [pc, #388]	; (8000a0c <MCAL_USART_Init+0x1e0>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	4a60      	ldr	r2, [pc, #384]	; (8000a0c <MCAL_USART_Init+0x1e0>)
 800088c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000890:	6193      	str	r3, [r2, #24]
		// PCLK1 for USART3
		F_CLK = MCAL_RCC_GetPCLK1_Freq();
 8000892:	f7ff fe75 	bl	8000580 <MCAL_RCC_GetPCLK1_Freq>
 8000896:	60f8      	str	r0, [r7, #12]
		Global_USART_Config[2] = USART_Config;
 8000898:	4a5d      	ldr	r2, [pc, #372]	; (8000a10 <MCAL_USART_Init+0x1e4>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6093      	str	r3, [r2, #8]
	}

	// Configure the GPIO pins for Tx, Rx, CTS, RTS
	MCAL_USART_GPIO_Set_Pins(USART_Config);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff fef8 	bl	8000694 <MCAL_USART_GPIO_Set_Pins>

	// Enable the USART by writing the UE bit in USART_CR1 register to 1
	SET_BIT(USART_Config->USARTx->CR1, 13);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	68da      	ldr	r2, [r3, #12]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80008b2:	60da      	str	r2, [r3, #12]

	// Disable/Enable TX/RX
	if(USART_Config->TxMode == USART_TX_ENABLED)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	7a1b      	ldrb	r3, [r3, #8]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d107      	bne.n	80008cc <MCAL_USART_Init+0xa0>
		SET_BIT(USART_Config->USARTx->CR1, 3);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	68da      	ldr	r2, [r3, #12]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f042 0208 	orr.w	r2, r2, #8
 80008ca:	60da      	str	r2, [r3, #12]
	if(USART_Config->TxMode == USART_RX_ENABLED)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	7a1b      	ldrb	r3, [r3, #8]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d107      	bne.n	80008e4 <MCAL_USART_Init+0xb8>
		SET_BIT(USART_Config->USARTx->CR1, 2);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	68da      	ldr	r2, [r3, #12]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f042 0204 	orr.w	r2, r2, #4
 80008e2:	60da      	str	r2, [r3, #12]

	// Set the Word Length
	if(USART_Config->wordLength == USART_9_BIT_WORD_LENGTH)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	791b      	ldrb	r3, [r3, #4]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d108      	bne.n	80008fe <MCAL_USART_Init+0xd2>
		SET_BIT(USART_Config->USARTx->CR1, 12);   // 9 bit data
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	68da      	ldr	r2, [r3, #12]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	e007      	b.n	800090e <MCAL_USART_Init+0xe2>
	else
		CLEAR_BIT(USART_Config->USARTx->CR1, 12); // 8 bit data
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	68da      	ldr	r2, [r3, #12]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800090c:	60da      	str	r2, [r3, #12]

	// Enable/Disable Parity bit
	if(USART_Config->parityMode == USART_ENABLED_PARITY)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	795b      	ldrb	r3, [r3, #5]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d108      	bne.n	8000928 <MCAL_USART_Init+0xfc>
		SET_BIT(USART_Config->USARTx->CR1, 10);    // Enable Parity
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	68da      	ldr	r2, [r3, #12]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	e007      	b.n	8000938 <MCAL_USART_Init+0x10c>
	else
		CLEAR_BIT(USART_Config->USARTx->CR1, 10);  // Disable Parity
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	68da      	ldr	r2, [r3, #12]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000936:	60da      	str	r2, [r3, #12]

	// Enable/Disable Hardware Flow Control (CTS, RTS)
	if(USART_Config->CTS_CTRL == USART_CTS_ENABLED)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7b1b      	ldrb	r3, [r3, #12]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d107      	bne.n	8000950 <MCAL_USART_Init+0x124>
		SET_BIT(USART_Config->USARTx->CR3, 9);    // Enable CTS Pin
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	695a      	ldr	r2, [r3, #20]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800094e:	615a      	str	r2, [r3, #20]
	if(USART_Config->RTS_CTRL == USART_RTS_ENABLED)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	7b5b      	ldrb	r3, [r3, #13]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d107      	bne.n	8000968 <MCAL_USART_Init+0x13c>
		SET_BIT(USART_Config->USARTx->CR3, 8);  // Enable RTS Pin
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	695a      	ldr	r2, [r3, #20]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000966:	615a      	str	r2, [r3, #20]

	// Configure the number of stop bits
	USART_Config->USARTx->CR2 |= (USART_Config->stopBits << 12);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	691a      	ldr	r2, [r3, #16]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	79db      	ldrb	r3, [r3, #7]
 8000972:	031b      	lsls	r3, r3, #12
 8000974:	4619      	mov	r1, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	430a      	orrs	r2, r1
 800097c:	611a      	str	r2, [r3, #16]

	// Configure the BaudRate
	MCAL_USART_SetBaudRate(USART_Config, F_CLK);
 800097e:	68f9      	ldr	r1, [r7, #12]
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff fe4b 	bl	800061c <MCAL_USART_SetBaudRate>

	// Enable/Disable Interrupt
	if(USART_Config->Tx_Interrupt_Enable == USART_TX_INTERRUPT_ENABLED || USART_Config->Rx_Interrupt_Enable == USART_RX_INTERRUPT_ENABLED){
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	7a9b      	ldrb	r3, [r3, #10]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d003      	beq.n	8000996 <MCAL_USART_Init+0x16a>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	7adb      	ldrb	r3, [r3, #11]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d134      	bne.n	8000a00 <MCAL_USART_Init+0x1d4>
		// Enable NVIC for USARTx IRQ
		if(USART_Config->USARTx == USART1){
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <MCAL_USART_Init+0x1dc>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d104      	bne.n	80009aa <MCAL_USART_Init+0x17e>
			NVIC_IRQ_32_63_ENABLE(USART1_IRQ);
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <MCAL_USART_Init+0x1f0>)
 80009a2:	4a1e      	ldr	r2, [pc, #120]	; (8000a1c <MCAL_USART_Init+0x1f0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	e012      	b.n	80009d0 <MCAL_USART_Init+0x1a4>
		}
		else if(USART_Config->USARTx == USART2){
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a19      	ldr	r2, [pc, #100]	; (8000a14 <MCAL_USART_Init+0x1e8>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d104      	bne.n	80009be <MCAL_USART_Init+0x192>
			NVIC_IRQ_32_63_ENABLE(USART2_IRQ);
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MCAL_USART_Init+0x1f0>)
 80009b6:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <MCAL_USART_Init+0x1f0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	6013      	str	r3, [r2, #0]
 80009bc:	e008      	b.n	80009d0 <MCAL_USART_Init+0x1a4>
		}
		else if(USART_Config->USARTx == USART3){
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <MCAL_USART_Init+0x1ec>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d103      	bne.n	80009d0 <MCAL_USART_Init+0x1a4>
			NVIC_IRQ_32_63_ENABLE(USART3_IRQ);
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MCAL_USART_Init+0x1f0>)
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <MCAL_USART_Init+0x1f0>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6013      	str	r3, [r2, #0]
		}

		// Enable Tx/Rx Interrupt Based on configuration
		if(USART_Config->Tx_Interrupt_Enable == USART_TX_INTERRUPT_ENABLED)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7a9b      	ldrb	r3, [r3, #10]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d107      	bne.n	80009e8 <MCAL_USART_Init+0x1bc>
			SET_BIT(USART_Config->USARTx->CR1, 6);    // TCIE: Transmission complete interrupt enable
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	68da      	ldr	r2, [r3, #12]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009e6:	60da      	str	r2, [r3, #12]
		if(USART_Config->Rx_Interrupt_Enable == USART_RX_INTERRUPT_ENABLED)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	7adb      	ldrb	r3, [r3, #11]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d107      	bne.n	8000a00 <MCAL_USART_Init+0x1d4>
			SET_BIT(USART_Config->USARTx->CR1, 5);    // Bit 5 RXNEIE: RXNE interrupt enable
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	68da      	ldr	r2, [r3, #12]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f042 0220 	orr.w	r2, r2, #32
 80009fe:	60da      	str	r2, [r3, #12]
	}
}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40013800 	.word	0x40013800
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	2000005c 	.word	0x2000005c
 8000a14:	40004400 	.word	0x40004400
 8000a18:	40004800 	.word	0x40004800
 8000a1c:	e000e104 	.word	0xe000e104

08000a20 <MCAL_USART_TransmitByte>:
 *
 * @Retval      None
 *
 * @Note        Ensure that the USART peripheral is initialized before calling this function.
 */
void MCAL_USART_TransmitByte(USART_Config_t *USART_Config, uint16 data){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	807b      	strh	r3, [r7, #2]
	// Wait until the Transmit Data Register (TXE) is empty
	while (!(READ_BIT(USART_Config->USARTx->SR, 7)));
 8000a2c:	bf00      	nop
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	09db      	lsrs	r3, r3, #7
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d0f7      	beq.n	8000a2e <MCAL_USART_TransmitByte+0xe>

	// Load the data into the Data Register (DR) to start transmission
	USART_Config->USARTx->DR = data;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	887a      	ldrh	r2, [r7, #2]
 8000a44:	605a      	str	r2, [r3, #4]

	// Optionally wait for Transmission Complete (TC) if required
	// (e.g., if this is the last byte of the transmission)
	MCAL_USART_WaitForTc(USART_Config);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff fdd6 	bl	80005f8 <MCAL_USART_WaitForTc>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <MCAL_USART_RecieveByte>:
 *
 * @Retval      None
 *
 * @Note        Ensure that the USART peripheral is initialized before calling this function.
 */
uint16 MCAL_USART_RecieveByte(USART_Config_t *USART_Config){
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
    uint16 Received;

    // Wait until RXNE (Read Data Register Not Empty) flag is set
    while (!(READ_BIT(USART_Config->USARTx->SR, 5)));
 8000a5c:	bf00      	nop
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	095b      	lsrs	r3, r3, #5
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d0f7      	beq.n	8000a5e <MCAL_USART_RecieveByte+0xa>

    // Check if Parity is enabled
    if (USART_Config->parityMode == USART_ENABLED_PARITY) {
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	795b      	ldrb	r3, [r3, #5]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d112      	bne.n	8000a9c <MCAL_USART_RecieveByte+0x48>
        if (USART_Config->wordLength == USART_9_BIT_WORD_LENGTH) {
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	791b      	ldrb	r3, [r3, #4]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d106      	bne.n	8000a8c <MCAL_USART_RecieveByte+0x38>
            // Parity enabled, 9-bit data (upper bit might contain parity info)
            Received = (uint16)(USART_Config->USARTx->DR & 0xFF);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	81fb      	strh	r3, [r7, #14]
 8000a8a:	e016      	b.n	8000aba <MCAL_USART_RecieveByte+0x66>
        } else {
            // Parity enabled, 8-bit data (parity occupies the 9th bit, so mask to 7 bits)
            Received = (uint16)(USART_Config->USARTx->DR & 0x7F);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a98:	81fb      	strh	r3, [r7, #14]
 8000a9a:	e00e      	b.n	8000aba <MCAL_USART_RecieveByte+0x66>
        }
    } else {
        // Parity disabled
        if (USART_Config->wordLength == USART_9_BIT_WORD_LENGTH) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	791b      	ldrb	r3, [r3, #4]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d104      	bne.n	8000aae <MCAL_USART_RecieveByte+0x5a>
            // Parity disabled, full 9-bit data
            Received = (uint16)(USART_Config->USARTx->DR);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	81fb      	strh	r3, [r7, #14]
 8000aac:	e005      	b.n	8000aba <MCAL_USART_RecieveByte+0x66>
        } else {
            // Parity disabled, 8-bit data
            Received = (uint16)(USART_Config->USARTx->DR & 0xFF);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	81fb      	strh	r3, [r7, #14]
        }
    }

    return Received;
 8000aba:	89fb      	ldrh	r3, [r7, #14]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
	...

08000ac8 <USART1_IRQHandler>:

/* ================================================================ */
/* ============================= ISR ============================== */
/* ================================================================ */

void USART1_IRQHandler(void){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->USARTx_CallBackFunction();
 8000acc:	4b02      	ldr	r3, [pc, #8]	; (8000ad8 <USART1_IRQHandler+0x10>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4798      	blx	r3
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	2000005c 	.word	0x2000005c

08000adc <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->USARTx_CallBackFunction();
 8000ae0:	4b02      	ldr	r3, [pc, #8]	; (8000aec <USART2_IRQHandler+0x10>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	4798      	blx	r3
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2000005c 	.word	0x2000005c

08000af0 <USART3_IRQHandler>:

void USART3_IRQHandler(void){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->USARTx_CallBackFunction();
 8000af4:	4b02      	ldr	r3, [pc, #8]	; (8000b00 <USART3_IRQHandler+0x10>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	4798      	blx	r3
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	2000005c 	.word	0x2000005c

08000b04 <main>:
void clock_Init();



int main(void)
{
 8000b04:	b5b0      	push	{r4, r5, r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
	USART_Config_t UART1_Config = {
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <main+0x40>)
 8000b0c:	1d3c      	adds	r4, r7, #4
 8000b0e:	461d      	mov	r5, r3
 8000b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b18:	e884 0003 	stmia.w	r4, {r0, r1}
	    .USARTx_CallBackFunction = NULL              // No callback function
	};


	// Initializing the clock
	clock_Init();
 8000b1c:	f000 f814 	bl	8000b48 <clock_Init>
	// USART Init
	MCAL_USART_Init(&UART1_Config);
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fe82 	bl	800082c <MCAL_USART_Init>


	while(1)
	{
		uint16 DataRecieved;
		DataRecieved = MCAL_USART_RecieveByte(&UART1_Config);
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff ff92 	bl	8000a54 <MCAL_USART_RecieveByte>
 8000b30:	4603      	mov	r3, r0
 8000b32:	83fb      	strh	r3, [r7, #30]
		MCAL_USART_TransmitByte(&UART1_Config, DataRecieved);
 8000b34:	8bfa      	ldrh	r2, [r7, #30]
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff70 	bl	8000a20 <MCAL_USART_TransmitByte>
	{
 8000b40:	e7f2      	b.n	8000b28 <main+0x24>
 8000b42:	bf00      	nop
 8000b44:	08000c30 	.word	0x08000c30

08000b48 <clock_Init>:
	}
}

void clock_Init(){
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
	GPIOA_CLK_EN(); // IO port A clock enabled
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <clock_Init+0x30>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a09      	ldr	r2, [pc, #36]	; (8000b78 <clock_Init+0x30>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	6193      	str	r3, [r2, #24]
	GPIOB_CLK_EN(); // IO port B clock enabled
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <clock_Init+0x30>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <clock_Init+0x30>)
 8000b5e:	f043 0308 	orr.w	r3, r3, #8
 8000b62:	6193      	str	r3, [r2, #24]
	AFIO_CLK_EN();  // AFIO cock enabled
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <clock_Init+0x30>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	4a03      	ldr	r2, [pc, #12]	; (8000b78 <clock_Init+0x30>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6193      	str	r3, [r2, #24]
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	40021000 	.word	0x40021000

08000b7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b7e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b80:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b84:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b86:	490d      	ldr	r1, [pc, #52]	; (8000bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <LoopForever+0xe>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	; (8000bc8 <LoopForever+0x16>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000baa:	f000 f811 	bl	8000bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bae:	f7ff ffa9 	bl	8000b04 <main>

08000bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb2:	e7fe      	b.n	8000bb2 <LoopForever>
  ldr   r0, =_estack
 8000bb4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000bc0:	08000cb0 	.word	0x08000cb0
  ldr r2, =_sbss
 8000bc4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000bc8:	20000068 	.word	0x20000068

08000bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_2_IRQHandler>
	...

08000bd0 <__libc_init_array>:
 8000bd0:	b570      	push	{r4, r5, r6, lr}
 8000bd2:	2500      	movs	r5, #0
 8000bd4:	4e0c      	ldr	r6, [pc, #48]	; (8000c08 <__libc_init_array+0x38>)
 8000bd6:	4c0d      	ldr	r4, [pc, #52]	; (8000c0c <__libc_init_array+0x3c>)
 8000bd8:	1ba4      	subs	r4, r4, r6
 8000bda:	10a4      	asrs	r4, r4, #2
 8000bdc:	42a5      	cmp	r5, r4
 8000bde:	d109      	bne.n	8000bf4 <__libc_init_array+0x24>
 8000be0:	f000 f81a 	bl	8000c18 <_init>
 8000be4:	2500      	movs	r5, #0
 8000be6:	4e0a      	ldr	r6, [pc, #40]	; (8000c10 <__libc_init_array+0x40>)
 8000be8:	4c0a      	ldr	r4, [pc, #40]	; (8000c14 <__libc_init_array+0x44>)
 8000bea:	1ba4      	subs	r4, r4, r6
 8000bec:	10a4      	asrs	r4, r4, #2
 8000bee:	42a5      	cmp	r5, r4
 8000bf0:	d105      	bne.n	8000bfe <__libc_init_array+0x2e>
 8000bf2:	bd70      	pop	{r4, r5, r6, pc}
 8000bf4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bf8:	4798      	blx	r3
 8000bfa:	3501      	adds	r5, #1
 8000bfc:	e7ee      	b.n	8000bdc <__libc_init_array+0xc>
 8000bfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c02:	4798      	blx	r3
 8000c04:	3501      	adds	r5, #1
 8000c06:	e7f2      	b.n	8000bee <__libc_init_array+0x1e>
 8000c08:	08000ca8 	.word	0x08000ca8
 8000c0c:	08000ca8 	.word	0x08000ca8
 8000c10:	08000ca8 	.word	0x08000ca8
 8000c14:	08000cac 	.word	0x08000cac

08000c18 <_init>:
 8000c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c1a:	bf00      	nop
 8000c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c1e:	bc08      	pop	{r3}
 8000c20:	469e      	mov	lr, r3
 8000c22:	4770      	bx	lr

08000c24 <_fini>:
 8000c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c26:	bf00      	nop
 8000c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c2a:	bc08      	pop	{r3}
 8000c2c:	469e      	mov	lr, r3
 8000c2e:	4770      	bx	lr
