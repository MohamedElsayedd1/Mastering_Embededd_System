
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005e6  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000005e6  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  00000615  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000631  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000023c8  00000000  00000000  00000779  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a89  00000000  00000000  00002b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ba8  00000000  00000000  000035ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  00004174  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000232  00000000  00000000  00004484  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f54  00000000  00000000  000046b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  0000560a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000544  00000544  000005d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005704  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.lcd_send_4bit 00000010  0000051c  0000051c  000005b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_send_EN 00000026  0000047c  0000047c  00000510  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_send_command 00000028  0000042c  0000042c  000004c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_initialize 0000009c  00000294  00000294  00000328  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_send_char_data 00000028  00000454  00000454  000004e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_set_cursor_pos 0000003e  000003b8  000003b8  0000044c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.lcd_send_char_data_pos 00000016  000004f0  000004f0  00000584  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.lcd_send_string 0000001a  000004a2  000004a2  00000536  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.lcd_send_string_pos 0000001a  000004bc  000004bc  00000550  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .progmemx.data 00000017  000000ae  000000ae  00000142  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .text.main    00000088  00000330  00000330  000003c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.GPIO_InitPin 000000da  000001ba  000001ba  0000024e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.SPI_init 00000036  000003f6  000003f6  0000048a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.SPI_transmit 00000008  0000052c  0000052c  000005c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.SPI_receive 00000008  00000534  00000534  000005c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.UART_ReceiveByte 00000008  0000053c  0000053c  000005d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .progmemx.data 00000015  000000c5  000000c5  00000159  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 31 .text.__vector_13 000000e0  000000da  000000da  0000016e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .bss.buffer_index 00000001  00800074  00800074  000005e6  2**0
                  ALLOC
 33 .bss.uart_buffer 00000014  00800060  00800060  000005e6  2**0
                  ALLOC
 34 .text.libgcc  0000001a  000004d6  000004d6  0000056a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_fini 00000002  0000054c  0000054c  000005e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__dummy_funcs_on_exit 00000002  0000054e  0000054e  000005e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__dummy_simulator_exit 00000002  00000550  00000550  000005e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.exit    00000016  00000506  00000506  0000059a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text._Exit   00000004  00000548  00000548  000005dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>
   8:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>
   c:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>
  10:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>
  14:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>
  18:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>
  1c:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>
  20:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>
  24:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>
  28:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>
  2c:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>
  30:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>
  34:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_13>
  38:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>
  3c:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>
  40:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>
  44:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>
  48:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>
  4c:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>
  50:	0c 94 a2 02 	jmp	0x544	; 0x544 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 75       	andi	r16, 0x50	; 80
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 98 01 	call	0x330	; 0x330 <main>
  a6:	0c 94 83 02 	jmp	0x506	; 0x506 <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

00000544 <__bad_interrupt>:
 544:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_send_4bit:

0000051c <lcd_send_4bit>:
static void lcd_send_4bit(uint8_t command);
static void lcd_send_EN();

static void lcd_send_4bit(uint8_t command) {
	// Clear Lower Nipple First
	LCD_DATA_PORT &= ~(0x0F << 0);
 51c:	9b b3       	in	r25, 0x1b	; 27
 51e:	90 7f       	andi	r25, 0xF0	; 240
 520:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA_PORT |= (command & 0x0F);
 522:	9b b3       	in	r25, 0x1b	; 27
 524:	8f 70       	andi	r24, 0x0F	; 15
 526:	98 2b       	or	r25, r24
 528:	9b bb       	out	0x1b, r25	; 27
 52a:	08 95       	ret

Disassembly of section .text.lcd_send_EN:

0000047c <lcd_send_EN>:
}

static void lcd_send_EN() {
	LCD_CRTL_PORT |= (1 << EN);    // EN = High
 47c:	88 b3       	in	r24, 0x18	; 24
 47e:	82 60       	ori	r24, 0x02	; 2
 480:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 482:	81 ee       	ldi	r24, 0xE1	; 225
 484:	94 e0       	ldi	r25, 0x04	; 4
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	f1 f7       	brne	.-4      	; 0x486 <lcd_send_EN+0xa>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <lcd_send_EN+0x10>
 48c:	00 00       	nop
	_delay_ms(5);                  // Small delay
	LCD_CRTL_PORT &= ~(1 << EN);   // EN = Low
 48e:	88 b3       	in	r24, 0x18	; 24
 490:	8d 7f       	andi	r24, 0xFD	; 253
 492:	88 bb       	out	0x18, r24	; 24
 494:	81 ee       	ldi	r24, 0xE1	; 225
 496:	94 e0       	ldi	r25, 0x04	; 4
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <lcd_send_EN+0x1c>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <lcd_send_EN+0x22>
 49e:	00 00       	nop
 4a0:	08 95       	ret

Disassembly of section .text.lcd_send_command:

0000042c <lcd_send_command>:
	_delay_ms(1);
	lcd_send_command(_LCD_DDRAM_START);
	_delay_ms(1);
}

void lcd_send_command(uint8_t command) {
 42c:	cf 93       	push	r28
 42e:	c8 2f       	mov	r28, r24
	// Set RS = 0 for command mode
	LCD_CRTL_PORT &= ~(1 << RS);
 430:	88 b3       	in	r24, 0x18	; 24
 432:	8e 7f       	andi	r24, 0xFE	; 254
 434:	88 bb       	out	0x18, r24	; 24

	#if LCD_MODE == LCD_4BIT_MODE
	// Send Higher Nibble first
	lcd_send_4bit((command >> 4) & 0x0F);
 436:	8c 2f       	mov	r24, r28
 438:	82 95       	swap	r24
 43a:	8f 70       	andi	r24, 0x0F	; 15
 43c:	0e 94 8e 02 	call	0x51c	; 0x51c <lcd_send_4bit>
	lcd_send_EN();  // Enable pulse
 440:	0e 94 3e 02 	call	0x47c	; 0x47c <lcd_send_EN>
	// Send Lower Nibble
	lcd_send_4bit(command & 0x0F);
 444:	8c 2f       	mov	r24, r28
 446:	8f 70       	andi	r24, 0x0F	; 15
 448:	0e 94 8e 02 	call	0x51c	; 0x51c <lcd_send_4bit>
	lcd_send_EN();  // Enable pulse
 44c:	0e 94 3e 02 	call	0x47c	; 0x47c <lcd_send_EN>
	#if LCD_MODE == LCD_8BIT_MODE
	// Send full 8-bit command
	LCD_DATA_PORT = command;
	lcd_send_EN();  // Enable pulse
	#endif
}
 450:	cf 91       	pop	r28
 452:	08 95       	ret

Disassembly of section .text.lcd_initialize:

00000294 <lcd_initialize>:
	_delay_ms(5);
}

void lcd_initialize() {
	// Set LCD control pins as output
	LCD_CRTL_DIRECTION |= (1 << RS);
 294:	87 b3       	in	r24, 0x17	; 23
 296:	81 60       	ori	r24, 0x01	; 1
 298:	87 bb       	out	0x17, r24	; 23
	LCD_CRTL_DIRECTION |= (1 << EN);
 29a:	87 b3       	in	r24, 0x17	; 23
 29c:	82 60       	ori	r24, 0x02	; 2
 29e:	87 bb       	out	0x17, r24	; 23
	LCD_CRTL_PORT &= ~(1 << RS); // RS = Low
 2a0:	88 b3       	in	r24, 0x18	; 24
 2a2:	8e 7f       	andi	r24, 0xFE	; 254
 2a4:	88 bb       	out	0x18, r24	; 24
	LCD_CRTL_PORT &= ~(1 << EN); // EN = Low
 2a6:	88 b3       	in	r24, 0x18	; 24
 2a8:	8d 7f       	andi	r24, 0xFD	; 253
 2aa:	88 bb       	out	0x18, r24	; 24

	#if LCD_MODE == LCD_4BIT_MODE
	// Set LCD pins for 4-bit mode
	LCD_DIRECTION_PORT = 0x0F;  // Set lower 4 bits for data pins as output
 2ac:	8f e0       	ldi	r24, 0x0F	; 15
 2ae:	8a bb       	out	0x1a, r24	; 26
	LCD_DATA_PORT &= 0xF0;       // Clear lower 4 bits
 2b0:	8b b3       	in	r24, 0x1b	; 27
 2b2:	80 7f       	andi	r24, 0xF0	; 240
 2b4:	8b bb       	out	0x1b, r24	; 27
 2b6:	87 e8       	ldi	r24, 0x87	; 135
 2b8:	93 e1       	ldi	r25, 0x13	; 19
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_initialize+0x26>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <lcd_initialize+0x2c>
 2c0:	00 00       	nop

	// Initial delay for LCD power-up
	_delay_ms(20);

	// Function Set: 4-bit mode, 2 lines, 5x8 dots
	lcd_send_command(_LCD_RETURN_HOME);  // Initialize LCD to 4-bit mode
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_send_command>
 2c8:	81 ee       	ldi	r24, 0xE1	; 225
 2ca:	94 e0       	ldi	r25, 0x04	; 4
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <lcd_initialize+0x38>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <lcd_initialize+0x3e>
 2d2:	00 00       	nop
	_delay_ms(5);
	lcd_send_command(_LCD_4BIT_MODE_2LINE);  // Function Set: 4-bit, 2 lines, 5x8 font
 2d4:	88 e2       	ldi	r24, 0x28	; 40
 2d6:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_send_command>
 2da:	81 ee       	ldi	r24, 0xE1	; 225
 2dc:	94 e0       	ldi	r25, 0x04	; 4
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <lcd_initialize+0x4a>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <lcd_initialize+0x50>
 2e4:	00 00       	nop
	lcd_send_command(_LCD_8BIT_MODE_2LINE);
	#endif

	_delay_ms(5);  // Wait for initialization
	// Display on, cursor off
	lcd_send_command(_LCD_CURSOR_OFF_DISPLAY_ON);
 2e6:	8c e0       	ldi	r24, 0x0C	; 12
 2e8:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_send_command>
 2ec:	89 ef       	ldi	r24, 0xF9	; 249
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <lcd_initialize+0x5c>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <lcd_initialize+0x62>
 2f6:	00 00       	nop
	_delay_ms(1);
	// Clear the LCD and return home
	lcd_send_command(_LCD_CLEAR);
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_send_command>
 2fe:	83 ef       	ldi	r24, 0xF3	; 243
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <lcd_initialize+0x6e>
 306:	00 c0       	rjmp	.+0      	; 0x308 <lcd_initialize+0x74>
 308:	00 00       	nop
	_delay_ms(2);
	// Increment cursor without shifting
	lcd_send_command(_LCD_INC_SHIFT_OFF);
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_send_command>
 310:	89 ef       	ldi	r24, 0xF9	; 249
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <lcd_initialize+0x80>
 318:	00 c0       	rjmp	.+0      	; 0x31a <lcd_initialize+0x86>
 31a:	00 00       	nop
	_delay_ms(1);
	lcd_send_command(_LCD_DDRAM_START);
 31c:	80 e8       	ldi	r24, 0x80	; 128
 31e:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_send_command>
 322:	89 ef       	ldi	r24, 0xF9	; 249
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <lcd_initialize+0x92>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <lcd_initialize+0x98>
 32c:	00 00       	nop
 32e:	08 95       	ret

Disassembly of section .text.lcd_send_char_data:

00000454 <lcd_send_char_data>:
	LCD_DATA_PORT = command;
	lcd_send_EN();  // Enable pulse
	#endif
}

void lcd_send_char_data(uint8_t data) {
 454:	cf 93       	push	r28
 456:	c8 2f       	mov	r28, r24
	// Set RS = 1 for data mode
	LCD_CRTL_PORT |= (1 << RS);
 458:	88 b3       	in	r24, 0x18	; 24
 45a:	81 60       	ori	r24, 0x01	; 1
 45c:	88 bb       	out	0x18, r24	; 24

	#if LCD_MODE == LCD_4BIT_MODE
	// Send Higher Nibble first
	lcd_send_4bit((data >> 4) & 0x0F);
 45e:	8c 2f       	mov	r24, r28
 460:	82 95       	swap	r24
 462:	8f 70       	andi	r24, 0x0F	; 15
 464:	0e 94 8e 02 	call	0x51c	; 0x51c <lcd_send_4bit>
	lcd_send_EN();  // Enable pulse
 468:	0e 94 3e 02 	call	0x47c	; 0x47c <lcd_send_EN>
	// Send Lower Nibble
	lcd_send_4bit(data & 0x0F);
 46c:	8c 2f       	mov	r24, r28
 46e:	8f 70       	andi	r24, 0x0F	; 15
 470:	0e 94 8e 02 	call	0x51c	; 0x51c <lcd_send_4bit>
	lcd_send_EN();  // Enable pulse
 474:	0e 94 3e 02 	call	0x47c	; 0x47c <lcd_send_EN>
	#if LCD_MODE == LCD_8BIT_MODE
	// Send full 8-bit data
	LCD_DATA_PORT = data;
	lcd_send_EN();  // Enable pulse
	#endif
}
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

Disassembly of section .text.lcd_set_cursor_pos:

000003b8 <lcd_set_cursor_pos>:

void lcd_set_cursor_pos(uint8_t row, uint8_t col){
	switch(row){
 3b8:	82 30       	cpi	r24, 0x02	; 2
 3ba:	71 f0       	breq	.+28     	; 0x3d8 <lcd_set_cursor_pos+0x20>
 3bc:	18 f4       	brcc	.+6      	; 0x3c4 <lcd_set_cursor_pos+0xc>
 3be:	81 30       	cpi	r24, 0x01	; 1
 3c0:	31 f0       	breq	.+12     	; 0x3ce <lcd_set_cursor_pos+0x16>
 3c2:	08 95       	ret
 3c4:	83 30       	cpi	r24, 0x03	; 3
 3c6:	69 f0       	breq	.+26     	; 0x3e2 <lcd_set_cursor_pos+0x2a>
 3c8:	84 30       	cpi	r24, 0x04	; 4
 3ca:	81 f0       	breq	.+32     	; 0x3ec <lcd_set_cursor_pos+0x34>
 3cc:	08 95       	ret
		case ROW1 :
		lcd_send_command(0x80 + col - 1);
 3ce:	8f e7       	ldi	r24, 0x7F	; 127
 3d0:	86 0f       	add	r24, r22
 3d2:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_send_command>
		break;
 3d6:	08 95       	ret
		case ROW2 :
		lcd_send_command(0xC0 + col - 1);
 3d8:	8f eb       	ldi	r24, 0xBF	; 191
 3da:	86 0f       	add	r24, r22
 3dc:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_send_command>
		break;
 3e0:	08 95       	ret
		case ROW3 :
		lcd_send_command(0x94 + col - 1);
 3e2:	83 e9       	ldi	r24, 0x93	; 147
 3e4:	86 0f       	add	r24, r22
 3e6:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_send_command>
		break;
 3ea:	08 95       	ret
		case ROW4 :
		lcd_send_command(0xd4 + col - 1);
 3ec:	83 ed       	ldi	r24, 0xD3	; 211
 3ee:	86 0f       	add	r24, r22
 3f0:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_send_command>
 3f4:	08 95       	ret

Disassembly of section .text.lcd_send_char_data_pos:

000004f0 <lcd_send_char_data_pos>:
		break;
	}
}

void lcd_send_char_data_pos(uint8_t data, uint8_t row, uint8_t column){
 4f0:	cf 93       	push	r28
 4f2:	c8 2f       	mov	r28, r24
 4f4:	86 2f       	mov	r24, r22
	lcd_set_cursor_pos(row, column);
 4f6:	64 2f       	mov	r22, r20
 4f8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <lcd_set_cursor_pos>
	lcd_send_char_data(data);
 4fc:	8c 2f       	mov	r24, r28
 4fe:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_send_char_data>
}
 502:	cf 91       	pop	r28
 504:	08 95       	ret

Disassembly of section .text.lcd_send_string:

000004a2 <lcd_send_string>:

void lcd_send_string(uint8_t str[]){
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	ec 01       	movw	r28, r24
	while(*str != '\0'){
 4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <lcd_send_string+0xe>
		lcd_send_char_data(*str++);
 4aa:	21 96       	adiw	r28, 0x01	; 1
 4ac:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_send_char_data>
	lcd_set_cursor_pos(row, column);
	lcd_send_char_data(data);
}

void lcd_send_string(uint8_t str[]){
	while(*str != '\0'){
 4b0:	88 81       	ld	r24, Y
 4b2:	81 11       	cpse	r24, r1
 4b4:	fa cf       	rjmp	.-12     	; 0x4aa <lcd_send_string+0x8>
		lcd_send_char_data(*str++);
	}
}
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

Disassembly of section .text.lcd_send_string_pos:

000004bc <lcd_send_string_pos>:

void lcd_send_string_pos(uint8_t str[], uint8_t row, uint8_t column){
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	ec 01       	movw	r28, r24
 4c2:	86 2f       	mov	r24, r22
	lcd_set_cursor_pos(row, column);
 4c4:	64 2f       	mov	r22, r20
 4c6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <lcd_set_cursor_pos>
	lcd_send_string(str);
 4ca:	ce 01       	movw	r24, r28
 4cc:	0e 94 51 02 	call	0x4a2	; 0x4a2 <lcd_send_string>
}
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

Disassembly of section .text.main:

00000330 <main>:

#include "atmega32_GPIO_driver.h"
#include "atmega32_HAL_LCD.h"
#include "atmega32_UART_driver.h"

int main(void) {
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	67 97       	sbiw	r28, 0x17	; 23
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	f8 94       	cli
 33e:	de bf       	out	0x3e, r29	; 62
 340:	0f be       	out	0x3f, r0	; 63
 342:	cd bf       	out	0x3d, r28	; 61
	// SPI Initialize
	SPI_init();
 344:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <SPI_init>
	// LCD Initialize
	lcd_initialize();
 348:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_initialize>
	
	//char TransmitterChar = 'A';
	
	char TransmitterChar = 'Z';
	
	char transmitted[] = "Transmit : ";
 34c:	2e ea       	ldi	r18, 0xAE	; 174
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	8c e0       	ldi	r24, 0x0C	; 12
 354:	f9 01       	movw	r30, r18
 356:	de 01       	movw	r26, r28
 358:	11 96       	adiw	r26, 0x01	; 1
 35a:	74 2f       	mov	r23, r20
 35c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__movmemx_qi>
	char Recieved[] = "Receive : ";
 360:	2a eb       	ldi	r18, 0xBA	; 186
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	40 e0       	ldi	r20, 0x00	; 0
 366:	8b e0       	ldi	r24, 0x0B	; 11
 368:	f9 01       	movw	r30, r18
 36a:	de 01       	movw	r26, r28
 36c:	1d 96       	adiw	r26, 0x0d	; 13
 36e:	74 2f       	mov	r23, r20
 370:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__movmemx_qi>
	// LCD Initialize
	lcd_initialize();
	
	//char TransmitterChar = 'A';
	
	char TransmitterChar = 'Z';
 374:	1a e5       	ldi	r17, 0x5A	; 90
 376:	01 c0       	rjmp	.+2      	; 0x37a <main+0x4a>
		// Transmit data and update TransmitterChar
		SPI_transmit(TransmitterChar);
		lcd_send_char_data_pos(TransmitterChar, 1, 12);
		TransmitterChar--;
		if (TransmitterChar < 'A') {
			TransmitterChar = 'Z';
 378:	1a e5       	ldi	r17, 0x5A	; 90
	char transmitted[] = "Transmit : ";
	char Recieved[] = "Receive : ";
	
	
	while (1) {
		lcd_send_string_pos(transmitted, 1, 1);
 37a:	41 e0       	ldi	r20, 0x01	; 1
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	ce 01       	movw	r24, r28
 380:	01 96       	adiw	r24, 0x01	; 1
 382:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_send_string_pos>
		lcd_send_string_pos(Recieved, 2, 1);
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	62 e0       	ldi	r22, 0x02	; 2
 38a:	ce 01       	movw	r24, r28
 38c:	0d 96       	adiw	r24, 0x0d	; 13
 38e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_send_string_pos>
		
		uint8_t RecievedChar = SPI_receive();
 392:	0e 94 9a 02 	call	0x534	; 0x534 <SPI_receive>
		lcd_send_char_data_pos(RecievedChar, 2, 12);
 396:	4c e0       	ldi	r20, 0x0C	; 12
 398:	62 e0       	ldi	r22, 0x02	; 2
 39a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <lcd_send_char_data_pos>
		
		// Transmit data and update TransmitterChar
		SPI_transmit(TransmitterChar);
 39e:	81 2f       	mov	r24, r17
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 96 02 	call	0x52c	; 0x52c <SPI_transmit>
		lcd_send_char_data_pos(TransmitterChar, 1, 12);
 3a6:	4c e0       	ldi	r20, 0x0C	; 12
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	81 2f       	mov	r24, r17
 3ac:	0e 94 78 02 	call	0x4f0	; 0x4f0 <lcd_send_char_data_pos>
		TransmitterChar--;
 3b0:	11 50       	subi	r17, 0x01	; 1
		if (TransmitterChar < 'A') {
 3b2:	11 34       	cpi	r17, 0x41	; 65
 3b4:	08 f3       	brcs	.-62     	; 0x378 <main+0x48>
 3b6:	e1 cf       	rjmp	.-62     	; 0x37a <main+0x4a>

Disassembly of section .text.GPIO_InitPin:

000001ba <GPIO_InitPin>:
 */ 

#include "atmega32_GPIO_driver.h"

void GPIO_InitPin(GPIO_Port port, uint8_t pinNumber, GPIO_Direction direction) {
	switch (port) {
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	01 f1       	breq	.+64     	; 0x1fe <GPIO_InitPin+0x44>
 1be:	30 f0       	brcs	.+12     	; 0x1cc <GPIO_InitPin+0x12>
 1c0:	82 30       	cpi	r24, 0x02	; 2
 1c2:	b1 f1       	breq	.+108    	; 0x230 <GPIO_InitPin+0x76>
 1c4:	83 30       	cpi	r24, 0x03	; 3
 1c6:	09 f4       	brne	.+2      	; 0x1ca <GPIO_InitPin+0x10>
 1c8:	4c c0       	rjmp	.+152    	; 0x262 <GPIO_InitPin+0xa8>
 1ca:	08 95       	ret
		case GPIO_PORT_A:
		if (direction == GPIO_PIN_OUTPUT) {
 1cc:	41 30       	cpi	r20, 0x01	; 1
 1ce:	59 f4       	brne	.+22     	; 0x1e6 <GPIO_InitPin+0x2c>
			DDRA |= (1 << pinNumber); // Set pin as output
 1d0:	2a b3       	in	r18, 0x1a	; 26
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <GPIO_InitPin+0x22>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <GPIO_InitPin+0x1e>
 1e0:	82 2b       	or	r24, r18
 1e2:	8a bb       	out	0x1a, r24	; 26
 1e4:	08 95       	ret
			} else {
			DDRA &= ~(1 << pinNumber); // Set pin as input
 1e6:	2a b3       	in	r18, 0x1a	; 26
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <GPIO_InitPin+0x38>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <GPIO_InitPin+0x34>
 1f6:	80 95       	com	r24
 1f8:	82 23       	and	r24, r18
 1fa:	8a bb       	out	0x1a, r24	; 26
 1fc:	08 95       	ret
		}
		break;

		case GPIO_PORT_B:
		if (direction == GPIO_PIN_OUTPUT) {
 1fe:	41 30       	cpi	r20, 0x01	; 1
 200:	59 f4       	brne	.+22     	; 0x218 <GPIO_InitPin+0x5e>
			DDRB |= (1 << pinNumber);
 202:	27 b3       	in	r18, 0x17	; 23
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <GPIO_InitPin+0x54>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <GPIO_InitPin+0x50>
 212:	82 2b       	or	r24, r18
 214:	87 bb       	out	0x17, r24	; 23
 216:	08 95       	ret
			} else {
			DDRB &= ~(1 << pinNumber);
 218:	27 b3       	in	r18, 0x17	; 23
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <GPIO_InitPin+0x6a>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <GPIO_InitPin+0x66>
 228:	80 95       	com	r24
 22a:	82 23       	and	r24, r18
 22c:	87 bb       	out	0x17, r24	; 23
 22e:	08 95       	ret
		}
		break;

		case GPIO_PORT_C:
		if (direction == GPIO_PIN_OUTPUT) {
 230:	41 30       	cpi	r20, 0x01	; 1
 232:	59 f4       	brne	.+22     	; 0x24a <GPIO_InitPin+0x90>
			DDRC |= (1 << pinNumber);
 234:	24 b3       	in	r18, 0x14	; 20
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <GPIO_InitPin+0x86>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <GPIO_InitPin+0x82>
 244:	82 2b       	or	r24, r18
 246:	84 bb       	out	0x14, r24	; 20
 248:	08 95       	ret
			} else {
			DDRC &= ~(1 << pinNumber);
 24a:	24 b3       	in	r18, 0x14	; 20
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <GPIO_InitPin+0x9c>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <GPIO_InitPin+0x98>
 25a:	80 95       	com	r24
 25c:	82 23       	and	r24, r18
 25e:	84 bb       	out	0x14, r24	; 20
 260:	08 95       	ret
		}
		break;

		case GPIO_PORT_D:
		if (direction == GPIO_PIN_OUTPUT) {
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	59 f4       	brne	.+22     	; 0x27c <GPIO_InitPin+0xc2>
			DDRD |= (1 << pinNumber);
 266:	21 b3       	in	r18, 0x11	; 17
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <GPIO_InitPin+0xb8>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <GPIO_InitPin+0xb4>
 276:	82 2b       	or	r24, r18
 278:	81 bb       	out	0x11, r24	; 17
 27a:	08 95       	ret
			} else {
			DDRD &= ~(1 << pinNumber);
 27c:	21 b3       	in	r18, 0x11	; 17
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <GPIO_InitPin+0xce>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <GPIO_InitPin+0xca>
 28c:	80 95       	com	r24
 28e:	82 23       	and	r24, r18
 290:	81 bb       	out	0x11, r24	; 17
 292:	08 95       	ret

Disassembly of section .text.SPI_init:

000003f6 <SPI_init>:
	SET_BIT(SPCR, SPR0);
	#endif
	
	#ifdef SPI_SLAVE_MODE
	// Set MISO output, all others input
	GPIO_InitPin(GPIO_PORT_B, MOSI, GPIO_PIN_INPUT);
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	65 e0       	ldi	r22, 0x05	; 5
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <GPIO_InitPin>
	GPIO_InitPin(GPIO_PORT_B, SCK, GPIO_PIN_INPUT);
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	67 e0       	ldi	r22, 0x07	; 7
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 dd 00 	call	0x1ba	; 0x1ba <GPIO_InitPin>
	GPIO_InitPin(GPIO_PORT_B, SS, GPIO_PIN_INPUT);
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	64 e0       	ldi	r22, 0x04	; 4
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	0e 94 dd 00 	call	0x1ba	; 0x1ba <GPIO_InitPin>
	GPIO_InitPin(GPIO_PORT_B, MISO, GPIO_PIN_OUTPUT);
 414:	41 e0       	ldi	r20, 0x01	; 1
 416:	66 e0       	ldi	r22, 0x06	; 6
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <GPIO_InitPin>
	// Set Slave Mode
	RESET_BIT(SPCR, MSTR);
 41e:	8d b1       	in	r24, 0x0d	; 13
 420:	8f 7e       	andi	r24, 0xEF	; 239
 422:	8d b9       	out	0x0d, r24	; 13
	#endif
	
	// Enable SPI
	SET_BIT(SPCR, SPE);
 424:	8d b1       	in	r24, 0x0d	; 13
 426:	80 64       	ori	r24, 0x40	; 64
 428:	8d b9       	out	0x0d, r24	; 13
 42a:	08 95       	ret

Disassembly of section .text.SPI_transmit:

0000052c <SPI_transmit>:
}

// SPI transmit function
void SPI_transmit(uint8_t data){
	/* Start transmission */
	SPDR = data;
 52c:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(READ_BIT(SPSR, SPIF)));
 52e:	77 9b       	sbis	0x0e, 7	; 14
 530:	fe cf       	rjmp	.-4      	; 0x52e <SPI_transmit+0x2>
}
 532:	08 95       	ret

Disassembly of section .text.SPI_receive:

00000534 <SPI_receive>:

// SPI receive function
uint8_t SPI_receive(void){
	/* Wait for reception complete */
	while(!(READ_BIT(SPSR, SPIF)));
 534:	77 9b       	sbis	0x0e, 7	; 14
 536:	fe cf       	rjmp	.-4      	; 0x534 <SPI_receive>
	
	/* Return data register */
	return SPDR;
 538:	8f b1       	in	r24, 0x0f	; 15
}
 53a:	08 95       	ret

Disassembly of section .text.UART_ReceiveByte:

0000053c <UART_ReceiveByte>:
	UDR = data;                    // Write the data to the USART data register
}

uint8_t UART_ReceiveByte(void) {
	/* Wait for data to be received */
	while (!READ_BIT(UCSRA, RXC));  // Wait until data is received
 53c:	5f 9b       	sbis	0x0b, 7	; 11
 53e:	fe cf       	rjmp	.-4      	; 0x53c <UART_ReceiveByte>
	return UDR;                    // Return the received data
 540:	8c b1       	in	r24, 0x0c	; 12
}
 542:	08 95       	ret

Disassembly of section .text.__vector_13:

000000da <__vector_13>:


void UART_TransmitByte(uint8_t data) {
	/* Wait for empty transmit buffer */
	while (!READ_BIT(UCSRA, UDRE)); // Wait until the buffer is ready
	UDR = data;                    // Write the data to the USART data register
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	65 97       	sbiw	r28, 0x15	; 21
 106:	de bf       	out	0x3e, r29	; 62
 108:	cd bf       	out	0x3d, r28	; 61
 10a:	0e 94 9e 02 	call	0x53c	; 0x53c <UART_ReceiveByte>
 10e:	8a 30       	cpi	r24, 0x0A	; 10
 110:	31 f0       	breq	.+12     	; 0x11e <__vector_13+0x44>
 112:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <buffer_index>
 116:	93 31       	cpi	r25, 0x13	; 19
 118:	10 f4       	brcc	.+4      	; 0x11e <__vector_13+0x44>
 11a:	8d 30       	cpi	r24, 0x0D	; 13
 11c:	59 f5       	brne	.+86     	; 0x174 <__vector_13+0x9a>
 11e:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <buffer_index>
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	e0 5a       	subi	r30, 0xA0	; 160
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	10 82       	st	Z, r1
 12a:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <buffer_index>
 12e:	25 ec       	ldi	r18, 0xC5	; 197
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	85 e1       	ldi	r24, 0x15	; 21
 136:	f9 01       	movw	r30, r18
 138:	de 01       	movw	r26, r28
 13a:	11 96       	adiw	r26, 0x01	; 1
 13c:	74 2f       	mov	r23, r20
 13e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__movmemx_qi>
 142:	41 e0       	ldi	r20, 0x01	; 1
 144:	62 e0       	ldi	r22, 0x02	; 2
 146:	ce 01       	movw	r24, r28
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_send_string_pos>
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	63 e0       	ldi	r22, 0x03	; 3
 152:	ce 01       	movw	r24, r28
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_send_string_pos>
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	64 e0       	ldi	r22, 0x04	; 4
 15e:	ce 01       	movw	r24, r28
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_send_string_pos>
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	62 e0       	ldi	r22, 0x02	; 2
 16a:	80 e6       	ldi	r24, 0x60	; 96
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_send_string_pos>
 172:	0a c0       	rjmp	.+20     	; 0x188 <__vector_13+0xae>
 174:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <buffer_index>
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	9e 0f       	add	r25, r30
 17c:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <buffer_index>
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	e0 5a       	subi	r30, 0xA0	; 160
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	80 83       	st	Z, r24
 188:	65 96       	adiw	r28, 0x15	; 21
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	f8 94       	cli
 18e:	de bf       	out	0x3e, r29	; 62
 190:	0f be       	out	0x3f, r0	; 63
 192:	cd bf       	out	0x3d, r28	; 61
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	ff 91       	pop	r31
 19a:	ef 91       	pop	r30
 19c:	bf 91       	pop	r27
 19e:	af 91       	pop	r26
 1a0:	9f 91       	pop	r25
 1a2:	8f 91       	pop	r24
 1a4:	7f 91       	pop	r23
 1a6:	6f 91       	pop	r22
 1a8:	5f 91       	pop	r21
 1aa:	4f 91       	pop	r20
 1ac:	3f 91       	pop	r19
 1ae:	2f 91       	pop	r18
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

Disassembly of section .text.libgcc:

000004d6 <__movmemx_qi>:
 4d6:	99 27       	eor	r25, r25

000004d8 <__movmemx_hi>:
 4d8:	77 fd       	sbrc	r23, 7
 4da:	05 c0       	rjmp	.+10     	; 0x4e6 <__movmemx_hi+0xe>
 4dc:	05 90       	lpm	r0, Z+
 4de:	0d 92       	st	X+, r0
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <__movmemx_hi+0x4>
 4e4:	08 95       	ret
 4e6:	01 90       	ld	r0, Z+
 4e8:	0d 92       	st	X+, r0
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	e1 f7       	brne	.-8      	; 0x4e6 <__movmemx_hi+0xe>
 4ee:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000054c <_fini>:
 54c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000054e <__funcs_on_exit>:
 54e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000550 <__simulator_exit>:
 550:	08 95       	ret

Disassembly of section .text.exit:

00000506 <exit>:
 506:	ec 01       	movw	r28, r24
 508:	0e 94 a7 02 	call	0x54e	; 0x54e <__funcs_on_exit>
 50c:	0e 94 a6 02 	call	0x54c	; 0x54c <_fini>
 510:	ce 01       	movw	r24, r28
 512:	0e 94 a8 02 	call	0x550	; 0x550 <__simulator_exit>
 516:	ce 01       	movw	r24, r28
 518:	0e 94 a4 02 	call	0x548	; 0x548 <_Exit>

Disassembly of section .text._Exit:

00000548 <_Exit>:
 548:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
