
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005fe  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000002a  00000000  00000000  0000062d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000657  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bfe  00000000  00000000  00000727  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c6  00000000  00000000  00002325  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007d4  00000000  00000000  00002beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000228  00000000  00000000  000033c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ee  00000000  00000000  000035e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000abc  00000000  00000000  000037d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00004292  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000004f2  000004f2  000005e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004334  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.lcd_send_4bit 00000010  000004d2  000004d2  000005c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_send_EN 00000026  00000448  00000448  0000053c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_send_command 00000028  000003f8  000003f8  000004ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_initialize 0000009c  000001d0  000001d0  000002c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_send_char_data 00000028  00000420  00000420  00000514  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_set_cursor_pos 0000003e  0000038e  0000038e  00000482  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.lcd_send_string 0000001a  0000046e  0000046e  00000562  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.lcd_send_string_pos 0000001a  00000488  00000488  0000057c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .progmemx.data 0000000e  000000d1  000000d1  000001c5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 23 .text.main    00000048  00000302  00000302  000003f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .data.myUart  0000000a  00800074  00000500  000005f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 25 .text.UART_Init 000000f0  000000e0  000000e0  000001d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.UART_TransmitByte 00000008  000004e2  000004e2  000005d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.UART_ReceiveByte 00000008  000004ea  000004ea  000005de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.UART_TransmitString 0000002c  000003cc  000003cc  000004c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .progmemx.data 00000017  000000ba  000000ba  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 30 .text.__vector_13 00000096  0000026c  0000026c  00000360  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .bss.buffer_index 00000001  0080007e  0080007e  000005fe  2**0
                  ALLOC
 32 .bss.uart_buffer 00000014  00800060  00800060  000005fe  2**0
                  ALLOC
 33 .text.libgcc.div 00000044  0000034a  0000034a  0000043e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.libgcc  0000001a  000004a2  000004a2  00000596  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_fini 00000002  000004fa  000004fa  000005ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__dummy_funcs_on_exit 00000002  000004fc  000004fc  000005f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__dummy_simulator_exit 00000002  000004fe  000004fe  000005f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.exit    00000016  000004bc  000004bc  000005b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text._Exit   00000004  000004f6  000004f6  000005ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
   8:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
   c:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  10:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  14:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  18:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  1c:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  20:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  24:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  28:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  2c:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  30:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  34:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_13>
  38:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  3c:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  40:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  44:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  48:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  4c:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  50:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 74       	andi	r16, 0x40	; 64
  58:	80 00       	.word	0x0080	; ????
  5a:	74 00       	.word	0x0074	; ????
  5c:	7e 00       	.word	0x007e	; ????
  5e:	05 00       	.word	0x0005	; ????
  60:	00 7e       	andi	r16, 0xE0	; 224
  62:	00 7f       	andi	r16, 0xF0	; 240
  64:	80 00       	.word	0x0080	; ????

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	e4 e5       	ldi	r30, 0x54	; 84
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	17 c0       	rjmp	.+46     	; 0xa8 <__do_clear_bss+0x8>
  7a:	b5 91       	lpm	r27, Z+
  7c:	a5 91       	lpm	r26, Z+
  7e:	35 91       	lpm	r19, Z+
  80:	25 91       	lpm	r18, Z+
  82:	05 91       	lpm	r16, Z+
  84:	07 fd       	sbrc	r16, 7
  86:	0c c0       	rjmp	.+24     	; 0xa0 <__do_clear_bss>
  88:	95 91       	lpm	r25, Z+
  8a:	85 91       	lpm	r24, Z+
  8c:	ef 01       	movw	r28, r30
  8e:	f9 2f       	mov	r31, r25
  90:	e8 2f       	mov	r30, r24
  92:	05 90       	lpm	r0, Z+
  94:	0d 92       	st	X+, r0
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0x20>
  9c:	fe 01       	movw	r30, r28
  9e:	04 c0       	rjmp	.+8      	; 0xa8 <__do_clear_bss+0x8>

000000a0 <__do_clear_bss>:
  a0:	1d 92       	st	X+, r1
  a2:	a2 17       	cp	r26, r18
  a4:	b3 07       	cpc	r27, r19
  a6:	e1 f7       	brne	.-8      	; 0xa0 <__do_clear_bss>
  a8:	e5 36       	cpi	r30, 0x65	; 101
  aa:	f4 07       	cpc	r31, r20
  ac:	31 f7       	brne	.-52     	; 0x7a <__do_copy_data+0x8>
  ae:	0e 94 81 01 	call	0x302	; 0x302 <main>
  b2:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <exit>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>

Disassembly of section .text:

000004f2 <__bad_interrupt>:
 4f2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_send_4bit:

000004d2 <lcd_send_4bit>:
static void lcd_send_4bit(uint8_t command);
static void lcd_send_EN();

static void lcd_send_4bit(uint8_t command) {
	// Clear Lower Nipple First
	LCD_DATA_PORT &= ~(0x0F << 0);
 4d2:	9b b3       	in	r25, 0x1b	; 27
 4d4:	90 7f       	andi	r25, 0xF0	; 240
 4d6:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA_PORT |= (command & 0x0F);
 4d8:	9b b3       	in	r25, 0x1b	; 27
 4da:	8f 70       	andi	r24, 0x0F	; 15
 4dc:	98 2b       	or	r25, r24
 4de:	9b bb       	out	0x1b, r25	; 27
 4e0:	08 95       	ret

Disassembly of section .text.lcd_send_EN:

00000448 <lcd_send_EN>:
}

void lcd_send_char_data_pos(uint8_t data, uint8_t row, uint8_t column){
	lcd_set_cursor_pos(row, column);
	lcd_send_char_data(data);
}
 448:	88 b3       	in	r24, 0x18	; 24
 44a:	82 60       	ori	r24, 0x02	; 2
 44c:	88 bb       	out	0x18, r24	; 24
 44e:	81 ee       	ldi	r24, 0xE1	; 225
 450:	94 e0       	ldi	r25, 0x04	; 4
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <lcd_send_EN+0xa>
 456:	00 c0       	rjmp	.+0      	; 0x458 <lcd_send_EN+0x10>
 458:	00 00       	nop
 45a:	88 b3       	in	r24, 0x18	; 24
 45c:	8d 7f       	andi	r24, 0xFD	; 253
 45e:	88 bb       	out	0x18, r24	; 24
 460:	81 ee       	ldi	r24, 0xE1	; 225
 462:	94 e0       	ldi	r25, 0x04	; 4
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <lcd_send_EN+0x1c>
 468:	00 c0       	rjmp	.+0      	; 0x46a <lcd_send_EN+0x22>
 46a:	00 00       	nop
 46c:	08 95       	ret

Disassembly of section .text.lcd_send_command:

000003f8 <lcd_send_command>:
 3f8:	cf 93       	push	r28
 3fa:	c8 2f       	mov	r28, r24
 3fc:	88 b3       	in	r24, 0x18	; 24
 3fe:	8e 7f       	andi	r24, 0xFE	; 254
 400:	88 bb       	out	0x18, r24	; 24
 402:	8c 2f       	mov	r24, r28
 404:	82 95       	swap	r24
 406:	8f 70       	andi	r24, 0x0F	; 15
 408:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_send_4bit>
 40c:	0e 94 24 02 	call	0x448	; 0x448 <lcd_send_EN>
 410:	8c 2f       	mov	r24, r28
 412:	8f 70       	andi	r24, 0x0F	; 15
 414:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_send_4bit>
 418:	0e 94 24 02 	call	0x448	; 0x448 <lcd_send_EN>
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

Disassembly of section .text.lcd_initialize:

000001d0 <lcd_initialize>:
 1d0:	87 b3       	in	r24, 0x17	; 23
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	87 bb       	out	0x17, r24	; 23
 1d6:	87 b3       	in	r24, 0x17	; 23
 1d8:	82 60       	ori	r24, 0x02	; 2
 1da:	87 bb       	out	0x17, r24	; 23
 1dc:	88 b3       	in	r24, 0x18	; 24
 1de:	8e 7f       	andi	r24, 0xFE	; 254
 1e0:	88 bb       	out	0x18, r24	; 24
 1e2:	88 b3       	in	r24, 0x18	; 24
 1e4:	8d 7f       	andi	r24, 0xFD	; 253
 1e6:	88 bb       	out	0x18, r24	; 24
 1e8:	8f e0       	ldi	r24, 0x0F	; 15
 1ea:	8a bb       	out	0x1a, r24	; 26
 1ec:	8b b3       	in	r24, 0x1b	; 27
 1ee:	80 7f       	andi	r24, 0xF0	; 240
 1f0:	8b bb       	out	0x1b, r24	; 27
 1f2:	87 e8       	ldi	r24, 0x87	; 135
 1f4:	93 e1       	ldi	r25, 0x13	; 19
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_initialize+0x26>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <lcd_initialize+0x2c>
 1fc:	00 00       	nop
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_send_command>
 204:	81 ee       	ldi	r24, 0xE1	; 225
 206:	94 e0       	ldi	r25, 0x04	; 4
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <lcd_initialize+0x38>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <lcd_initialize+0x3e>
 20e:	00 00       	nop
 210:	88 e2       	ldi	r24, 0x28	; 40
 212:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_send_command>
 216:	81 ee       	ldi	r24, 0xE1	; 225
 218:	94 e0       	ldi	r25, 0x04	; 4
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <lcd_initialize+0x4a>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <lcd_initialize+0x50>
 220:	00 00       	nop
 222:	8c e0       	ldi	r24, 0x0C	; 12
 224:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_send_command>
 228:	89 ef       	ldi	r24, 0xF9	; 249
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <lcd_initialize+0x5c>
 230:	00 c0       	rjmp	.+0      	; 0x232 <lcd_initialize+0x62>
 232:	00 00       	nop
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_send_command>
 23a:	83 ef       	ldi	r24, 0xF3	; 243
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <lcd_initialize+0x6e>
 242:	00 c0       	rjmp	.+0      	; 0x244 <lcd_initialize+0x74>
 244:	00 00       	nop
 246:	86 e0       	ldi	r24, 0x06	; 6
 248:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_send_command>
 24c:	89 ef       	ldi	r24, 0xF9	; 249
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <lcd_initialize+0x80>
 254:	00 c0       	rjmp	.+0      	; 0x256 <lcd_initialize+0x86>
 256:	00 00       	nop
 258:	80 e8       	ldi	r24, 0x80	; 128
 25a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_send_command>
 25e:	89 ef       	ldi	r24, 0xF9	; 249
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <lcd_initialize+0x92>
 266:	00 c0       	rjmp	.+0      	; 0x268 <lcd_initialize+0x98>
 268:	00 00       	nop
 26a:	08 95       	ret

Disassembly of section .text.lcd_send_char_data:

00000420 <lcd_send_char_data>:
 420:	cf 93       	push	r28
 422:	c8 2f       	mov	r28, r24
 424:	88 b3       	in	r24, 0x18	; 24
 426:	81 60       	ori	r24, 0x01	; 1
 428:	88 bb       	out	0x18, r24	; 24
 42a:	8c 2f       	mov	r24, r28
 42c:	82 95       	swap	r24
 42e:	8f 70       	andi	r24, 0x0F	; 15
 430:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_send_4bit>
 434:	0e 94 24 02 	call	0x448	; 0x448 <lcd_send_EN>
 438:	8c 2f       	mov	r24, r28
 43a:	8f 70       	andi	r24, 0x0F	; 15
 43c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_send_4bit>
 440:	0e 94 24 02 	call	0x448	; 0x448 <lcd_send_EN>
 444:	cf 91       	pop	r28
 446:	08 95       	ret

Disassembly of section .text.lcd_set_cursor_pos:

0000038e <lcd_set_cursor_pos>:
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	71 f0       	breq	.+28     	; 0x3ae <lcd_set_cursor_pos+0x20>
 392:	18 f4       	brcc	.+6      	; 0x39a <lcd_set_cursor_pos+0xc>
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	31 f0       	breq	.+12     	; 0x3a4 <lcd_set_cursor_pos+0x16>
 398:	08 95       	ret
 39a:	83 30       	cpi	r24, 0x03	; 3
 39c:	69 f0       	breq	.+26     	; 0x3b8 <lcd_set_cursor_pos+0x2a>
 39e:	84 30       	cpi	r24, 0x04	; 4
 3a0:	81 f0       	breq	.+32     	; 0x3c2 <lcd_set_cursor_pos+0x34>
 3a2:	08 95       	ret
 3a4:	8f e7       	ldi	r24, 0x7F	; 127
 3a6:	86 0f       	add	r24, r22
 3a8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_send_command>
 3ac:	08 95       	ret
 3ae:	8f eb       	ldi	r24, 0xBF	; 191
 3b0:	86 0f       	add	r24, r22
 3b2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_send_command>
 3b6:	08 95       	ret
 3b8:	83 e9       	ldi	r24, 0x93	; 147
 3ba:	86 0f       	add	r24, r22
 3bc:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_send_command>
 3c0:	08 95       	ret
 3c2:	83 ed       	ldi	r24, 0xD3	; 211
 3c4:	86 0f       	add	r24, r22
 3c6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_send_command>
 3ca:	08 95       	ret

Disassembly of section .text.lcd_send_string:

0000046e <lcd_send_string>:

void lcd_send_string(uint8_t str[]){
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	ec 01       	movw	r28, r24
	while(*str != '\0'){
 474:	03 c0       	rjmp	.+6      	; 0x47c <lcd_send_string+0xe>
		lcd_send_char_data(*str++);
 476:	21 96       	adiw	r28, 0x01	; 1
 478:	0e 94 10 02 	call	0x420	; 0x420 <lcd_send_char_data>
	lcd_set_cursor_pos(row, column);
	lcd_send_char_data(data);
}

void lcd_send_string(uint8_t str[]){
	while(*str != '\0'){
 47c:	88 81       	ld	r24, Y
 47e:	81 11       	cpse	r24, r1
 480:	fa cf       	rjmp	.-12     	; 0x476 <lcd_send_string+0x8>
		lcd_send_char_data(*str++);
	}
}
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

Disassembly of section .text.lcd_send_string_pos:

00000488 <lcd_send_string_pos>:

void lcd_send_string_pos(uint8_t str[], uint8_t row, uint8_t column){
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	ec 01       	movw	r28, r24
 48e:	86 2f       	mov	r24, r22
	lcd_set_cursor_pos(row, column);
 490:	64 2f       	mov	r22, r20
 492:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_set_cursor_pos>
	lcd_send_string(str);
 496:	ce 01       	movw	r24, r28
 498:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_send_string>
}
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	08 95       	ret

Disassembly of section .text.main:

00000302 <main>:
	.mode = UART_ASYNC_MODE,           // Asynchronous mode
	.rx_enable_interrupt = UART_ENABLE_INTERRUPT,  // Disable RX interrupt
	.tx_enable_interrupt = UART_DISABLED_INTERRUPT // Disable TX interrupt
};

int main(void) {
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	2e 97       	sbiw	r28, 0x0e	; 14
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	f8 94       	cli
 310:	de bf       	out	0x3e, r29	; 62
 312:	0f be       	out	0x3f, r0	; 63
 314:	cd bf       	out	0x3d, r28	; 61
	// LCD Initialize
 	lcd_initialize();
 316:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_initialize>
	UART_Init(&myUart);
 31a:	84 e7       	ldi	r24, 0x74	; 116
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_Init>
	
	
    uint8_t buff[] = "Testing UART\n";
 322:	21 ed       	ldi	r18, 0xD1	; 209
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	8e e0       	ldi	r24, 0x0E	; 14
 32a:	f9 01       	movw	r30, r18
 32c:	8e 01       	movw	r16, r28
 32e:	0f 5f       	subi	r16, 0xFF	; 255
 330:	1f 4f       	sbci	r17, 0xFF	; 255
 332:	d8 01       	movw	r26, r16
 334:	74 2f       	mov	r23, r20
 336:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__movmemx_qi>
	lcd_send_string(buff);
 33a:	c8 01       	movw	r24, r16
 33c:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_send_string>
	UART_TransmitString(buff);
 340:	b8 01       	movw	r22, r16
 342:	80 e8       	ldi	r24, 0x80	; 128
 344:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_TransmitString>
 348:	ff cf       	rjmp	.-2      	; 0x348 <main+0x46>

Disassembly of section .text.UART_Init:

000000e0 <UART_Init>:

#define BUFFER_SIZE 20
static volatile uint8_t uart_buffer[BUFFER_SIZE];
static volatile uint8_t buffer_index = 0;

void UART_Init(UART_config_t *uartConfig) {
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	ec 01       	movw	r28, r24
	// Disable global interrupts
	cli();
  e6:	f8 94       	cli

	// Set the baud rate
	RESET_BIT(UCSRA, U2X);   // Ensure normal speed mode (U2X = 0)
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	8d 7f       	andi	r24, 0xFD	; 253
  ec:	8b b9       	out	0x0b, r24	; 11
	uint16_t UBRR = (F_CPU / (16UL * uartConfig->baud_rate)) - 1;
  ee:	88 81       	ld	r24, Y
  f0:	99 81       	ldd	r25, Y+1	; 0x01
  f2:	aa 81       	ldd	r26, Y+2	; 0x02
  f4:	bb 81       	ldd	r27, Y+3	; 0x03
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	aa 1f       	adc	r26, r26
  fc:	bb 1f       	adc	r27, r27
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	aa 1f       	adc	r26, r26
 104:	bb 1f       	adc	r27, r27
 106:	9c 01       	movw	r18, r24
 108:	ad 01       	movw	r20, r26
 10a:	22 0f       	add	r18, r18
 10c:	33 1f       	adc	r19, r19
 10e:	44 1f       	adc	r20, r20
 110:	55 1f       	adc	r21, r21
 112:	22 0f       	add	r18, r18
 114:	33 1f       	adc	r19, r19
 116:	44 1f       	adc	r20, r20
 118:	55 1f       	adc	r21, r21
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	72 e1       	ldi	r23, 0x12	; 18
 11e:	8a e7       	ldi	r24, 0x7A	; 122
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 a5 01 	call	0x34a	; 0x34a <__udivmodsi4>
 126:	21 50       	subi	r18, 0x01	; 1
 128:	31 09       	sbc	r19, r1
	UBRRL = (uint8_t)(UBRR & 0xFF);   // Correct lower byte
 12a:	29 b9       	out	0x09, r18	; 9
	UBRRH = (uint8_t)((UBRR >> 8) & 0xFF); // Correct upper byte
 12c:	30 bd       	out	0x20, r19	; 32

	// Select Synchronous or Asynchronous mode
	if (uartConfig->mode == UART_ASYNC_MODE) {
 12e:	8f 81       	ldd	r24, Y+7	; 0x07
 130:	81 11       	cpse	r24, r1
 132:	04 c0       	rjmp	.+8      	; 0x13c <UART_Init+0x5c>
		RESET_BIT(UCSRC, UMSEL); // Asynchronous mode
 134:	80 b5       	in	r24, 0x20	; 32
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	80 bd       	out	0x20, r24	; 32
 13a:	03 c0       	rjmp	.+6      	; 0x142 <UART_Init+0x62>
	} 
	else {
		SET_BIT(UCSRC, UMSEL);   // Synchronous mode
 13c:	80 b5       	in	r24, 0x20	; 32
 13e:	80 64       	ori	r24, 0x40	; 64
 140:	80 bd       	out	0x20, r24	; 32
	}

	// Configure parity mode
	UCSRC &= ~(0b11 << UPM0); // Clear UPM0 and UPM1
 142:	80 b5       	in	r24, 0x20	; 32
 144:	8f 7c       	andi	r24, 0xCF	; 207
 146:	80 bd       	out	0x20, r24	; 32
	UCSRC |= ((uartConfig->parity_type & 0x3) << UPM0);
 148:	20 b5       	in	r18, 0x20	; 32
 14a:	9e 81       	ldd	r25, Y+6	; 0x06
 14c:	93 70       	andi	r25, 0x03	; 3
 14e:	30 e1       	ldi	r19, 0x10	; 16
 150:	93 9f       	mul	r25, r19
 152:	c0 01       	movw	r24, r0
 154:	11 24       	eor	r1, r1
 156:	82 2b       	or	r24, r18
 158:	80 bd       	out	0x20, r24	; 32

	// Configure stop bits
	UCSRC &= ~(1 << USBS); // Clear USBS
 15a:	80 b5       	in	r24, 0x20	; 32
 15c:	87 7f       	andi	r24, 0xF7	; 247
 15e:	80 bd       	out	0x20, r24	; 32
	UCSRC |= (uartConfig->stop_bits << USBS);
 160:	20 b5       	in	r18, 0x20	; 32
 162:	9d 81       	ldd	r25, Y+5	; 0x05
 164:	89 2f       	mov	r24, r25
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	82 2b       	or	r24, r18
 176:	80 bd       	out	0x20, r24	; 32

	// Configure character size
	UCSRC &= ~(0b11 << UCSZ0); // Clear UCSZ0 and UCSZ1
 178:	80 b5       	in	r24, 0x20	; 32
 17a:	89 7f       	andi	r24, 0xF9	; 249
 17c:	80 bd       	out	0x20, r24	; 32
	UCSRC |= ((uartConfig->data_bits & 0x3) << UCSZ0);
 17e:	20 b5       	in	r18, 0x20	; 32
 180:	9c 81       	ldd	r25, Y+4	; 0x04
 182:	93 70       	andi	r25, 0x03	; 3
 184:	89 2f       	mov	r24, r25
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	82 2b       	or	r24, r18
 18e:	80 bd       	out	0x20, r24	; 32
	if (uartConfig->data_bits == UART_9_BIT_DATA) {
 190:	8c 81       	ldd	r24, Y+4	; 0x04
 192:	87 30       	cpi	r24, 0x07	; 7
 194:	21 f4       	brne	.+8      	; 0x19e <UART_Init+0xbe>
		SET_BIT(UCSRB, UCSZ2); // Enable 9th bit
 196:	8a b1       	in	r24, 0x0a	; 10
 198:	84 60       	ori	r24, 0x04	; 4
 19a:	8a b9       	out	0x0a, r24	; 10
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <UART_Init+0xc4>
	} 
	else {
		RESET_BIT(UCSRB, UCSZ2); // Disable 9th bit
 19e:	8a b1       	in	r24, 0x0a	; 10
 1a0:	8b 7f       	andi	r24, 0xFB	; 251
 1a2:	8a b9       	out	0x0a, r24	; 10
	}

	// Enable transmitter and receiver
	SET_BIT(UCSRB, TXEN); // Enable transmitter
 1a4:	8a b1       	in	r24, 0x0a	; 10
 1a6:	88 60       	ori	r24, 0x08	; 8
 1a8:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB, RXEN); // Enable receiver
 1aa:	8a b1       	in	r24, 0x0a	; 10
 1ac:	80 61       	ori	r24, 0x10	; 16
 1ae:	8a b9       	out	0x0a, r24	; 10

	// Configure interrupts if requested
	if (uartConfig->rx_enable_interrupt == UART_ENABLE_INTERRUPT) {
 1b0:	88 85       	ldd	r24, Y+8	; 0x08
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	19 f4       	brne	.+6      	; 0x1bc <UART_Init+0xdc>
		SET_BIT(UCSRB, RXCIE); // Enable RX complete interrupt
 1b6:	8a b1       	in	r24, 0x0a	; 10
 1b8:	80 68       	ori	r24, 0x80	; 128
 1ba:	8a b9       	out	0x0a, r24	; 10
	}
	if (uartConfig->tx_enable_interrupt == UART_ENABLE_INTERRUPT) {
 1bc:	89 85       	ldd	r24, Y+9	; 0x09
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	19 f4       	brne	.+6      	; 0x1c8 <UART_Init+0xe8>
		SET_BIT(UCSRB, TXCIE); // Enable TX complete interrupt
 1c2:	8a b1       	in	r24, 0x0a	; 10
 1c4:	80 64       	ori	r24, 0x40	; 64
 1c6:	8a b9       	out	0x0a, r24	; 10
	}

	// Re-enable global interrupts
	sei();
 1c8:	78 94       	sei
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

Disassembly of section .text.UART_TransmitByte:

000004e2 <UART_TransmitByte>:


void UART_TransmitByte(uint8_t data) {
	/* Wait for empty transmit buffer */
	while (!READ_BIT(UCSRA, UDRE)); // Wait until the buffer is ready
 4e2:	5d 9b       	sbis	0x0b, 5	; 11
 4e4:	fe cf       	rjmp	.-4      	; 0x4e2 <UART_TransmitByte>
	UDR = data;                    // Write the data to the USART data register
 4e6:	8c b9       	out	0x0c, r24	; 12
 4e8:	08 95       	ret

Disassembly of section .text.UART_ReceiveByte:

000004ea <UART_ReceiveByte>:
}

uint8_t UART_ReceiveByte(void) {
	/* Wait for data to be received */
	while (!READ_BIT(UCSRA, RXC));  // Wait until data is received
 4ea:	5f 9b       	sbis	0x0b, 7	; 11
 4ec:	fe cf       	rjmp	.-4      	; 0x4ea <UART_ReceiveByte>
	return UDR;                    // Return the received data
 4ee:	8c b1       	in	r24, 0x0c	; 12
}
 4f0:	08 95       	ret

Disassembly of section .text.UART_TransmitString:

000003cc <UART_TransmitString>:

void UART_TransmitString(const uint8_t *str) {
 3cc:	cf 92       	push	r12
 3ce:	df 92       	push	r13
 3d0:	ef 92       	push	r14
 3d2:	6b 01       	movw	r12, r22
 3d4:	e8 2e       	mov	r14, r24
	while (*str) {                 // Loop until null terminator is found
 3d6:	06 c0       	rjmp	.+12     	; 0x3e4 <UART_TransmitString+0x18>
		UART_TransmitByte(*str++); // Transmit each character
 3d8:	9f ef       	ldi	r25, 0xFF	; 255
 3da:	c9 1a       	sub	r12, r25
 3dc:	d9 0a       	sbc	r13, r25
 3de:	e9 0a       	sbc	r14, r25
 3e0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <UART_TransmitByte>
	while (!READ_BIT(UCSRA, RXC));  // Wait until data is received
	return UDR;                    // Return the received data
}

void UART_TransmitString(const uint8_t *str) {
	while (*str) {                 // Loop until null terminator is found
 3e4:	f6 01       	movw	r30, r12
 3e6:	84 91       	lpm	r24, Z
 3e8:	e7 fc       	sbrc	r14, 7
 3ea:	80 81       	ld	r24, Z
 3ec:	81 11       	cpse	r24, r1
 3ee:	f4 cf       	rjmp	.-24     	; 0x3d8 <UART_TransmitString+0xc>
		UART_TransmitByte(*str++); // Transmit each character
	}
}
 3f0:	ef 90       	pop	r14
 3f2:	df 90       	pop	r13
 3f4:	cf 90       	pop	r12
 3f6:	08 95       	ret

Disassembly of section .text.__vector_13:

0000026c <__vector_13>:


// UART RX ISR
ISR(USART_RXC_vect) {
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	2f 93       	push	r18
 278:	3f 93       	push	r19
 27a:	4f 93       	push	r20
 27c:	5f 93       	push	r21
 27e:	6f 93       	push	r22
 280:	7f 93       	push	r23
 282:	8f 93       	push	r24
 284:	9f 93       	push	r25
 286:	af 93       	push	r26
 288:	bf 93       	push	r27
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
	char received_char = UART_ReceiveByte();
 28e:	0e 94 75 02 	call	0x4ea	; 0x4ea <UART_ReceiveByte>

	if (received_char == '\n' || buffer_index >= BUFFER_SIZE - 1) {
 292:	8a 30       	cpi	r24, 0x0A	; 10
 294:	21 f0       	breq	.+8      	; 0x29e <__vector_13+0x32>
 296:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <buffer_index>
 29a:	93 31       	cpi	r25, 0x13	; 19
 29c:	b8 f0       	brcs	.+46     	; 0x2cc <__vector_13+0x60>
		uart_buffer[buffer_index] = '\0';  // Null-terminate the string
 29e:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <buffer_index>
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	e0 5a       	subi	r30, 0xA0	; 160
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
 2a8:	10 82       	st	Z, r1
		buffer_index = 0;                 // Reset index
 2aa:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <buffer_index>

		// Clear LCD and display received string
		uint8_t clear_buf = "                      ";
		lcd_send_string_pos(clear_buf, 2, 1);
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	62 e0       	ldi	r22, 0x02	; 2
 2b2:	8a eb       	ldi	r24, 0xBA	; 186
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	a0 e0       	ldi	r26, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 44 02 	call	0x488	; 0x488 <lcd_send_string_pos>
		lcd_send_string_pos(uart_buffer, 2, 1);
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	62 e0       	ldi	r22, 0x02	; 2
 2c2:	80 e6       	ldi	r24, 0x60	; 96
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 44 02 	call	0x488	; 0x488 <lcd_send_string_pos>

// UART RX ISR
ISR(USART_RXC_vect) {
	char received_char = UART_ReceiveByte();

	if (received_char == '\n' || buffer_index >= BUFFER_SIZE - 1) {
 2ca:	0a c0       	rjmp	.+20     	; 0x2e0 <__vector_13+0x74>
		uint8_t clear_buf = "                      ";
		lcd_send_string_pos(clear_buf, 2, 1);
		lcd_send_string_pos(uart_buffer, 2, 1);
	} 
	else {
		uart_buffer[buffer_index++] = received_char;  // Add char to buffer
 2cc:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <buffer_index>
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	9e 0f       	add	r25, r30
 2d4:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <buffer_index>
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	e0 5a       	subi	r30, 0xA0	; 160
 2dc:	ff 4f       	sbci	r31, 0xFF	; 255
 2de:	80 83       	st	Z, r24
	}
 2e0:	ff 91       	pop	r31
 2e2:	ef 91       	pop	r30
 2e4:	bf 91       	pop	r27
 2e6:	af 91       	pop	r26
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	7f 91       	pop	r23
 2ee:	6f 91       	pop	r22
 2f0:	5f 91       	pop	r21
 2f2:	4f 91       	pop	r20
 2f4:	3f 91       	pop	r19
 2f6:	2f 91       	pop	r18
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

Disassembly of section .text.libgcc.div:

0000034a <__udivmodsi4>:
 34a:	a1 e2       	ldi	r26, 0x21	; 33
 34c:	1a 2e       	mov	r1, r26
 34e:	aa 1b       	sub	r26, r26
 350:	bb 1b       	sub	r27, r27
 352:	fd 01       	movw	r30, r26
 354:	0d c0       	rjmp	.+26     	; 0x370 <__udivmodsi4_ep>

00000356 <__udivmodsi4_loop>:
 356:	aa 1f       	adc	r26, r26
 358:	bb 1f       	adc	r27, r27
 35a:	ee 1f       	adc	r30, r30
 35c:	ff 1f       	adc	r31, r31
 35e:	a2 17       	cp	r26, r18
 360:	b3 07       	cpc	r27, r19
 362:	e4 07       	cpc	r30, r20
 364:	f5 07       	cpc	r31, r21
 366:	20 f0       	brcs	.+8      	; 0x370 <__udivmodsi4_ep>
 368:	a2 1b       	sub	r26, r18
 36a:	b3 0b       	sbc	r27, r19
 36c:	e4 0b       	sbc	r30, r20
 36e:	f5 0b       	sbc	r31, r21

00000370 <__udivmodsi4_ep>:
 370:	66 1f       	adc	r22, r22
 372:	77 1f       	adc	r23, r23
 374:	88 1f       	adc	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	1a 94       	dec	r1
 37a:	69 f7       	brne	.-38     	; 0x356 <__udivmodsi4_loop>
 37c:	60 95       	com	r22
 37e:	70 95       	com	r23
 380:	80 95       	com	r24
 382:	90 95       	com	r25
 384:	9b 01       	movw	r18, r22
 386:	ac 01       	movw	r20, r24
 388:	bd 01       	movw	r22, r26
 38a:	cf 01       	movw	r24, r30
 38c:	08 95       	ret

Disassembly of section .text.libgcc:

000004a2 <__movmemx_qi>:
 4a2:	99 27       	eor	r25, r25

000004a4 <__movmemx_hi>:
 4a4:	77 fd       	sbrc	r23, 7
 4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <__movmemx_hi+0xe>
 4a8:	05 90       	lpm	r0, Z+
 4aa:	0d 92       	st	X+, r0
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__movmemx_hi+0x4>
 4b0:	08 95       	ret
 4b2:	01 90       	ld	r0, Z+
 4b4:	0d 92       	st	X+, r0
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <__movmemx_hi+0xe>
 4ba:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000004fa <_fini>:
 4fa:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000004fc <__funcs_on_exit>:
 4fc:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000004fe <__simulator_exit>:
 4fe:	08 95       	ret

Disassembly of section .text.exit:

000004bc <exit>:
 4bc:	ec 01       	movw	r28, r24
 4be:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__funcs_on_exit>
 4c2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_fini>
 4c6:	ce 01       	movw	r24, r28
 4c8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__simulator_exit>
 4cc:	ce 01       	movw	r24, r28
 4ce:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Exit>

Disassembly of section .text._Exit:

000004f6 <_Exit>:
 4f6:	0e 94 5b 00 	call	0xb6	; 0xb6 <_exit>
