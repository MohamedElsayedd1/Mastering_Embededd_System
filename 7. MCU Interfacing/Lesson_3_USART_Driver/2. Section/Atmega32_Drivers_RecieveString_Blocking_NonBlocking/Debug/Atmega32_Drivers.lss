
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000676  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000002a  00000000  00000000  000006a5  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000006cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d8b  00000000  00000000  000007a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fa  00000000  00000000  00002532  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000873  00000000  00000000  00002e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000268  00000000  00000000  000036a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000200  00000000  00000000  00003908  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bf6  00000000  00000000  00003b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000046fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000058a  0000058a  0000065e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000047a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.lcd_send_4bit 00000010  00000572  00000572  00000646  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_send_EN 00000026  000004e8  000004e8  000005bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_send_command 00000028  00000498  00000498  0000056c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_initialize 0000009c  000002b4  000002b4  00000388  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_send_char_data 00000028  000004c0  000004c0  00000594  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_set_cursor_pos 0000003e  0000045a  0000045a  0000052e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.lcd_send_string 0000001a  0000050e  0000050e  000005e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.lcd_send_string_pos 0000001a  00000528  00000528  000005fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .progmemx.data 00000015  000000ba  000000ba  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 23 .text.main    00000072  00000350  00000350  00000424  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .data.myUart  0000000a  00800074  00000598  0000066c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 25 .text.UART_Init 000000f0  000000e4  000000e4  000001b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.UART_ReceiveByte 00000008  00000582  00000582  00000656  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.USART_ReceiveString 00000054  000003c2  000003c2  00000496  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .progmemx.data 00000015  000000cf  000000cf  000001a3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 29 .text.__vector_13 000000e0  000001d4  000001d4  000002a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .bss.buffer_index 00000001  0080007e  0080007e  00000676  2**0
                  ALLOC
 31 .bss.uart_buffer 00000014  00800060  00800060  00000676  2**0
                  ALLOC
 32 .text.libgcc.div 00000044  00000416  00000416  000004ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.libgcc  0000001a  00000542  00000542  00000616  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__dummy_fini 00000002  00000592  00000592  00000666  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_funcs_on_exit 00000002  00000594  00000594  00000668  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__dummy_simulator_exit 00000002  00000596  00000596  0000066a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.exit    00000016  0000055c  0000055c  00000630  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text._Exit   00000004  0000058e  0000058e  00000662  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
   8:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
   c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
  10:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
  14:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
  18:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
  1c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
  20:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
  24:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
  28:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
  2c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
  30:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
  34:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_13>
  38:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
  3c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
  40:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
  44:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
  48:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
  4c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
  50:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 74       	andi	r16, 0x40	; 64
  58:	80 00       	.word	0x0080	; ????
  5a:	74 00       	.word	0x0074	; ????
  5c:	7e 00       	.word	0x007e	; ????
  5e:	05 98       	cbi	0x00, 5	; 0
  60:	00 7e       	andi	r16, 0xE0	; 224
  62:	00 7f       	andi	r16, 0xF0	; 240
  64:	80 00       	.word	0x0080	; ????

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	e4 e5       	ldi	r30, 0x54	; 84
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	17 c0       	rjmp	.+46     	; 0xa8 <__do_clear_bss+0x8>
  7a:	b5 91       	lpm	r27, Z+
  7c:	a5 91       	lpm	r26, Z+
  7e:	35 91       	lpm	r19, Z+
  80:	25 91       	lpm	r18, Z+
  82:	05 91       	lpm	r16, Z+
  84:	07 fd       	sbrc	r16, 7
  86:	0c c0       	rjmp	.+24     	; 0xa0 <__do_clear_bss>
  88:	95 91       	lpm	r25, Z+
  8a:	85 91       	lpm	r24, Z+
  8c:	ef 01       	movw	r28, r30
  8e:	f9 2f       	mov	r31, r25
  90:	e8 2f       	mov	r30, r24
  92:	05 90       	lpm	r0, Z+
  94:	0d 92       	st	X+, r0
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0x20>
  9c:	fe 01       	movw	r30, r28
  9e:	04 c0       	rjmp	.+8      	; 0xa8 <__do_clear_bss+0x8>

000000a0 <__do_clear_bss>:
  a0:	1d 92       	st	X+, r1
  a2:	a2 17       	cp	r26, r18
  a4:	b3 07       	cpc	r27, r19
  a6:	e1 f7       	brne	.-8      	; 0xa0 <__do_clear_bss>
  a8:	e5 36       	cpi	r30, 0x65	; 101
  aa:	f4 07       	cpc	r31, r20
  ac:	31 f7       	brne	.-52     	; 0x7a <__do_copy_data+0x8>
  ae:	0e 94 a8 01 	call	0x350	; 0x350 <main>
  b2:	0c 94 ae 02 	jmp	0x55c	; 0x55c <exit>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>

Disassembly of section .text:

0000058a <__bad_interrupt>:
 58a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_send_4bit:

00000572 <lcd_send_4bit>:
static void lcd_send_4bit(uint8_t command);
static void lcd_send_EN();

static void lcd_send_4bit(uint8_t command) {
	// Clear Lower Nipple First
	LCD_DATA_PORT &= ~(0x0F << 0);
 572:	9b b3       	in	r25, 0x1b	; 27
 574:	90 7f       	andi	r25, 0xF0	; 240
 576:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA_PORT |= (command & 0x0F);
 578:	9b b3       	in	r25, 0x1b	; 27
 57a:	8f 70       	andi	r24, 0x0F	; 15
 57c:	98 2b       	or	r25, r24
 57e:	9b bb       	out	0x1b, r25	; 27
 580:	08 95       	ret

Disassembly of section .text.lcd_send_EN:

000004e8 <lcd_send_EN>:
}

void lcd_send_char_data_pos(uint8_t data, uint8_t row, uint8_t column){
	lcd_set_cursor_pos(row, column);
	lcd_send_char_data(data);
}
 4e8:	88 b3       	in	r24, 0x18	; 24
 4ea:	82 60       	ori	r24, 0x02	; 2
 4ec:	88 bb       	out	0x18, r24	; 24
 4ee:	81 ee       	ldi	r24, 0xE1	; 225
 4f0:	94 e0       	ldi	r25, 0x04	; 4
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <lcd_send_EN+0xa>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <lcd_send_EN+0x10>
 4f8:	00 00       	nop
 4fa:	88 b3       	in	r24, 0x18	; 24
 4fc:	8d 7f       	andi	r24, 0xFD	; 253
 4fe:	88 bb       	out	0x18, r24	; 24
 500:	81 ee       	ldi	r24, 0xE1	; 225
 502:	94 e0       	ldi	r25, 0x04	; 4
 504:	01 97       	sbiw	r24, 0x01	; 1
 506:	f1 f7       	brne	.-4      	; 0x504 <lcd_send_EN+0x1c>
 508:	00 c0       	rjmp	.+0      	; 0x50a <lcd_send_EN+0x22>
 50a:	00 00       	nop
 50c:	08 95       	ret

Disassembly of section .text.lcd_send_command:

00000498 <lcd_send_command>:
 498:	cf 93       	push	r28
 49a:	c8 2f       	mov	r28, r24
 49c:	88 b3       	in	r24, 0x18	; 24
 49e:	8e 7f       	andi	r24, 0xFE	; 254
 4a0:	88 bb       	out	0x18, r24	; 24
 4a2:	8c 2f       	mov	r24, r28
 4a4:	82 95       	swap	r24
 4a6:	8f 70       	andi	r24, 0x0F	; 15
 4a8:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_send_4bit>
 4ac:	0e 94 74 02 	call	0x4e8	; 0x4e8 <lcd_send_EN>
 4b0:	8c 2f       	mov	r24, r28
 4b2:	8f 70       	andi	r24, 0x0F	; 15
 4b4:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_send_4bit>
 4b8:	0e 94 74 02 	call	0x4e8	; 0x4e8 <lcd_send_EN>
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

Disassembly of section .text.lcd_initialize:

000002b4 <lcd_initialize>:
 2b4:	87 b3       	in	r24, 0x17	; 23
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	87 bb       	out	0x17, r24	; 23
 2ba:	87 b3       	in	r24, 0x17	; 23
 2bc:	82 60       	ori	r24, 0x02	; 2
 2be:	87 bb       	out	0x17, r24	; 23
 2c0:	88 b3       	in	r24, 0x18	; 24
 2c2:	8e 7f       	andi	r24, 0xFE	; 254
 2c4:	88 bb       	out	0x18, r24	; 24
 2c6:	88 b3       	in	r24, 0x18	; 24
 2c8:	8d 7f       	andi	r24, 0xFD	; 253
 2ca:	88 bb       	out	0x18, r24	; 24
 2cc:	8f e0       	ldi	r24, 0x0F	; 15
 2ce:	8a bb       	out	0x1a, r24	; 26
 2d0:	8b b3       	in	r24, 0x1b	; 27
 2d2:	80 7f       	andi	r24, 0xF0	; 240
 2d4:	8b bb       	out	0x1b, r24	; 27
 2d6:	87 e8       	ldi	r24, 0x87	; 135
 2d8:	93 e1       	ldi	r25, 0x13	; 19
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <lcd_initialize+0x26>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <lcd_initialize+0x2c>
 2e0:	00 00       	nop
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_send_command>
 2e8:	81 ee       	ldi	r24, 0xE1	; 225
 2ea:	94 e0       	ldi	r25, 0x04	; 4
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <lcd_initialize+0x38>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <lcd_initialize+0x3e>
 2f2:	00 00       	nop
 2f4:	88 e2       	ldi	r24, 0x28	; 40
 2f6:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_send_command>
 2fa:	81 ee       	ldi	r24, 0xE1	; 225
 2fc:	94 e0       	ldi	r25, 0x04	; 4
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <lcd_initialize+0x4a>
 302:	00 c0       	rjmp	.+0      	; 0x304 <lcd_initialize+0x50>
 304:	00 00       	nop
 306:	8c e0       	ldi	r24, 0x0C	; 12
 308:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_send_command>
 30c:	89 ef       	ldi	r24, 0xF9	; 249
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <lcd_initialize+0x5c>
 314:	00 c0       	rjmp	.+0      	; 0x316 <lcd_initialize+0x62>
 316:	00 00       	nop
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_send_command>
 31e:	83 ef       	ldi	r24, 0xF3	; 243
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <lcd_initialize+0x6e>
 326:	00 c0       	rjmp	.+0      	; 0x328 <lcd_initialize+0x74>
 328:	00 00       	nop
 32a:	86 e0       	ldi	r24, 0x06	; 6
 32c:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_send_command>
 330:	89 ef       	ldi	r24, 0xF9	; 249
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <lcd_initialize+0x80>
 338:	00 c0       	rjmp	.+0      	; 0x33a <lcd_initialize+0x86>
 33a:	00 00       	nop
 33c:	80 e8       	ldi	r24, 0x80	; 128
 33e:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_send_command>
 342:	89 ef       	ldi	r24, 0xF9	; 249
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <lcd_initialize+0x92>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <lcd_initialize+0x98>
 34c:	00 00       	nop
 34e:	08 95       	ret

Disassembly of section .text.lcd_send_char_data:

000004c0 <lcd_send_char_data>:
 4c0:	cf 93       	push	r28
 4c2:	c8 2f       	mov	r28, r24
 4c4:	88 b3       	in	r24, 0x18	; 24
 4c6:	81 60       	ori	r24, 0x01	; 1
 4c8:	88 bb       	out	0x18, r24	; 24
 4ca:	8c 2f       	mov	r24, r28
 4cc:	82 95       	swap	r24
 4ce:	8f 70       	andi	r24, 0x0F	; 15
 4d0:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_send_4bit>
 4d4:	0e 94 74 02 	call	0x4e8	; 0x4e8 <lcd_send_EN>
 4d8:	8c 2f       	mov	r24, r28
 4da:	8f 70       	andi	r24, 0x0F	; 15
 4dc:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_send_4bit>
 4e0:	0e 94 74 02 	call	0x4e8	; 0x4e8 <lcd_send_EN>
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

Disassembly of section .text.lcd_set_cursor_pos:

0000045a <lcd_set_cursor_pos>:
 45a:	82 30       	cpi	r24, 0x02	; 2
 45c:	71 f0       	breq	.+28     	; 0x47a <lcd_set_cursor_pos+0x20>
 45e:	18 f4       	brcc	.+6      	; 0x466 <lcd_set_cursor_pos+0xc>
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	31 f0       	breq	.+12     	; 0x470 <lcd_set_cursor_pos+0x16>
 464:	08 95       	ret
 466:	83 30       	cpi	r24, 0x03	; 3
 468:	69 f0       	breq	.+26     	; 0x484 <lcd_set_cursor_pos+0x2a>
 46a:	84 30       	cpi	r24, 0x04	; 4
 46c:	81 f0       	breq	.+32     	; 0x48e <lcd_set_cursor_pos+0x34>
 46e:	08 95       	ret
 470:	8f e7       	ldi	r24, 0x7F	; 127
 472:	86 0f       	add	r24, r22
 474:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_send_command>
 478:	08 95       	ret
 47a:	8f eb       	ldi	r24, 0xBF	; 191
 47c:	86 0f       	add	r24, r22
 47e:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_send_command>
 482:	08 95       	ret
 484:	83 e9       	ldi	r24, 0x93	; 147
 486:	86 0f       	add	r24, r22
 488:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_send_command>
 48c:	08 95       	ret
 48e:	83 ed       	ldi	r24, 0xD3	; 211
 490:	86 0f       	add	r24, r22
 492:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_send_command>
 496:	08 95       	ret

Disassembly of section .text.lcd_send_string:

0000050e <lcd_send_string>:

void lcd_send_string(uint8_t str[]){
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	ec 01       	movw	r28, r24
	while(*str != '\0'){
 514:	03 c0       	rjmp	.+6      	; 0x51c <lcd_send_string+0xe>
		lcd_send_char_data(*str++);
 516:	21 96       	adiw	r28, 0x01	; 1
 518:	0e 94 60 02 	call	0x4c0	; 0x4c0 <lcd_send_char_data>
	lcd_set_cursor_pos(row, column);
	lcd_send_char_data(data);
}

void lcd_send_string(uint8_t str[]){
	while(*str != '\0'){
 51c:	88 81       	ld	r24, Y
 51e:	81 11       	cpse	r24, r1
 520:	fa cf       	rjmp	.-12     	; 0x516 <lcd_send_string+0x8>
		lcd_send_char_data(*str++);
	}
}
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	08 95       	ret

Disassembly of section .text.lcd_send_string_pos:

00000528 <lcd_send_string_pos>:

void lcd_send_string_pos(uint8_t str[], uint8_t row, uint8_t column){
 528:	cf 93       	push	r28
 52a:	df 93       	push	r29
 52c:	ec 01       	movw	r28, r24
 52e:	86 2f       	mov	r24, r22
	lcd_set_cursor_pos(row, column);
 530:	64 2f       	mov	r22, r20
 532:	0e 94 2d 02 	call	0x45a	; 0x45a <lcd_set_cursor_pos>
	lcd_send_string(str);
 536:	ce 01       	movw	r24, r28
 538:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_send_string>
}
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

Disassembly of section .text.main:

00000350 <main>:
	.mode = UART_ASYNC_MODE,           // Asynchronous mode
	.rx_enable_interrupt = UART_DISABLED_INTERRUPT,  // Disable RX interrupt
	.tx_enable_interrupt = UART_DISABLED_INTERRUPT // Disable TX interrupt
};

int main(void) {
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
 358:	a9 97       	sbiw	r28, 0x29	; 41
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	de bf       	out	0x3e, r29	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	cd bf       	out	0x3d, r28	; 61
	// LCD Initialize
 	lcd_initialize();
 364:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_initialize>
	UART_Init(&myUart);
 368:	84 e7       	ldi	r24, 0x74	; 116
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Init>
	
    uint8_t buff[20];
	
	
	while (1) {
		USART_ReceiveString(buff, 20);
 370:	64 e1       	ldi	r22, 0x14	; 20
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	ce 01       	movw	r24, r28
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <USART_ReceiveString>
		
		// Clear LCD and display received string
		uint8_t clear_buf[] = "                    ";
 37c:	2a eb       	ldi	r18, 0xBA	; 186
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	85 e1       	ldi	r24, 0x15	; 21
 384:	f9 01       	movw	r30, r18
 386:	de 01       	movw	r26, r28
 388:	55 96       	adiw	r26, 0x15	; 21
 38a:	74 2f       	mov	r23, r20
 38c:	0e 94 a1 02 	call	0x542	; 0x542 <__movmemx_qi>
		lcd_send_string_pos(clear_buf, 2, 1);
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	62 e0       	ldi	r22, 0x02	; 2
 394:	ce 01       	movw	r24, r28
 396:	45 96       	adiw	r24, 0x15	; 21
 398:	0e 94 94 02 	call	0x528	; 0x528 <lcd_send_string_pos>
		lcd_send_string_pos(clear_buf, 3, 1);
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	63 e0       	ldi	r22, 0x03	; 3
 3a0:	ce 01       	movw	r24, r28
 3a2:	45 96       	adiw	r24, 0x15	; 21
 3a4:	0e 94 94 02 	call	0x528	; 0x528 <lcd_send_string_pos>
		lcd_send_string_pos(clear_buf, 4, 1);
 3a8:	41 e0       	ldi	r20, 0x01	; 1
 3aa:	64 e0       	ldi	r22, 0x04	; 4
 3ac:	ce 01       	movw	r24, r28
 3ae:	45 96       	adiw	r24, 0x15	; 21
 3b0:	0e 94 94 02 	call	0x528	; 0x528 <lcd_send_string_pos>
		lcd_send_string_pos(buff, 2, 1);
 3b4:	41 e0       	ldi	r20, 0x01	; 1
 3b6:	62 e0       	ldi	r22, 0x02	; 2
 3b8:	ce 01       	movw	r24, r28
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	0e 94 94 02 	call	0x528	; 0x528 <lcd_send_string_pos>
 3c0:	d7 cf       	rjmp	.-82     	; 0x370 <main+0x20>

Disassembly of section .text.UART_Init:

000000e4 <UART_Init>:


void UART_TransmitByte(uint8_t data) {
	/* Wait for empty transmit buffer */
	while (!READ_BIT(UCSRA, UDRE)); // Wait until the buffer is ready
	UDR = data;                    // Write the data to the USART data register
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
  ea:	f8 94       	cli
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	8d 7f       	andi	r24, 0xFD	; 253
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	88 81       	ld	r24, Y
  f4:	99 81       	ldd	r25, Y+1	; 0x01
  f6:	aa 81       	ldd	r26, Y+2	; 0x02
  f8:	bb 81       	ldd	r27, Y+3	; 0x03
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	aa 1f       	adc	r26, r26
 100:	bb 1f       	adc	r27, r27
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	aa 1f       	adc	r26, r26
 108:	bb 1f       	adc	r27, r27
 10a:	9c 01       	movw	r18, r24
 10c:	ad 01       	movw	r20, r26
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	44 1f       	adc	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	44 1f       	adc	r20, r20
 11c:	55 1f       	adc	r21, r21
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	72 e1       	ldi	r23, 0x12	; 18
 122:	8a e7       	ldi	r24, 0x7A	; 122
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 0b 02 	call	0x416	; 0x416 <__udivmodsi4>
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	31 09       	sbc	r19, r1
 12e:	29 b9       	out	0x09, r18	; 9
 130:	30 bd       	out	0x20, r19	; 32
 132:	8f 81       	ldd	r24, Y+7	; 0x07
 134:	81 11       	cpse	r24, r1
 136:	04 c0       	rjmp	.+8      	; 0x140 <UART_Init+0x5c>
 138:	80 b5       	in	r24, 0x20	; 32
 13a:	8f 7b       	andi	r24, 0xBF	; 191
 13c:	80 bd       	out	0x20, r24	; 32
 13e:	03 c0       	rjmp	.+6      	; 0x146 <UART_Init+0x62>
 140:	80 b5       	in	r24, 0x20	; 32
 142:	80 64       	ori	r24, 0x40	; 64
 144:	80 bd       	out	0x20, r24	; 32
 146:	80 b5       	in	r24, 0x20	; 32
 148:	8f 7c       	andi	r24, 0xCF	; 207
 14a:	80 bd       	out	0x20, r24	; 32
 14c:	20 b5       	in	r18, 0x20	; 32
 14e:	9e 81       	ldd	r25, Y+6	; 0x06
 150:	93 70       	andi	r25, 0x03	; 3
 152:	30 e1       	ldi	r19, 0x10	; 16
 154:	93 9f       	mul	r25, r19
 156:	c0 01       	movw	r24, r0
 158:	11 24       	eor	r1, r1
 15a:	82 2b       	or	r24, r18
 15c:	80 bd       	out	0x20, r24	; 32
 15e:	80 b5       	in	r24, 0x20	; 32
 160:	87 7f       	andi	r24, 0xF7	; 247
 162:	80 bd       	out	0x20, r24	; 32
 164:	20 b5       	in	r18, 0x20	; 32
 166:	9d 81       	ldd	r25, Y+5	; 0x05
 168:	89 2f       	mov	r24, r25
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	82 2b       	or	r24, r18
 17a:	80 bd       	out	0x20, r24	; 32
 17c:	80 b5       	in	r24, 0x20	; 32
 17e:	89 7f       	andi	r24, 0xF9	; 249
 180:	80 bd       	out	0x20, r24	; 32
 182:	20 b5       	in	r18, 0x20	; 32
 184:	9c 81       	ldd	r25, Y+4	; 0x04
 186:	93 70       	andi	r25, 0x03	; 3
 188:	89 2f       	mov	r24, r25
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	82 2b       	or	r24, r18
 192:	80 bd       	out	0x20, r24	; 32
 194:	8c 81       	ldd	r24, Y+4	; 0x04
 196:	87 30       	cpi	r24, 0x07	; 7
 198:	21 f4       	brne	.+8      	; 0x1a2 <UART_Init+0xbe>
 19a:	8a b1       	in	r24, 0x0a	; 10
 19c:	84 60       	ori	r24, 0x04	; 4
 19e:	8a b9       	out	0x0a, r24	; 10
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <UART_Init+0xc4>
 1a2:	8a b1       	in	r24, 0x0a	; 10
 1a4:	8b 7f       	andi	r24, 0xFB	; 251
 1a6:	8a b9       	out	0x0a, r24	; 10
 1a8:	8a b1       	in	r24, 0x0a	; 10
 1aa:	88 60       	ori	r24, 0x08	; 8
 1ac:	8a b9       	out	0x0a, r24	; 10
 1ae:	8a b1       	in	r24, 0x0a	; 10
 1b0:	80 61       	ori	r24, 0x10	; 16
 1b2:	8a b9       	out	0x0a, r24	; 10
 1b4:	88 85       	ldd	r24, Y+8	; 0x08
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	19 f4       	brne	.+6      	; 0x1c0 <UART_Init+0xdc>
 1ba:	8a b1       	in	r24, 0x0a	; 10
 1bc:	80 68       	ori	r24, 0x80	; 128
 1be:	8a b9       	out	0x0a, r24	; 10
 1c0:	89 85       	ldd	r24, Y+9	; 0x09
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	19 f4       	brne	.+6      	; 0x1cc <UART_Init+0xe8>
 1c6:	8a b1       	in	r24, 0x0a	; 10
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	8a b9       	out	0x0a, r24	; 10
 1cc:	78 94       	sei
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

Disassembly of section .text.UART_ReceiveByte:

00000582 <UART_ReceiveByte>:
}

uint8_t UART_ReceiveByte(void) {
	/* Wait for data to be received */
	while (!READ_BIT(UCSRA, RXC));  // Wait until data is received
 582:	5f 9b       	sbis	0x0b, 7	; 11
 584:	fe cf       	rjmp	.-4      	; 0x582 <UART_ReceiveByte>
	return UDR;                    // Return the received data
 586:	8c b1       	in	r24, 0x0c	; 12
}
 588:	08 95       	ret

Disassembly of section .text.USART_ReceiveString:

000003c2 <USART_ReceiveString>:


void UART_TransmitByte(uint8_t data) {
	/* Wait for empty transmit buffer */
	while (!READ_BIT(UCSRA, UDRE)); // Wait until the buffer is ready
	UDR = data;                    // Write the data to the USART data register
 3c2:	ef 92       	push	r14
 3c4:	ff 92       	push	r15
 3c6:	0f 93       	push	r16
 3c8:	1f 93       	push	r17
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	8c 01       	movw	r16, r24
 3d0:	7b 01       	movw	r14, r22
 3d2:	c0 e0       	ldi	r28, 0x00	; 0
 3d4:	d0 e0       	ldi	r29, 0x00	; 0
 3d6:	0e 94 c1 02 	call	0x582	; 0x582 <UART_ReceiveByte>
 3da:	8a 30       	cpi	r24, 0x0A	; 10
 3dc:	11 f0       	breq	.+4      	; 0x3e2 <USART_ReceiveString+0x20>
 3de:	8d 30       	cpi	r24, 0x0D	; 13
 3e0:	21 f4       	brne	.+8      	; 0x3ea <USART_ReceiveString+0x28>
 3e2:	c0 0f       	add	r28, r16
 3e4:	d1 1f       	adc	r29, r17
 3e6:	18 82       	st	Y, r1
 3e8:	0f c0       	rjmp	.+30     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3ea:	97 01       	movw	r18, r14
 3ec:	21 50       	subi	r18, 0x01	; 1
 3ee:	31 09       	sbc	r19, r1
 3f0:	c2 17       	cp	r28, r18
 3f2:	d3 07       	cpc	r29, r19
 3f4:	30 f4       	brcc	.+12     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f6:	f8 01       	movw	r30, r16
 3f8:	ec 0f       	add	r30, r28
 3fa:	fd 1f       	adc	r31, r29
 3fc:	80 83       	st	Z, r24
 3fe:	21 96       	adiw	r28, 0x01	; 1
 400:	ea cf       	rjmp	.-44     	; 0x3d6 <USART_ReceiveString+0x14>
 402:	c0 0f       	add	r28, r16
 404:	d1 1f       	adc	r29, r17
 406:	18 82       	st	Y, r1
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	ef 90       	pop	r14
 414:	08 95       	ret

Disassembly of section .text.__vector_13:

000001d4 <__vector_13>:
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	2f 93       	push	r18
 1e0:	3f 93       	push	r19
 1e2:	4f 93       	push	r20
 1e4:	5f 93       	push	r21
 1e6:	6f 93       	push	r22
 1e8:	7f 93       	push	r23
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	af 93       	push	r26
 1f0:	bf 93       	push	r27
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	65 97       	sbiw	r28, 0x15	; 21
 200:	de bf       	out	0x3e, r29	; 62
 202:	cd bf       	out	0x3d, r28	; 61
 204:	0e 94 c1 02 	call	0x582	; 0x582 <UART_ReceiveByte>
 208:	8a 30       	cpi	r24, 0x0A	; 10
 20a:	31 f0       	breq	.+12     	; 0x218 <__vector_13+0x44>
 20c:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <buffer_index>
 210:	93 31       	cpi	r25, 0x13	; 19
 212:	10 f4       	brcc	.+4      	; 0x218 <__vector_13+0x44>
 214:	8d 30       	cpi	r24, 0x0D	; 13
 216:	59 f5       	brne	.+86     	; 0x26e <__vector_13+0x9a>
 218:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <buffer_index>
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	e0 5a       	subi	r30, 0xA0	; 160
 220:	ff 4f       	sbci	r31, 0xFF	; 255
 222:	10 82       	st	Z, r1
 224:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <buffer_index>
 228:	2f ec       	ldi	r18, 0xCF	; 207
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	85 e1       	ldi	r24, 0x15	; 21
 230:	f9 01       	movw	r30, r18
 232:	de 01       	movw	r26, r28
 234:	11 96       	adiw	r26, 0x01	; 1
 236:	74 2f       	mov	r23, r20
 238:	0e 94 a1 02 	call	0x542	; 0x542 <__movmemx_qi>
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	62 e0       	ldi	r22, 0x02	; 2
 240:	ce 01       	movw	r24, r28
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	0e 94 94 02 	call	0x528	; 0x528 <lcd_send_string_pos>
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	63 e0       	ldi	r22, 0x03	; 3
 24c:	ce 01       	movw	r24, r28
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	0e 94 94 02 	call	0x528	; 0x528 <lcd_send_string_pos>
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	64 e0       	ldi	r22, 0x04	; 4
 258:	ce 01       	movw	r24, r28
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	0e 94 94 02 	call	0x528	; 0x528 <lcd_send_string_pos>
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	62 e0       	ldi	r22, 0x02	; 2
 264:	80 e6       	ldi	r24, 0x60	; 96
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 94 02 	call	0x528	; 0x528 <lcd_send_string_pos>
 26c:	0a c0       	rjmp	.+20     	; 0x282 <__vector_13+0xae>
 26e:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <buffer_index>
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	9e 0f       	add	r25, r30
 276:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <buffer_index>
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	e0 5a       	subi	r30, 0xA0	; 160
 27e:	ff 4f       	sbci	r31, 0xFF	; 255
 280:	80 83       	st	Z, r24
 282:	65 96       	adiw	r28, 0x15	; 21
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	f8 94       	cli
 288:	de bf       	out	0x3e, r29	; 62
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	cd bf       	out	0x3d, r28	; 61
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	ff 91       	pop	r31
 294:	ef 91       	pop	r30
 296:	bf 91       	pop	r27
 298:	af 91       	pop	r26
 29a:	9f 91       	pop	r25
 29c:	8f 91       	pop	r24
 29e:	7f 91       	pop	r23
 2a0:	6f 91       	pop	r22
 2a2:	5f 91       	pop	r21
 2a4:	4f 91       	pop	r20
 2a6:	3f 91       	pop	r19
 2a8:	2f 91       	pop	r18
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

Disassembly of section .text.libgcc.div:

00000416 <__udivmodsi4>:
 416:	a1 e2       	ldi	r26, 0x21	; 33
 418:	1a 2e       	mov	r1, r26
 41a:	aa 1b       	sub	r26, r26
 41c:	bb 1b       	sub	r27, r27
 41e:	fd 01       	movw	r30, r26
 420:	0d c0       	rjmp	.+26     	; 0x43c <__udivmodsi4_ep>

00000422 <__udivmodsi4_loop>:
 422:	aa 1f       	adc	r26, r26
 424:	bb 1f       	adc	r27, r27
 426:	ee 1f       	adc	r30, r30
 428:	ff 1f       	adc	r31, r31
 42a:	a2 17       	cp	r26, r18
 42c:	b3 07       	cpc	r27, r19
 42e:	e4 07       	cpc	r30, r20
 430:	f5 07       	cpc	r31, r21
 432:	20 f0       	brcs	.+8      	; 0x43c <__udivmodsi4_ep>
 434:	a2 1b       	sub	r26, r18
 436:	b3 0b       	sbc	r27, r19
 438:	e4 0b       	sbc	r30, r20
 43a:	f5 0b       	sbc	r31, r21

0000043c <__udivmodsi4_ep>:
 43c:	66 1f       	adc	r22, r22
 43e:	77 1f       	adc	r23, r23
 440:	88 1f       	adc	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	1a 94       	dec	r1
 446:	69 f7       	brne	.-38     	; 0x422 <__udivmodsi4_loop>
 448:	60 95       	com	r22
 44a:	70 95       	com	r23
 44c:	80 95       	com	r24
 44e:	90 95       	com	r25
 450:	9b 01       	movw	r18, r22
 452:	ac 01       	movw	r20, r24
 454:	bd 01       	movw	r22, r26
 456:	cf 01       	movw	r24, r30
 458:	08 95       	ret

Disassembly of section .text.libgcc:

00000542 <__movmemx_qi>:
 542:	99 27       	eor	r25, r25

00000544 <__movmemx_hi>:
 544:	77 fd       	sbrc	r23, 7
 546:	05 c0       	rjmp	.+10     	; 0x552 <__movmemx_hi+0xe>
 548:	05 90       	lpm	r0, Z+
 54a:	0d 92       	st	X+, r0
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	e1 f7       	brne	.-8      	; 0x548 <__movmemx_hi+0x4>
 550:	08 95       	ret
 552:	01 90       	ld	r0, Z+
 554:	0d 92       	st	X+, r0
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	e1 f7       	brne	.-8      	; 0x552 <__movmemx_hi+0xe>
 55a:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000592 <_fini>:
 592:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000594 <__funcs_on_exit>:
 594:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000596 <__simulator_exit>:
 596:	08 95       	ret

Disassembly of section .text.exit:

0000055c <exit>:
 55c:	ec 01       	movw	r28, r24
 55e:	0e 94 ca 02 	call	0x594	; 0x594 <__funcs_on_exit>
 562:	0e 94 c9 02 	call	0x592	; 0x592 <_fini>
 566:	ce 01       	movw	r24, r28
 568:	0e 94 cb 02 	call	0x596	; 0x596 <__simulator_exit>
 56c:	ce 01       	movw	r24, r28
 56e:	0e 94 c7 02 	call	0x58e	; 0x58e <_Exit>

Disassembly of section .text._Exit:

0000058e <_Exit>:
 58e:	0e 94 5b 00 	call	0xb6	; 0xb6 <_exit>
