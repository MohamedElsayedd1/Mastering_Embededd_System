
GPIO_Lab_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000404  08000404  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000404  08000404  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000404  08000404  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000404  08000404  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000404  08000404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800040c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000410  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000410  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000218  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000127  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000025c  00000000  00000000  0002036c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000080  00000000  00000000  000205c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000068  00000000  00000000  00020648  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000f50  00000000  00000000  000206b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000004a8  00000000  00000000  00021600  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00003e4e  00000000  00000000  00021aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000258f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000154  00000000  00000000  00025974  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	080003ec 	.word	0x080003ec

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	080003ec 	.word	0x080003ec

08000170 <clock_Init>:
typedef enum{
	GPIO_LOW_STATE,
	GPIO_HIGH_STATE
}gpio_state_t;

void clock_Init(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_APB2ENR |= (1 << 2); // IO port A clock enabled
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_Init+0x24>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_Init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR |= (1 << 3); // IO port B clock enabled
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_Init+0x24>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_Init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6013      	str	r3, [r2, #0]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021018 	.word	0x40021018

08000198 <GPIO_Init>:

void GPIO_Init(){
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	// Configure PA1 and PA13 as Floating Input
	// 00: Input mode (reset state)
	GPIOA_CRL &= ~(0b11 << 4);
 800019c:	4b2b      	ldr	r3, [pc, #172]	; (800024c <GPIO_Init+0xb4>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a2a      	ldr	r2, [pc, #168]	; (800024c <GPIO_Init+0xb4>)
 80001a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80001a6:	6013      	str	r3, [r2, #0]
	GPIOA_CRH &= ~(0b11 << 20);
 80001a8:	4b29      	ldr	r3, [pc, #164]	; (8000250 <GPIO_Init+0xb8>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a28      	ldr	r2, [pc, #160]	; (8000250 <GPIO_Init+0xb8>)
 80001ae:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80001b2:	6013      	str	r3, [r2, #0]
	// 01: Floating input (reset state)
	GPIOA_CRL &= ~(0b11 << 6);
 80001b4:	4b25      	ldr	r3, [pc, #148]	; (800024c <GPIO_Init+0xb4>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a24      	ldr	r2, [pc, #144]	; (800024c <GPIO_Init+0xb4>)
 80001ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001be:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= (0b01 << 6);
 80001c0:	4b22      	ldr	r3, [pc, #136]	; (800024c <GPIO_Init+0xb4>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a21      	ldr	r2, [pc, #132]	; (800024c <GPIO_Init+0xb4>)
 80001c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001ca:	6013      	str	r3, [r2, #0]
	GPIOA_CRH &= ~(0b11 << 22);
 80001cc:	4b20      	ldr	r3, [pc, #128]	; (8000250 <GPIO_Init+0xb8>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a1f      	ldr	r2, [pc, #124]	; (8000250 <GPIO_Init+0xb8>)
 80001d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80001d6:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= (0b01 << 22);
 80001d8:	4b1d      	ldr	r3, [pc, #116]	; (8000250 <GPIO_Init+0xb8>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a1c      	ldr	r2, [pc, #112]	; (8000250 <GPIO_Init+0xb8>)
 80001de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001e2:	6013      	str	r3, [r2, #0]

	// Configure PB1 and PB13 as Push-Pull Output
	// 01: Output mode, max speed 10 MHz.
	GPIOB_CRL &= ~(0b11 << 4);
 80001e4:	4b1b      	ldr	r3, [pc, #108]	; (8000254 <GPIO_Init+0xbc>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a1a      	ldr	r2, [pc, #104]	; (8000254 <GPIO_Init+0xbc>)
 80001ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOB_CRL |= (0b10 << 4);
 80001f0:	4b18      	ldr	r3, [pc, #96]	; (8000254 <GPIO_Init+0xbc>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a17      	ldr	r2, [pc, #92]	; (8000254 <GPIO_Init+0xbc>)
 80001f6:	f043 0320 	orr.w	r3, r3, #32
 80001fa:	6013      	str	r3, [r2, #0]
	GPIOB_CRH &= ~(0b11 << 20);
 80001fc:	4b16      	ldr	r3, [pc, #88]	; (8000258 <GPIO_Init+0xc0>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a15      	ldr	r2, [pc, #84]	; (8000258 <GPIO_Init+0xc0>)
 8000202:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000206:	6013      	str	r3, [r2, #0]
	GPIOB_CRH |= (0b10 << 20);
 8000208:	4b13      	ldr	r3, [pc, #76]	; (8000258 <GPIO_Init+0xc0>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a12      	ldr	r2, [pc, #72]	; (8000258 <GPIO_Init+0xc0>)
 800020e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000212:	6013      	str	r3, [r2, #0]
	// 00: General purpose output push-pull
	GPIOB_CRL &= ~(0b11 << 6);
 8000214:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <GPIO_Init+0xbc>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a0e      	ldr	r2, [pc, #56]	; (8000254 <GPIO_Init+0xbc>)
 800021a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800021e:	6013      	str	r3, [r2, #0]
	GPIOB_CRH &= ~(0b11 << 22);
 8000220:	4b0d      	ldr	r3, [pc, #52]	; (8000258 <GPIO_Init+0xc0>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0c      	ldr	r2, [pc, #48]	; (8000258 <GPIO_Init+0xc0>)
 8000226:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800022a:	6013      	str	r3, [r2, #0]
	GPIOB_ODR |= (1 << 1);
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <GPIO_Init+0xc4>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a0a      	ldr	r2, [pc, #40]	; (800025c <GPIO_Init+0xc4>)
 8000232:	f043 0302 	orr.w	r3, r3, #2
 8000236:	6013      	str	r3, [r2, #0]
	GPIOB_ODR |= (1 << 13);
 8000238:	4b08      	ldr	r3, [pc, #32]	; (800025c <GPIO_Init+0xc4>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a07      	ldr	r2, [pc, #28]	; (800025c <GPIO_Init+0xc4>)
 800023e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000242:	6013      	str	r3, [r2, #0]
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	40010800 	.word	0x40010800
 8000250:	40010804 	.word	0x40010804
 8000254:	40010c00 	.word	0x40010c00
 8000258:	40010c04 	.word	0x40010c04
 800025c:	40010c0c 	.word	0x40010c0c

08000260 <ReadPushButton1>:

gpio_state_t ReadPushButton1(void){
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
	// Read the logic of PA1 pin -> Push-Up Resistor (High)
	gpio_state_t btn1_state = READ_BIT(GPIOA_IDR, 1);
 8000266:	4b06      	ldr	r3, [pc, #24]	; (8000280 <ReadPushButton1+0x20>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	085b      	lsrs	r3, r3, #1
 800026c:	b2db      	uxtb	r3, r3
 800026e:	f003 0301 	and.w	r3, r3, #1
 8000272:	71fb      	strb	r3, [r7, #7]
	return btn1_state;
 8000274:	79fb      	ldrb	r3, [r7, #7]
}
 8000276:	4618      	mov	r0, r3
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	40010808 	.word	0x40010808

08000284 <ReadPushButton2>:

gpio_state_t ReadPushButton2(void){
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
	// Read the logic of PA13 pin -> Push-Down Resistor (Low)
	gpio_state_t btn2_state = READ_BIT(GPIOA_IDR, 13);
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <ReadPushButton2+0x20>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	0b5b      	lsrs	r3, r3, #13
 8000290:	b2db      	uxtb	r3, r3
 8000292:	f003 0301 	and.w	r3, r3, #1
 8000296:	71fb      	strb	r3, [r7, #7]
	return btn2_state;
 8000298:	79fb      	ldrb	r3, [r7, #7]
}
 800029a:	4618      	mov	r0, r3
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr
 80002a4:	40010808 	.word	0x40010808

080002a8 <toggleLed1>:

void toggleLed1(void){
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
	// Toggle Led connected to PB1
	TOGGLE_BIT(GPIOB_ODR, 1);
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <toggleLed1+0x18>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a03      	ldr	r2, [pc, #12]	; (80002c0 <toggleLed1+0x18>)
 80002b2:	f083 0302 	eor.w	r3, r3, #2
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	40010c0c 	.word	0x40010c0c

080002c4 <toggleLed2>:

void toggleLed2(void){
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
	// Toggle Led connected to PB13
	TOGGLE_BIT(GPIOB_ODR, 13);
 80002c8:	4b04      	ldr	r3, [pc, #16]	; (80002dc <toggleLed2+0x18>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a03      	ldr	r2, [pc, #12]	; (80002dc <toggleLed2+0x18>)
 80002ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80002d2:	6013      	str	r3, [r2, #0]
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	40010c0c 	.word	0x40010c0c

080002e0 <delay>:

void delay(volatile int count) {
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
    while(count--);
 80002e8:	bf00      	nop
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	1e5a      	subs	r2, r3, #1
 80002ee:	607a      	str	r2, [r7, #4]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d1fa      	bne.n	80002ea <delay+0xa>
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr
	...

08000300 <main>:

uint32_t btn1_prev = GPIO_HIGH_STATE;
uint32_t btn2_prev = GPIO_LOW_STATE;

int main(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
	clock_Init();
 8000306:	f7ff ff33 	bl	8000170 <clock_Init>
	GPIO_Init();
 800030a:	f7ff ff45 	bl	8000198 <GPIO_Init>
    while(1){
    	// Read Push-Button 1, 2 Logic
    	// Read PA1 pin
    	gpio_state_t btn1_current = ReadPushButton1();
 800030e:	f7ff ffa7 	bl	8000260 <ReadPushButton1>
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
    	// Check on Push-Button 1 -> PA1 pin
    	if(btn1_current == GPIO_LOW_STATE && btn1_prev == GPIO_HIGH_STATE){
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d105      	bne.n	8000328 <main+0x28>
 800031c:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <main+0x48>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d101      	bne.n	8000328 <main+0x28>
    		toggleLed1();
 8000324:	f7ff ffc0 	bl	80002a8 <toggleLed1>
    	}
    	btn1_prev = btn1_current;
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	4a07      	ldr	r2, [pc, #28]	; (8000348 <main+0x48>)
 800032c:	6013      	str	r3, [r2, #0]
//    		toggleLed1();
//    		while(btn1_current == GPIO_LOW_STATE);
//    	}

    	// Read PA13 pin
    	gpio_state_t btn2_current = ReadPushButton2();
 800032e:	f7ff ffa9 	bl	8000284 <ReadPushButton2>
 8000332:	4603      	mov	r3, r0
 8000334:	71bb      	strb	r3, [r7, #6]
    	// Check on Push-Button 2 -> PA13 pin
		if(btn2_current == GPIO_HIGH_STATE){
 8000336:	79bb      	ldrb	r3, [r7, #6]
 8000338:	2b01      	cmp	r3, #1
 800033a:	d101      	bne.n	8000340 <main+0x40>
			toggleLed2();
 800033c:	f7ff ffc2 	bl	80002c4 <toggleLed2>
		}
		delay(100000);
 8000340:	4802      	ldr	r0, [pc, #8]	; (800034c <main+0x4c>)
 8000342:	f7ff ffcd 	bl	80002e0 <delay>
    while(1){
 8000346:	e7e2      	b.n	800030e <main+0xe>
 8000348:	20000000 	.word	0x20000000
 800034c:	000186a0 	.word	0x000186a0

08000350 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000352:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000354:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000358:	480c      	ldr	r0, [pc, #48]	; (800038c <LoopForever+0x6>)
  ldr r1, =_edata
 800035a:	490d      	ldr	r1, [pc, #52]	; (8000390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800035c:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <LoopForever+0xe>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000360:	e002      	b.n	8000368 <LoopCopyDataInit>

08000362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000366:	3304      	adds	r3, #4

08000368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800036c:	d3f9      	bcc.n	8000362 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036e:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000370:	4c0a      	ldr	r4, [pc, #40]	; (800039c <LoopForever+0x16>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000374:	e001      	b.n	800037a <LoopFillZerobss>

08000376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000378:	3204      	adds	r2, #4

0800037a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800037c:	d3fb      	bcc.n	8000376 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037e:	f000 f811 	bl	80003a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000382:	f7ff ffbd 	bl	8000300 <main>

08000386 <LoopForever>:

LoopForever:
    b LoopForever
 8000386:	e7fe      	b.n	8000386 <LoopForever>
  ldr   r0, =_estack
 8000388:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800038c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000390:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000394:	0800040c 	.word	0x0800040c
  ldr r2, =_sbss
 8000398:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800039c:	20000020 	.word	0x20000020

080003a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a0:	e7fe      	b.n	80003a0 <ADC1_2_IRQHandler>
	...

080003a4 <__libc_init_array>:
 80003a4:	b570      	push	{r4, r5, r6, lr}
 80003a6:	2500      	movs	r5, #0
 80003a8:	4e0c      	ldr	r6, [pc, #48]	; (80003dc <__libc_init_array+0x38>)
 80003aa:	4c0d      	ldr	r4, [pc, #52]	; (80003e0 <__libc_init_array+0x3c>)
 80003ac:	1ba4      	subs	r4, r4, r6
 80003ae:	10a4      	asrs	r4, r4, #2
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	d109      	bne.n	80003c8 <__libc_init_array+0x24>
 80003b4:	f000 f81a 	bl	80003ec <_init>
 80003b8:	2500      	movs	r5, #0
 80003ba:	4e0a      	ldr	r6, [pc, #40]	; (80003e4 <__libc_init_array+0x40>)
 80003bc:	4c0a      	ldr	r4, [pc, #40]	; (80003e8 <__libc_init_array+0x44>)
 80003be:	1ba4      	subs	r4, r4, r6
 80003c0:	10a4      	asrs	r4, r4, #2
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	d105      	bne.n	80003d2 <__libc_init_array+0x2e>
 80003c6:	bd70      	pop	{r4, r5, r6, pc}
 80003c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003cc:	4798      	blx	r3
 80003ce:	3501      	adds	r5, #1
 80003d0:	e7ee      	b.n	80003b0 <__libc_init_array+0xc>
 80003d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003d6:	4798      	blx	r3
 80003d8:	3501      	adds	r5, #1
 80003da:	e7f2      	b.n	80003c2 <__libc_init_array+0x1e>
 80003dc:	08000404 	.word	0x08000404
 80003e0:	08000404 	.word	0x08000404
 80003e4:	08000404 	.word	0x08000404
 80003e8:	08000408 	.word	0x08000408

080003ec <_init>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr

080003f8 <_fini>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr
